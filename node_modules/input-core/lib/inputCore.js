'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createInput = exports.defaults = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _defineMaskList = require('./functions/defineMaskList');

var _defineMaskList2 = _interopRequireDefault(_defineMaskList);

var _inputValue = require('./functions/inputValue');

var _inputValue2 = _interopRequireDefault(_inputValue);

var _removeSelectedRange = require('./functions/removeSelectedRange');

var _removeSelectedRange2 = _interopRequireDefault(_removeSelectedRange);

var _charTypesEnum = require('./constants/charTypesEnum');

var _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InputCore = function () {
    function InputCore(_ref) {
        var value = _ref.value,
            mask = _ref.mask,
            reformat = _ref.reformat,
            maskFormat = _ref.maskFormat,
            maskChar = _ref.maskChar,
            maskString = _ref.maskString;

        _classCallCheck(this, InputCore);

        if (maskString && maskString.length !== mask.length) {
            throw new Error('maskString must have same length as mask');
        }
        if (maskChar.length > 1) {
            throw new Error('maskChar must have only 1 char');
        }
        this._maskString = maskString;
        this._maskChar = maskChar;
        this._reformat = reformat;
        this.selection = { start: 0, end: 0 };

        this.setMaskFormat(maskFormat);
        this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);

        this.setValue(value);
    }

    /**
     * Заполняет _maskFormat, который является объектом byId объектов
     * @param {Array} maskFormat     
     */


    _createClass(InputCore, [{
        key: 'setMaskFormat',
        value: function setMaskFormat(maskFormat) {
            this._maskFormat = maskFormat.reduce(function (store, item) {
                store[item.str] = item;
                return store;
            }, {});
        }
    }, {
        key: 'input',
        value: function input(_input) {
            var _value = this._value;

            var result = void 0;

            if (this._reformat) {
                result = this._reformat({
                    data: _value,
                    input: _input,
                    selection: this.selection
                });
            } else {

                _value = (0, _removeSelectedRange2.default)({
                    value: _value,
                    selection: this.selection,
                    mask: this._mask,
                    maskChar: this._maskChar,
                    maskString: this._maskString
                });
                this.selection.end = this.selection.start;

                result = (0, _inputValue2.default)({
                    data: _value,
                    input: _input,
                    selection: this.selection,
                    mask: this._mask,
                    maskChar: this._maskChar,
                    maskString: this._maskString
                });
            }

            this._value = result.value;
            this._maskedValue = result.maskedValue;
            this._visibleValue = result.visibleValue;
            this.setSelection(result.selection);
        }
    }, {
        key: 'setSelection',
        value: function setSelection(_ref2) {
            var start = _ref2.start,
                end = _ref2.end;

            this.selection = {
                start: start,
                end: end
            };
        }
    }, {
        key: 'getSelection',
        value: function getSelection() {
            return {
                start: this.selection.start,
                end: this.selection.end
            };
        }
    }, {
        key: 'backspace',
        value: function backspace() {
            this.removePreviosOrSelected();
        }
    }, {
        key: 'paste',
        value: function paste(value) {
            this.input(value);
        }

        /**
         * Определяет циклический список, в котором учтены циклы маски, по которой будет проходить итерации.
         * @param {String} mask
         * @returns {{head: {}, hasCycle: boolean}}
         */

    }, {
        key: 'setMask',
        value: function setMask(mask) {

            this._mask = (0, _defineMaskList2.default)(mask, this._maskFormat);

            this.setValue(this._value);
        }
    }, {
        key: 'getState',
        value: function getState() {
            return {
                value: this.getValue(),
                maskedValue: this.getMaskedValue(),
                visibleValue: this.getVisibleValue(),
                selection: this.getSelection()
            };
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            return this._value;
        }
    }, {
        key: 'setReformat',
        value: function setReformat(reformat) {
            this._reformat = reformat;
            this.setValue(this._value);
        }
    }, {
        key: 'getMaskedValue',
        value: function getMaskedValue() {
            return this._maskedValue;
        }
    }, {
        key: 'getVisibleValue',
        value: function getVisibleValue() {
            return this._visibleValue;
        }
    }, {
        key: 'setMaskChar',
        value: function setMaskChar(maskChar) {
            if (maskChar.length > 1) {
                throw new Error('maskChar must have only 1 char');
            }

            this._maskChar = maskChar;

            this.setValue(this._value);
        }
    }, {
        key: 'setMaskString',
        value: function setMaskString(maskString) {
            if (maskString && maskString.length !== this._mask.length) {
                throw new Error('maskString must have same length as mask');
            }

            this._maskString = maskString;

            this.setValue(this._value);
        }
    }, {
        key: 'removePreviosOrSelected',
        value: function removePreviosOrSelected() {
            if (this.selection.start === this.selection.end) {
                this.selection.start = this.selection.end - 1;
                if (this.selection.start < 0) {
                    this.selection.start = 0;
                }
            }

            this.input('');
        }
    }, {
        key: 'removeNextOrSelected',
        value: function removeNextOrSelected() {
            if (this.selection.start === this.selection.end) {
                this.selection.end++;
            }

            this.input('');
        }
    }, {
        key: 'setValue',
        value: function setValue(data) {
            var result = void 0;

            if (this._reformat) {
                result = this._reformat({
                    data: data,
                    selection: this.selection
                });
            } else {
                var dataList = data;
                if (!Array.isArray(dataList)) {
                    dataList = [];
                    for (var i = 0; i < data.length; i++) {
                        dataList.push({
                            char: data[i],
                            type: _charTypesEnum2.default.USER
                        });
                    }
                }
                result = (0, _inputValue2.default)({
                    data: dataList,
                    selection: this.selection,
                    mask: this._mask,
                    maskChar: this._maskChar,
                    maskString: this._maskString
                });
            }

            this._value = result.value;
            this._maskedValue = result.maskedValue;
            this._visibleValue = result.visibleValue;
            this.setSelection(result.selection);
        }
    }]);

    return InputCore;
}();

var defaults = exports.defaults = {
    maskFormat: [{
        str: '0',
        regexp: /[0-9]/
    }, {
        str: '*',
        regexp: /./
    }, {
        str: 'a',
        regexp: /[a-zA-Z]/
    }],
    maskChar: '',
    showMask: false,
    removeSelectedRange: _removeSelectedRange2.default
};

var createInput = exports.createInput = function createInput(_ref3) {
    var value = _ref3.value,
        maskString = _ref3.maskString,
        mask = _ref3.mask,
        reformat = _ref3.reformat,
        _ref3$maskFormat = _ref3.maskFormat,
        maskFormat = _ref3$maskFormat === undefined ? defaults.maskFormat : _ref3$maskFormat,
        _ref3$maskChar = _ref3.maskChar,
        maskChar = _ref3$maskChar === undefined ? defaults.maskChar : _ref3$maskChar;

    var _reformat = reformat;
    var _mask = mask;
    if (!_reformat && !_mask) {
        _reformat = function _reformat(value) {
            return value;
        };
    } else if (_reformat) {
        _mask = null;
    }

    return new InputCore({ value: value, mask: _mask, reformat: _reformat, maskFormat: maskFormat, maskChar: maskChar, maskString: maskString });
};