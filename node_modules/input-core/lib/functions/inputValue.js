'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = inputValue;

var _charTypesEnum = require('../constants/charTypesEnum.js');

var _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function inputValue(_ref) {
    var data = _ref.data,
        _ref$input = _ref.input,
        input = _ref$input === undefined ? '' : _ref$input,
        selection = _ref.selection,
        mask = _ref.mask,
        maskChar = _ref.maskChar,
        maskString = _ref.maskString;

    var value = [];
    var maskedValue = '';

    var maskIndex = 0;
    var valueIndex = 0;
    var pastedIndex = 0;

    var inputValuesApplied = 0;

    while (mask[maskIndex]) {
        var item = data.length > valueIndex ? data[valueIndex] : null;
        var maskPart = mask[maskIndex];

        var pastedValuesStack = null;
        if (selection.start <= maskIndex && pastedIndex < input.length) {
            pastedValuesStack = input.slice(pastedIndex);
        }

        // Обработка захардкоженных в маску символов. 
        if (maskPart.char) {
            // Если есть вводимые пользователем значение, в первую очередь проверяем его.
            // Но не проверяем по всему стеку.
            if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {
                pastedIndex++;
            } else {
                if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {
                    valueIndex++;
                }
            }

            value.push({
                char: maskPart.char,
                type: _charTypesEnum2.default.CHAR
            });

            if (pastedValuesStack) {
                inputValuesApplied++;
            }

            maskedValue += maskPart.char;
        }

        // Кастомный текст
        if (maskPart.regexp) {
            var part = null;

            // Если есть вводимое пользователем значение, то проверям его. 
            // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное
            if (pastedValuesStack) {
                var i = 0;
                while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {
                    i++;
                    pastedIndex++;
                }
                if (pastedValuesStack.length > i) {
                    pastedIndex++;
                    inputValuesApplied++;

                    // Игнорируем предыдущее значение в инпуте
                    valueIndex++;

                    part = pastedValuesStack[i];
                    value.push({
                        char: part,
                        type: _charTypesEnum2.default.USER
                    });
                    maskedValue += part;
                }
            }

            // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер
            if (!part) {
                // Если произошел сдвиг, пропускаем лишнее значение
                if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {
                    valueIndex++;
                    continue;
                }
                if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {
                    value.push({
                        char: item.char,
                        type: _charTypesEnum2.default.USER
                    });
                    maskedValue += item.char;
                    valueIndex++;
                } else {
                    part = maskString ? maskString[maskIndex] : maskChar;

                    value.push({
                        char: part,
                        type: _charTypesEnum2.default.MASK
                    });

                    if (data.length > maskIndex) {
                        valueIndex++;
                    }

                    maskedValue += part;
                }
            }
        }

        maskIndex++;
    }

    var selectionPosition = selection.start + inputValuesApplied;

    // Удаляем все ведующие maskChar
    var bound = value.length - 1;
    var charsCount = 0;
    while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {
        if (value[bound].type === _charTypesEnum2.default.MASK) {
            charsCount = 0;
        }
        if (value[bound].type === _charTypesEnum2.default.CHAR) {
            charsCount++;
        }
        bound--;
    }
    bound += charsCount;

    var visibleValue = '';
    for (var _i = 0; _i <= bound; _i++) {
        visibleValue += value[_i].char;
    }

    return {
        value: value,
        visibleValue: visibleValue,
        maskedValue: maskedValue,
        selection: {
            start: selectionPosition,
            end: selectionPosition
        }
    };
}