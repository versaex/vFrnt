{"ast":null,"code":"import { invariant } from '../utils';\nimport { Type, YearFromTime, WeekDay, MonthFromTime, DateFromTime, HourFromTime, MinFromTime, SecFromTime } from '../262';\nfunction getApplicableZoneData(t, timeZone, tzData) {\n  var _a;\n  var zoneData = tzData[timeZone];\n  // We don't have data for this so just say it's UTC\n  if (!zoneData) {\n    return [0, false];\n  }\n  var i = 0;\n  var offset = 0;\n  var dst = false;\n  for (; i <= zoneData.length; i++) {\n    if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n      _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n      break;\n    }\n  }\n  return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\nexport function ToLocalTime(t, calendar, timeZone, _a) {\n  var tzData = _a.tzData;\n  invariant(Type(t) === 'Number', 'invalid time');\n  invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n  var _b = getApplicableZoneData(t, timeZone, tzData),\n    timeZoneOffset = _b[0],\n    inDST = _b[1];\n  var tz = t + timeZoneOffset;\n  var year = YearFromTime(tz);\n  return {\n    weekday: WeekDay(tz),\n    era: year < 0 ? 'BC' : 'AD',\n    year: year,\n    relatedYear: undefined,\n    yearName: undefined,\n    month: MonthFromTime(tz),\n    day: DateFromTime(tz),\n    hour: HourFromTime(tz),\n    minute: MinFromTime(tz),\n    second: SecFromTime(tz),\n    inDST: inDST,\n    // IMPORTANT: Not in spec\n    timeZoneOffset: timeZoneOffset\n  };\n}","map":{"version":3,"names":["invariant","Type","YearFromTime","WeekDay","MonthFromTime","DateFromTime","HourFromTime","MinFromTime","SecFromTime","getApplicableZoneData","t","timeZone","tzData","_a","zoneData","i","offset","dst","length","ToLocalTime","calendar","_b","timeZoneOffset","inDST","tz","year","weekday","era","relatedYear","undefined","yearName","month","day","hour","minute","second"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/@formatjs/ecma402-abstract/lib/DateTimeFormat/ToLocalTime.js"],"sourcesContent":["import { invariant } from '../utils';\nimport { Type, YearFromTime, WeekDay, MonthFromTime, DateFromTime, HourFromTime, MinFromTime, SecFromTime, } from '../262';\nfunction getApplicableZoneData(t, timeZone, tzData) {\n    var _a;\n    var zoneData = tzData[timeZone];\n    // We don't have data for this so just say it's UTC\n    if (!zoneData) {\n        return [0, false];\n    }\n    var i = 0;\n    var offset = 0;\n    var dst = false;\n    for (; i <= zoneData.length; i++) {\n        if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n            _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n            break;\n        }\n    }\n    return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\nexport function ToLocalTime(t, calendar, timeZone, _a) {\n    var tzData = _a.tzData;\n    invariant(Type(t) === 'Number', 'invalid time');\n    invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n    var _b = getApplicableZoneData(t, timeZone, tzData), timeZoneOffset = _b[0], inDST = _b[1];\n    var tz = t + timeZoneOffset;\n    var year = YearFromTime(tz);\n    return {\n        weekday: WeekDay(tz),\n        era: year < 0 ? 'BC' : 'AD',\n        year: year,\n        relatedYear: undefined,\n        yearName: undefined,\n        month: MonthFromTime(tz),\n        day: DateFromTime(tz),\n        hour: HourFromTime(tz),\n        minute: MinFromTime(tz),\n        second: SecFromTime(tz),\n        inDST: inDST,\n        // IMPORTANT: Not in spec\n        timeZoneOffset: timeZoneOffset,\n    };\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,IAAI,EAAEC,YAAY,EAAEC,OAAO,EAAEC,aAAa,EAAEC,YAAY,EAAEC,YAAY,EAAEC,WAAW,EAAEC,WAAW,QAAS,QAAQ;AAC1H,SAASC,qBAAqB,CAACC,CAAC,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAChD,IAAIC,EAAE;EACN,IAAIC,QAAQ,GAAGF,MAAM,CAACD,QAAQ,CAAC;EAC/B;EACA,IAAI,CAACG,QAAQ,EAAE;IACX,OAAO,CAAC,CAAC,EAAE,KAAK,CAAC;EACrB;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,GAAG,GAAG,KAAK;EACf,OAAOF,CAAC,IAAID,QAAQ,CAACI,MAAM,EAAEH,CAAC,EAAE,EAAE;IAC9B,IAAIA,CAAC,KAAKD,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGL,CAAC,EAAE;MACnDG,EAAE,GAAGC,QAAQ,CAACC,CAAC,GAAG,CAAC,CAAC,EAAEC,MAAM,GAAGH,EAAE,CAAC,CAAC,CAAC,EAAEI,GAAG,GAAGJ,EAAE,CAAC,CAAC,CAAC;MACjD;IACJ;EACJ;EACA,OAAO,CAACG,MAAM,GAAG,GAAG,EAAEC,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,WAAW,CAACT,CAAC,EAAEU,QAAQ,EAAET,QAAQ,EAAEE,EAAE,EAAE;EACnD,IAAID,MAAM,GAAGC,EAAE,CAACD,MAAM;EACtBZ,SAAS,CAACC,IAAI,CAACS,CAAC,CAAC,KAAK,QAAQ,EAAE,cAAc,CAAC;EAC/CV,SAAS,CAACoB,QAAQ,KAAK,SAAS,EAAE,4CAA4C,CAAC;EAC/E,IAAIC,EAAE,GAAGZ,qBAAqB,CAACC,CAAC,EAAEC,QAAQ,EAAEC,MAAM,CAAC;IAAEU,cAAc,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,KAAK,GAAGF,EAAE,CAAC,CAAC,CAAC;EAC1F,IAAIG,EAAE,GAAGd,CAAC,GAAGY,cAAc;EAC3B,IAAIG,IAAI,GAAGvB,YAAY,CAACsB,EAAE,CAAC;EAC3B,OAAO;IACHE,OAAO,EAAEvB,OAAO,CAACqB,EAAE,CAAC;IACpBG,GAAG,EAAEF,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;IAC3BA,IAAI,EAAEA,IAAI;IACVG,WAAW,EAAEC,SAAS;IACtBC,QAAQ,EAAED,SAAS;IACnBE,KAAK,EAAE3B,aAAa,CAACoB,EAAE,CAAC;IACxBQ,GAAG,EAAE3B,YAAY,CAACmB,EAAE,CAAC;IACrBS,IAAI,EAAE3B,YAAY,CAACkB,EAAE,CAAC;IACtBU,MAAM,EAAE3B,WAAW,CAACiB,EAAE,CAAC;IACvBW,MAAM,EAAE3B,WAAW,CAACgB,EAAE,CAAC;IACvBD,KAAK,EAAEA,KAAK;IACZ;IACAD,cAAc,EAAEA;EACpB,CAAC;AACL"},"metadata":{},"sourceType":"module"}