{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\nvar global = getGlobalObject();\n/** `fetch` based transport */\nvar FetchTransport = /** @class */function (_super) {\n  __extends(FetchTransport, _super);\n  function FetchTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  FetchTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n  FetchTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n    var options = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      global.fetch(sentryRequest.url, options).then(function (response) {\n        var headers = {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After')\n        };\n        _this._handleResponse({\n          requestType: sentryRequest.type,\n          response: response,\n          headers: headers,\n          resolve: resolve,\n          reject: reject\n        });\n      }).catch(reject);\n    }));\n  };\n  return FetchTransport;\n}(BaseTransport);\nexport { FetchTransport };","map":{"version":3,"sources":["../../src/transports/fetch.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAoB,EAAE,sBAAsB,QAAQ,cAAc;AAE3E,SAAS,eAAe,EAAE,sBAAsB,EAAE,WAAW,QAAQ,eAAe;AAEpF,SAAS,aAAa,QAAQ,QAAQ;AAEtC,IAAM,MAAM,GAAG,eAAe,EAAU;AAExC;AACA,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAApC,SAAA,cAAA,GAAA;;EAkEA;EAjEE;;AAEG;EACI,cAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,KAAY,EAAA;IAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;EACzE,CAAC;EAED;;AAEG;EACI,cAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,OAAgB,EAAA;IACjC,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC;EAC/E,CAAC;EAED;;;AAGG;EACK,cAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,aAA4B,EAAE,eAAgC,EAAA;IAAnF,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;MAC3C,OAAO,OAAO,CAAC,MAAM,CAAC;QACpB,KAAK,EAAE,eAAe;QACtB,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,MAAM,EAAE,wBAAA,GAAyB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,GAAA,4BAA4B;QACpG,MAAM,EAAE;OACT,CAAC;IACH;IAED,IAAM,OAAO,GAAgB;MAC3B,IAAI,EAAE,aAAa,CAAC,IAAI;MACxB,MAAM,EAAE,MAAM;MACd;MACA;MACA;MACA;MACA,cAAc,EAAG,sBAAsB,EAAE,GAAG,QAAQ,GAAG;KACxD;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,KAAK,SAAS,EAAE;MAC9C,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC;IACrD;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;MACtC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO;IACvC;IAED,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CACrB,IAAI,WAAW,CAAW,UAAC,OAAO,EAAE,MAAM,EAAA;MACxC,MAAM,CACH,KAAK,CAAC,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CACjC,IAAI,CAAC,UAAA,QAAQ,EAAA;QACZ,IAAM,OAAO,GAAG;UACd,sBAAsB,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC;UACpE,aAAa,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa;SAClD;QACD,KAAI,CAAC,eAAe,CAAC;UACnB,WAAW,EAAE,aAAa,CAAC,IAAI;UAC/B,QAAQ,EAAA,QAAA;UACR,OAAO,EAAA,OAAA;UACP,OAAO,EAAA,OAAA;UACP,MAAM,EAAA;SACP,CAAC;MACJ,CAAC,CAAC,CACD,KAAK,CAAC,MAAM,CAAC;IAClB,CAAC,CAAC,CACH;EACH,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CAlEmC,aAAa,CAAA","sourcesContent":["import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { getGlobalObject, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        global\n          .fetch(sentryRequest.url, options)\n          .then(response => {\n            const headers = {\n              'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n              'retry-after': response.headers.get('Retry-After'),\n            };\n            this._handleResponse({\n              requestType: sentryRequest.type,\n              response,\n              headers,\n              resolve,\n              reject,\n            });\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}