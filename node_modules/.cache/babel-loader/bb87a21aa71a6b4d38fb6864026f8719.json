{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport axios from 'axios';\nimport { applogicUrl, authUrl, finexUrl, tradeUrl, withCredentials } from './config';\nvar getAPI = function getAPI() {\n  return {\n    barong: authUrl(),\n    applogic: applogicUrl(),\n    peatio: tradeUrl(),\n    finex: finexUrl()\n  };\n};\nvar buildRequest = function buildRequest(request, configData) {\n  var body = request.body,\n    method = request.method,\n    url = request.url;\n  var apiVersion = configData.apiVersion,\n    headers = configData.headers;\n  var api = getAPI();\n  var contentType = body instanceof FormData ? 'multipart/form-data' : 'application/json';\n  var defaultHeaders = {\n    'content-type': contentType\n  };\n  var apiUrl = api[apiVersion];\n  var requestConfig = {\n    baseURL: apiUrl,\n    data: body,\n    headers: _objectSpread(_objectSpread({}, headers), defaultHeaders),\n    method: method,\n    url: url,\n    withCredentials: withCredentials()\n  };\n  return requestConfig;\n};\nexport var defaultResponse = {\n  status: 500,\n  data: {\n    error: 'Server error'\n  }\n};\nexport var formatError = function formatError(responseError) {\n  var response = responseError.response || defaultResponse;\n  var errors = response.data && (response.data.errors || [response.data.error]) || [];\n  return {\n    code: response.status,\n    message: errors\n  };\n};\nexport var makeRequest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, configData) {\n    var requestConfig;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestConfig = buildRequest(request, configData);\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var axiosRequest = axios(requestConfig);\n              axiosRequest.then(function (response) {\n                if (configData.withHeaders) {\n                  resolve(response);\n                } else {\n                  resolve(response.data);\n                }\n              }).catch(function (error) {\n                reject(formatError(error));\n              });\n            }));\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function makeRequest(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["axios","applogicUrl","authUrl","finexUrl","tradeUrl","withCredentials","getAPI","barong","applogic","peatio","finex","buildRequest","request","configData","body","method","url","apiVersion","headers","api","contentType","FormData","defaultHeaders","apiUrl","requestConfig","baseURL","data","defaultResponse","status","error","formatError","responseError","response","errors","code","message","makeRequest","Promise","resolve","reject","axiosRequest","then","withHeaders","catch"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/api/requestBuilder.ts"],"sourcesContent":["import axios, {\n    AxiosError,\n    AxiosPromise,\n    AxiosRequestConfig,\n    AxiosResponse,\n} from 'axios';\nimport {\n    applogicUrl,\n    authUrl,\n    finexUrl,\n    tradeUrl,\n    withCredentials,\n} from './config';\n\nexport type HTTPMethod =\n    'get'\n    | 'post'\n    | 'delete'\n    | 'put'\n    | 'patch';\n\nexport interface JsonBody {\n    // tslint:disable-next-line no-any\n    [key: string]: any;\n}\n\nexport interface RequestOptions {\n    apiVersion: 'applogic' | 'peatio' | 'barong' | 'finex';\n    withHeaders?: boolean;\n    headers?: Object;\n}\n\nexport interface Request {\n    method: HTTPMethod;\n    url: string;\n    body?: JsonBody;\n}\n\nexport interface ApiVariety {\n    barong: string;\n    applogic: string;\n    peatio: string;\n}\n\nconst getAPI = () => ({\n    barong: authUrl(),\n    applogic: applogicUrl(),\n    peatio: tradeUrl(),\n    finex: finexUrl(),\n});\n\nconst buildRequest = (request: Request, configData: RequestOptions) => {\n    const { body, method, url } = request;\n    const { apiVersion, headers } = configData;\n    const api = getAPI();\n\n    const contentType = body instanceof FormData\n        ? 'multipart/form-data'\n        : 'application/json';\n\n    const defaultHeaders = {\n        'content-type': contentType,\n    };\n\n    const apiUrl = api[apiVersion];\n\n    const requestConfig: AxiosRequestConfig = {\n        baseURL: apiUrl,\n        data: body,\n        headers: { ...headers, ...defaultHeaders },\n        method,\n        url,\n        withCredentials: withCredentials(),\n    };\n\n    return requestConfig;\n};\n\nexport const defaultResponse: Partial<AxiosError['response']> = {\n    status: 500,\n    data: {\n        error: 'Server error',\n    },\n};\n\nexport const formatError = (responseError: AxiosError) => {\n    const response = responseError.response || defaultResponse;\n    const errors = (response.data && (response.data.errors || [response.data.error])) || [];\n\n    return {\n        code: response.status,\n        message: errors,\n    };\n};\n\nexport const makeRequest = async (request: Request, configData: RequestOptions) => {\n    const requestConfig = buildRequest(request, configData);\n\n    return new Promise((resolve, reject) => {\n        const axiosRequest: AxiosPromise = axios(requestConfig);\n        axiosRequest\n            .then((response: AxiosResponse) => {\n                if (configData.withHeaders) {\n                    resolve(response);\n                } else {\n                    resolve(response.data);\n                }\n            })\n            .catch((error: AxiosError) => {\n                reject(formatError(error));\n            });\n    });\n};\n"],"mappings":";;+CACA;AADA,OAAOA,KAAK,MAKL,OAAO;AACd,SACIC,WAAW,EACXC,OAAO,EACPC,QAAQ,EACRC,QAAQ,EACRC,eAAe,QACZ,UAAU;AAgCjB,IAAMC,MAAM,GAAG,SAATA,MAAM;EAAA,OAAU;IAClBC,MAAM,EAAEL,OAAO,EAAE;IACjBM,QAAQ,EAAEP,WAAW,EAAE;IACvBQ,MAAM,EAAEL,QAAQ,EAAE;IAClBM,KAAK,EAAEP,QAAQ;EACnB,CAAC;AAAA,CAAC;AAEF,IAAMQ,YAAY,GAAG,SAAfA,YAAY,CAAIC,OAAgB,EAAEC,UAA0B,EAAK;EACnE,IAAQC,IAAI,GAAkBF,OAAO,CAA7BE,IAAI;IAAEC,MAAM,GAAUH,OAAO,CAAvBG,MAAM;IAAEC,GAAG,GAAKJ,OAAO,CAAfI,GAAG;EACzB,IAAQC,UAAU,GAAcJ,UAAU,CAAlCI,UAAU;IAAEC,OAAO,GAAKL,UAAU,CAAtBK,OAAO;EAC3B,IAAMC,GAAG,GAAGb,MAAM,EAAE;EAEpB,IAAMc,WAAW,GAAGN,IAAI,YAAYO,QAAQ,GACtC,qBAAqB,GACrB,kBAAkB;EAExB,IAAMC,cAAc,GAAG;IACnB,cAAc,EAAEF;EACpB,CAAC;EAED,IAAMG,MAAM,GAAGJ,GAAG,CAACF,UAAU,CAAC;EAE9B,IAAMO,aAAiC,GAAG;IACtCC,OAAO,EAAEF,MAAM;IACfG,IAAI,EAAEZ,IAAI;IACVI,OAAO,kCAAOA,OAAO,GAAKI,cAAc,CAAE;IAC1CP,MAAM,EAANA,MAAM;IACNC,GAAG,EAAHA,GAAG;IACHX,eAAe,EAAEA,eAAe;EACpC,CAAC;EAED,OAAOmB,aAAa;AACxB,CAAC;AAED,OAAO,IAAMG,eAAgD,GAAG;EAC5DC,MAAM,EAAE,GAAG;EACXF,IAAI,EAAE;IACFG,KAAK,EAAE;EACX;AACJ,CAAC;AAED,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,aAAyB,EAAK;EACtD,IAAMC,QAAQ,GAAGD,aAAa,CAACC,QAAQ,IAAIL,eAAe;EAC1D,IAAMM,MAAM,GAAID,QAAQ,CAACN,IAAI,KAAKM,QAAQ,CAACN,IAAI,CAACO,MAAM,IAAI,CAACD,QAAQ,CAACN,IAAI,CAACG,KAAK,CAAC,CAAC,IAAK,EAAE;EAEvF,OAAO;IACHK,IAAI,EAAEF,QAAQ,CAACJ,MAAM;IACrBO,OAAO,EAAEF;EACb,CAAC;AACL,CAAC;AAED,OAAO,IAAMG,WAAW;EAAA,sEAAG,iBAAOxB,OAAgB,EAAEC,UAA0B;IAAA;IAAA;MAAA;QAAA;UAAA;YACpEW,aAAa,GAAGb,YAAY,CAACC,OAAO,EAAEC,UAAU,CAAC;YAAA,iCAEhD,IAAIwB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;cACpC,IAAMC,YAA0B,GAAGxC,KAAK,CAACwB,aAAa,CAAC;cACvDgB,YAAY,CACPC,IAAI,CAAC,UAACT,QAAuB,EAAK;gBAC/B,IAAInB,UAAU,CAAC6B,WAAW,EAAE;kBACxBJ,OAAO,CAACN,QAAQ,CAAC;gBACrB,CAAC,MAAM;kBACHM,OAAO,CAACN,QAAQ,CAACN,IAAI,CAAC;gBAC1B;cACJ,CAAC,CAAC,CACDiB,KAAK,CAAC,UAACd,KAAiB,EAAK;gBAC1BU,MAAM,CAACT,WAAW,CAACD,KAAK,CAAC,CAAC;cAC9B,CAAC,CAAC;YACV,CAAC,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACL;EAAA,gBAjBYO,WAAW;IAAA;EAAA;AAAA,GAiBvB"},"metadata":{},"sourceType":"module"}