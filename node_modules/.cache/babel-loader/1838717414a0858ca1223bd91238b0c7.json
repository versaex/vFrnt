{"ast":null,"code":"// Copyright (c) 2017-2018 Emilio Almansi\n// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar validate = require('./validation').validate;\n\n/**\n * Converts an array of integers made up of 'from' bits into an\n * array of integers made up of 'to' bits. The output array is\n * zero-padded if necessary, unless strict mode is true.\n * Throws a {@link ValidationError} if input is invalid.\n * Original by Pieter Wuille: https://github.com/sipa/bech32.\n *\n * @param {Uint8Array} data Array of integers made up of 'from' bits.\n * @param {number} from Length in bits of elements in the input array.\n * @param {number} to Length in bits of elements in the output array.\n * @param {bool} strictMode Require the conversion to be completed without padding.\n * @returns {Uint8Array}\n */\nmodule.exports = function (data, from, to, strictMode) {\n  var length = strictMode ? Math.floor(data.length * from / to) : Math.ceil(data.length * from / to);\n  var mask = (1 << to) - 1;\n  var result = new Uint8Array(length);\n  var index = 0;\n  var accumulator = 0;\n  var bits = 0;\n  for (var i = 0; i < data.length; ++i) {\n    var value = data[i];\n    validate(0 <= value && value >> from === 0, 'Invalid value: ' + value + '.');\n    accumulator = accumulator << from | value;\n    bits += from;\n    while (bits >= to) {\n      bits -= to;\n      result[index] = accumulator >> bits & mask;\n      ++index;\n    }\n  }\n  if (!strictMode) {\n    if (bits > 0) {\n      result[index] = accumulator << to - bits & mask;\n      ++index;\n    }\n  } else {\n    validate(bits < from && (accumulator << to - bits & mask) === 0, 'Input cannot be converted to ' + to + ' bits without padding, but strict mode was used.');\n  }\n  return result;\n};","map":{"version":3,"names":["validate","require","module","exports","data","from","to","strictMode","length","Math","floor","ceil","mask","result","Uint8Array","index","accumulator","bits","i","value"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/cashaddrjs/src/convertBits.js"],"sourcesContent":["// Copyright (c) 2017-2018 Emilio Almansi\n// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n'use strict';\n\nvar validate = require('./validation').validate;\n\n/**\n * Converts an array of integers made up of 'from' bits into an\n * array of integers made up of 'to' bits. The output array is\n * zero-padded if necessary, unless strict mode is true.\n * Throws a {@link ValidationError} if input is invalid.\n * Original by Pieter Wuille: https://github.com/sipa/bech32.\n *\n * @param {Uint8Array} data Array of integers made up of 'from' bits.\n * @param {number} from Length in bits of elements in the input array.\n * @param {number} to Length in bits of elements in the output array.\n * @param {bool} strictMode Require the conversion to be completed without padding.\n * @returns {Uint8Array}\n */\nmodule.exports = function(data, from, to, strictMode) {\n  var length = strictMode\n    ? Math.floor(data.length * from / to)\n    : Math.ceil(data.length * from / to);\n  var mask = (1 << to) - 1;\n  var result = new Uint8Array(length);\n  var index = 0;\n  var accumulator = 0;\n  var bits = 0;\n  for (var i = 0; i < data.length; ++i) {\n    var value = data[i];\n    validate(0 <= value && (value >> from) === 0, 'Invalid value: ' + value + '.');\n    accumulator = (accumulator << from) | value;\n    bits += from;\n    while (bits >= to) {\n      bits -= to;\n      result[index] = (accumulator >> bits) & mask;\n      ++index;\n    }\n  }\n  if (!strictMode) {\n    if (bits > 0) {\n      result[index] = (accumulator << (to - bits)) & mask;\n      ++index;\n    }\n  } else {\n    validate(\n      bits < from && ((accumulator << (to - bits)) & mask) === 0,\n      'Input cannot be converted to ' + to + ' bits without padding, but strict mode was used.'\n    );\n  }\n  return result;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC,CAACD,QAAQ;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI,EAAEC,IAAI,EAAEC,EAAE,EAAEC,UAAU,EAAE;EACpD,IAAIC,MAAM,GAAGD,UAAU,GACnBE,IAAI,CAACC,KAAK,CAACN,IAAI,CAACI,MAAM,GAAGH,IAAI,GAAGC,EAAE,CAAC,GACnCG,IAAI,CAACE,IAAI,CAACP,IAAI,CAACI,MAAM,GAAGH,IAAI,GAAGC,EAAE,CAAC;EACtC,IAAIM,IAAI,GAAG,CAAC,CAAC,IAAIN,EAAE,IAAI,CAAC;EACxB,IAAIO,MAAM,GAAG,IAAIC,UAAU,CAACN,MAAM,CAAC;EACnC,IAAIO,KAAK,GAAG,CAAC;EACb,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,IAAI,CAACI,MAAM,EAAE,EAAEU,CAAC,EAAE;IACpC,IAAIC,KAAK,GAAGf,IAAI,CAACc,CAAC,CAAC;IACnBlB,QAAQ,CAAC,CAAC,IAAImB,KAAK,IAAKA,KAAK,IAAId,IAAI,KAAM,CAAC,EAAE,iBAAiB,GAAGc,KAAK,GAAG,GAAG,CAAC;IAC9EH,WAAW,GAAIA,WAAW,IAAIX,IAAI,GAAIc,KAAK;IAC3CF,IAAI,IAAIZ,IAAI;IACZ,OAAOY,IAAI,IAAIX,EAAE,EAAE;MACjBW,IAAI,IAAIX,EAAE;MACVO,MAAM,CAACE,KAAK,CAAC,GAAIC,WAAW,IAAIC,IAAI,GAAIL,IAAI;MAC5C,EAAEG,KAAK;IACT;EACF;EACA,IAAI,CAACR,UAAU,EAAE;IACf,IAAIU,IAAI,GAAG,CAAC,EAAE;MACZJ,MAAM,CAACE,KAAK,CAAC,GAAIC,WAAW,IAAKV,EAAE,GAAGW,IAAK,GAAIL,IAAI;MACnD,EAAEG,KAAK;IACT;EACF,CAAC,MAAM;IACLf,QAAQ,CACNiB,IAAI,GAAGZ,IAAI,IAAI,CAAEW,WAAW,IAAKV,EAAE,GAAGW,IAAK,GAAIL,IAAI,MAAM,CAAC,EAC1D,+BAA+B,GAAGN,EAAE,GAAG,kDAAkD,CAC1F;EACH;EACA,OAAOO,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script"}