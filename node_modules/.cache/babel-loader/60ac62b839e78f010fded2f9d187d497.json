{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar $ = require('./util/preconditions');\nvar BN = require('./crypto/bn');\nvar Base58 = require('./encoding/base58');\nvar Base58Check = require('./encoding/base58check');\nvar Hash = require('./crypto/hash');\nvar HDPrivateKey = require('./hdprivatekey');\nvar Network = require('./networks');\nvar Point = require('./crypto/point');\nvar PublicKey = require('./publickey');\nvar bitcoreErrors = require('./errors');\nvar errors = bitcoreErrors;\nvar hdErrors = bitcoreErrors.HDPublicKey;\nvar assert = require('assert');\nvar JSUtil = require('./util/js');\nvar BufferUtil = require('./util/buffer');\n\n/**\n * The representation of an hierarchically derived public key.\n *\n * See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n *\n * @constructor\n * @param {Object|string|Buffer} arg\n */\nfunction HDPublicKey(arg) {\n  /* jshint maxcomplexity: 12 */\n  /* jshint maxstatements: 20 */\n  if (arg instanceof HDPublicKey) {\n    return arg;\n  }\n  if (!(this instanceof HDPublicKey)) {\n    return new HDPublicKey(arg);\n  }\n  if (arg) {\n    if (_.isString(arg) || BufferUtil.isBuffer(arg)) {\n      var error = HDPublicKey.getSerializedError(arg);\n      if (!error) {\n        return this._buildFromSerialized(arg);\n      } else if (BufferUtil.isBuffer(arg) && !HDPublicKey.getSerializedError(arg.toString())) {\n        return this._buildFromSerialized(arg.toString());\n      } else {\n        if (error instanceof hdErrors.ArgumentIsPrivateExtended) {\n          return new HDPrivateKey(arg).hdPublicKey;\n        }\n        throw error;\n      }\n    } else {\n      if (_.isObject(arg)) {\n        if (arg instanceof HDPrivateKey) {\n          return this._buildFromPrivate(arg);\n        } else {\n          return this._buildFromObject(arg);\n        }\n      } else {\n        throw new hdErrors.UnrecognizedArgument(arg);\n      }\n    }\n  } else {\n    throw new hdErrors.MustSupplyArgument();\n  }\n}\n\n/**\n * Verifies that a given path is valid.\n *\n * @param {string|number} arg\n * @return {boolean}\n */\nHDPublicKey.isValidPath = function (arg) {\n  if (_.isString(arg)) {\n    var indexes = HDPrivateKey._getDerivationIndexes(arg);\n    return indexes !== null && _.every(indexes, HDPublicKey.isValidPath);\n  }\n  if (_.isNumber(arg)) {\n    return arg >= 0 && arg < HDPublicKey.Hardened;\n  }\n  return false;\n};\n\n/**\n * WARNING: This method is deprecated. Use deriveChild instead.\n *\n *\n * Get a derivated child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same public key), \"m/0/1/40/2/1000\".\n *\n * Note that hardened keys can't be derived from a public extended key.\n *\n * If the first argument is a number, the child with that index will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPublicKey('xpub...');\n * var child_0_1_2 = parent.derive(0).derive(1).derive(2);\n * var copy_of_child_0_1_2 = parent.derive(\"m/0/1/2\");\n * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);\n * ```\n *\n * @param {string|number} arg\n */\nHDPublicKey.prototype.derive = function (arg, hardened) {\n  return this.deriveChild(arg, hardened);\n};\n\n/**\n * WARNING: This method will not be officially supported until v1.0.0.\n *\n *\n * Get a derivated child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same public key), \"m/0/1/40/2/1000\".\n *\n * Note that hardened keys can't be derived from a public extended key.\n *\n * If the first argument is a number, the child with that index will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPublicKey('xpub...');\n * var child_0_1_2 = parent.deriveChild(0).deriveChild(1).deriveChild(2);\n * var copy_of_child_0_1_2 = parent.deriveChild(\"m/0/1/2\");\n * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);\n * ```\n *\n * @param {string|number} arg\n */\nHDPublicKey.prototype.deriveChild = function (arg, hardened) {\n  if (_.isNumber(arg)) {\n    return this._deriveWithNumber(arg, hardened);\n  } else if (_.isString(arg)) {\n    return this._deriveFromString(arg);\n  } else {\n    throw new hdErrors.InvalidDerivationArgument(arg);\n  }\n};\nHDPublicKey.prototype._deriveWithNumber = function (index, hardened) {\n  if (index >= HDPublicKey.Hardened || hardened) {\n    throw new hdErrors.InvalidIndexCantDeriveHardened();\n  }\n  if (index < 0) {\n    throw new hdErrors.InvalidPath(index);\n  }\n  var indexBuffer = BufferUtil.integerAsBuffer(index);\n  var data = BufferUtil.concat([this.publicKey.toBuffer(), indexBuffer]);\n  var hash = Hash.sha512hmac(data, this._buffers.chainCode);\n  var leftPart = BN.fromBuffer(hash.slice(0, 32), {\n    size: 32\n  });\n  var chainCode = hash.slice(32, 64);\n  var publicKey;\n  try {\n    publicKey = PublicKey.fromPoint(Point.getG().mul(leftPart).add(this.publicKey.point));\n  } catch (e) {\n    return this._deriveWithNumber(index + 1);\n  }\n  var derived = new HDPublicKey({\n    network: this.network,\n    depth: this.depth + 1,\n    parentFingerPrint: this.fingerPrint,\n    childIndex: index,\n    chainCode: chainCode,\n    publicKey: publicKey\n  });\n  return derived;\n};\nHDPublicKey.prototype._deriveFromString = function (path) {\n  /* jshint maxcomplexity: 8 */\n  if (_.includes(path, \"'\")) {\n    throw new hdErrors.InvalidIndexCantDeriveHardened();\n  } else if (!HDPublicKey.isValidPath(path)) {\n    throw new hdErrors.InvalidPath(path);\n  }\n  var indexes = HDPrivateKey._getDerivationIndexes(path);\n  var derived = indexes.reduce(function (prev, index) {\n    return prev._deriveWithNumber(index);\n  }, this);\n  return derived;\n};\n\n/**\n * Verifies that a given serialized public key in base58 with checksum format\n * is valid.\n *\n * @param {string|Buffer} data - the serialized public key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {boolean}\n */\nHDPublicKey.isValidSerialized = function (data, network) {\n  return _.isNull(HDPublicKey.getSerializedError(data, network));\n};\n\n/**\n * Checks what's the error that causes the validation of a serialized public key\n * in base58 with checksum to fail.\n *\n * @param {string|Buffer} data - the serialized public key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {errors|null}\n */\nHDPublicKey.getSerializedError = function (data, network) {\n  /* jshint maxcomplexity: 10 */\n  /* jshint maxstatements: 20 */\n  if (!(_.isString(data) || BufferUtil.isBuffer(data))) {\n    return new hdErrors.UnrecognizedArgument('expected buffer or string');\n  }\n  if (!Base58.validCharacters(data)) {\n    return new errors.InvalidB58Char('(unknown)', data);\n  }\n  try {\n    data = Base58Check.decode(data);\n  } catch (e) {\n    return new errors.InvalidB58Checksum(data);\n  }\n  if (data.length !== HDPublicKey.DataSize) {\n    return new hdErrors.InvalidLength(data);\n  }\n  if (!_.isUndefined(network)) {\n    var error = HDPublicKey._validateNetwork(data, network);\n    if (error) {\n      return error;\n    }\n  }\n  var version = BufferUtil.integerFromBuffer(data.slice(0, 4));\n  if (version === Network.livenet.xprivkey || version === Network.testnet.xprivkey) {\n    return new hdErrors.ArgumentIsPrivateExtended();\n  }\n  return null;\n};\nHDPublicKey._validateNetwork = function (data, networkArg) {\n  var network = Network.get(networkArg);\n  if (!network) {\n    return new errors.InvalidNetworkArgument(networkArg);\n  }\n  var version = data.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd);\n  if (BufferUtil.integerFromBuffer(version) !== network.xpubkey) {\n    return new errors.InvalidNetwork(version);\n  }\n  return null;\n};\nHDPublicKey.prototype._buildFromPrivate = function (arg) {\n  var args = _.clone(arg._buffers);\n  var point = Point.getG().mul(BN.fromBuffer(args.privateKey));\n  args.publicKey = Point.pointToCompressed(point);\n  args.version = BufferUtil.integerAsBuffer(Network.get(BufferUtil.integerFromBuffer(args.version)).xpubkey);\n  args.privateKey = undefined;\n  args.checksum = undefined;\n  args.xprivkey = undefined;\n  return this._buildFromBuffers(args);\n};\nHDPublicKey.prototype._buildFromObject = function (arg) {\n  /* jshint maxcomplexity: 10 */\n  // TODO: Type validation\n  var buffers = {\n    version: arg.network ? BufferUtil.integerAsBuffer(Network.get(arg.network).xpubkey) : arg.version,\n    depth: _.isNumber(arg.depth) ? BufferUtil.integerAsSingleByteBuffer(arg.depth) : arg.depth,\n    parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? BufferUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,\n    childIndex: _.isNumber(arg.childIndex) ? BufferUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,\n    chainCode: _.isString(arg.chainCode) ? BufferUtil.hexToBuffer(arg.chainCode) : arg.chainCode,\n    publicKey: _.isString(arg.publicKey) ? BufferUtil.hexToBuffer(arg.publicKey) : BufferUtil.isBuffer(arg.publicKey) ? arg.publicKey : arg.publicKey.toBuffer(),\n    checksum: _.isNumber(arg.checksum) ? BufferUtil.integerAsBuffer(arg.checksum) : arg.checksum\n  };\n  return this._buildFromBuffers(buffers);\n};\nHDPublicKey.prototype._buildFromSerialized = function (arg) {\n  var decoded = Base58Check.decode(arg);\n  var buffers = {\n    version: decoded.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd),\n    depth: decoded.slice(HDPublicKey.DepthStart, HDPublicKey.DepthEnd),\n    parentFingerPrint: decoded.slice(HDPublicKey.ParentFingerPrintStart, HDPublicKey.ParentFingerPrintEnd),\n    childIndex: decoded.slice(HDPublicKey.ChildIndexStart, HDPublicKey.ChildIndexEnd),\n    chainCode: decoded.slice(HDPublicKey.ChainCodeStart, HDPublicKey.ChainCodeEnd),\n    publicKey: decoded.slice(HDPublicKey.PublicKeyStart, HDPublicKey.PublicKeyEnd),\n    checksum: decoded.slice(HDPublicKey.ChecksumStart, HDPublicKey.ChecksumEnd),\n    xpubkey: arg\n  };\n  return this._buildFromBuffers(buffers);\n};\n\n/**\n * Receives a object with buffers in all the properties and populates the\n * internal structure\n *\n * @param {Object} arg\n * @param {buffer.Buffer} arg.version\n * @param {buffer.Buffer} arg.depth\n * @param {buffer.Buffer} arg.parentFingerPrint\n * @param {buffer.Buffer} arg.childIndex\n * @param {buffer.Buffer} arg.chainCode\n * @param {buffer.Buffer} arg.publicKey\n * @param {buffer.Buffer} arg.checksum\n * @param {string=} arg.xpubkey - if set, don't recalculate the base58\n *      representation\n * @return {HDPublicKey} this\n */\nHDPublicKey.prototype._buildFromBuffers = function (arg) {\n  /* jshint maxcomplexity: 8 */\n  /* jshint maxstatements: 20 */\n\n  HDPublicKey._validateBufferArguments(arg);\n  JSUtil.defineImmutable(this, {\n    _buffers: arg\n  });\n  var sequence = [arg.version, arg.depth, arg.parentFingerPrint, arg.childIndex, arg.chainCode, arg.publicKey];\n  var concat = BufferUtil.concat(sequence);\n  var checksum = Base58Check.checksum(concat);\n  if (!arg.checksum || !arg.checksum.length) {\n    arg.checksum = checksum;\n  } else {\n    if (arg.checksum.toString('hex') !== checksum.toString('hex')) {\n      throw new errors.InvalidB58Checksum(concat, checksum);\n    }\n  }\n  var network = Network.get(BufferUtil.integerFromBuffer(arg.version));\n  var xpubkey;\n  xpubkey = Base58Check.encode(BufferUtil.concat(sequence));\n  arg.xpubkey = new Buffer(xpubkey);\n  var publicKey = new PublicKey(arg.publicKey, {\n    network: network\n  });\n  var size = HDPublicKey.ParentFingerPrintSize;\n  var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);\n  JSUtil.defineImmutable(this, {\n    xpubkey: xpubkey,\n    network: network,\n    depth: BufferUtil.integerFromSingleByteBuffer(arg.depth),\n    publicKey: publicKey,\n    fingerPrint: fingerPrint\n  });\n  return this;\n};\nHDPublicKey._validateBufferArguments = function (arg) {\n  var checkBuffer = function checkBuffer(name, size) {\n    var buff = arg[name];\n    assert(BufferUtil.isBuffer(buff), name + ' argument is not a buffer, it\\'s ' + typeof buff);\n    assert(buff.length === size, name + ' has not the expected size: found ' + buff.length + ', expected ' + size);\n  };\n  checkBuffer('version', HDPublicKey.VersionSize);\n  checkBuffer('depth', HDPublicKey.DepthSize);\n  checkBuffer('parentFingerPrint', HDPublicKey.ParentFingerPrintSize);\n  checkBuffer('childIndex', HDPublicKey.ChildIndexSize);\n  checkBuffer('chainCode', HDPublicKey.ChainCodeSize);\n  checkBuffer('publicKey', HDPublicKey.PublicKeySize);\n  if (arg.checksum && arg.checksum.length) {\n    checkBuffer('checksum', HDPublicKey.CheckSumSize);\n  }\n};\nHDPublicKey.fromString = function (arg) {\n  $.checkArgument(_.isString(arg), 'No valid string was provided');\n  return new HDPublicKey(arg);\n};\nHDPublicKey.fromObject = function (arg) {\n  $.checkArgument(_.isObject(arg), 'No valid argument was provided');\n  return new HDPublicKey(arg);\n};\n\n/**\n * Returns the base58 checked representation of the public key\n * @return {string} a string starting with \"xpub...\" in livenet\n */\nHDPublicKey.prototype.toString = function () {\n  return this.xpubkey;\n};\n\n/**\n * Returns the console representation of this extended public key.\n * @return string\n */\nHDPublicKey.prototype.inspect = function () {\n  return '<HDPublicKey: ' + this.xpubkey + '>';\n};\n\n/**\n * Returns a plain JavaScript object with information to reconstruct a key.\n *\n * Fields are: <ul>\n *  <li> network: 'livenet' or 'testnet'\n *  <li> depth: a number from 0 to 255, the depth to the master extended key\n *  <li> fingerPrint: a number of 32 bits taken from the hash of the public key\n *  <li> fingerPrint: a number of 32 bits taken from the hash of this key's\n *  <li>     parent's public key\n *  <li> childIndex: index with which this key was derived\n *  <li> chainCode: string in hexa encoding used for derivation\n *  <li> publicKey: string, hexa encoded, in compressed key format\n *  <li> checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n *  <li> xpubkey: the string with the base58 representation of this extended key\n *  <li> checksum: the base58 checksum of xpubkey\n * </ul>\n */\nHDPublicKey.prototype.toObject = HDPublicKey.prototype.toJSON = function toObject() {\n  return {\n    network: Network.get(BufferUtil.integerFromBuffer(this._buffers.version)).name,\n    depth: BufferUtil.integerFromSingleByteBuffer(this._buffers.depth),\n    fingerPrint: BufferUtil.integerFromBuffer(this.fingerPrint),\n    parentFingerPrint: BufferUtil.integerFromBuffer(this._buffers.parentFingerPrint),\n    childIndex: BufferUtil.integerFromBuffer(this._buffers.childIndex),\n    chainCode: BufferUtil.bufferToHex(this._buffers.chainCode),\n    publicKey: this.publicKey.toString(),\n    checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n    xpubkey: this.xpubkey\n  };\n};\n\n/**\n * Create a HDPublicKey from a buffer argument\n *\n * @param {Buffer} arg\n * @return {HDPublicKey}\n */\nHDPublicKey.fromBuffer = function (arg) {\n  return new HDPublicKey(arg);\n};\n\n/**\n * Return a buffer representation of the xpubkey\n *\n * @return {Buffer}\n */\nHDPublicKey.prototype.toBuffer = function () {\n  return BufferUtil.copy(this._buffers.xpubkey);\n};\nHDPublicKey.Hardened = 0x80000000;\nHDPublicKey.RootElementAlias = ['m', 'M'];\nHDPublicKey.VersionSize = 4;\nHDPublicKey.DepthSize = 1;\nHDPublicKey.ParentFingerPrintSize = 4;\nHDPublicKey.ChildIndexSize = 4;\nHDPublicKey.ChainCodeSize = 32;\nHDPublicKey.PublicKeySize = 33;\nHDPublicKey.CheckSumSize = 4;\nHDPublicKey.DataSize = 78;\nHDPublicKey.SerializedByteSize = 82;\nHDPublicKey.VersionStart = 0;\nHDPublicKey.VersionEnd = HDPublicKey.VersionStart + HDPublicKey.VersionSize;\nHDPublicKey.DepthStart = HDPublicKey.VersionEnd;\nHDPublicKey.DepthEnd = HDPublicKey.DepthStart + HDPublicKey.DepthSize;\nHDPublicKey.ParentFingerPrintStart = HDPublicKey.DepthEnd;\nHDPublicKey.ParentFingerPrintEnd = HDPublicKey.ParentFingerPrintStart + HDPublicKey.ParentFingerPrintSize;\nHDPublicKey.ChildIndexStart = HDPublicKey.ParentFingerPrintEnd;\nHDPublicKey.ChildIndexEnd = HDPublicKey.ChildIndexStart + HDPublicKey.ChildIndexSize;\nHDPublicKey.ChainCodeStart = HDPublicKey.ChildIndexEnd;\nHDPublicKey.ChainCodeEnd = HDPublicKey.ChainCodeStart + HDPublicKey.ChainCodeSize;\nHDPublicKey.PublicKeyStart = HDPublicKey.ChainCodeEnd;\nHDPublicKey.PublicKeyEnd = HDPublicKey.PublicKeyStart + HDPublicKey.PublicKeySize;\nHDPublicKey.ChecksumStart = HDPublicKey.PublicKeyEnd;\nHDPublicKey.ChecksumEnd = HDPublicKey.ChecksumStart + HDPublicKey.CheckSumSize;\nassert(HDPublicKey.PublicKeyEnd === HDPublicKey.DataSize);\nassert(HDPublicKey.ChecksumEnd === HDPublicKey.SerializedByteSize);\nmodule.exports = HDPublicKey;","map":{"version":3,"names":["_","require","$","BN","Base58","Base58Check","Hash","HDPrivateKey","Network","Point","PublicKey","bitcoreErrors","errors","hdErrors","HDPublicKey","assert","JSUtil","BufferUtil","arg","isString","isBuffer","error","getSerializedError","_buildFromSerialized","toString","ArgumentIsPrivateExtended","hdPublicKey","isObject","_buildFromPrivate","_buildFromObject","UnrecognizedArgument","MustSupplyArgument","isValidPath","indexes","_getDerivationIndexes","every","isNumber","Hardened","prototype","derive","hardened","deriveChild","_deriveWithNumber","_deriveFromString","InvalidDerivationArgument","index","InvalidIndexCantDeriveHardened","InvalidPath","indexBuffer","integerAsBuffer","data","concat","publicKey","toBuffer","hash","sha512hmac","_buffers","chainCode","leftPart","fromBuffer","slice","size","fromPoint","getG","mul","add","point","e","derived","network","depth","parentFingerPrint","fingerPrint","childIndex","path","includes","reduce","prev","isValidSerialized","isNull","validCharacters","InvalidB58Char","decode","InvalidB58Checksum","length","DataSize","InvalidLength","isUndefined","_validateNetwork","version","integerFromBuffer","livenet","xprivkey","testnet","networkArg","get","InvalidNetworkArgument","VersionStart","VersionEnd","xpubkey","InvalidNetwork","args","clone","privateKey","pointToCompressed","undefined","checksum","_buildFromBuffers","buffers","integerAsSingleByteBuffer","hexToBuffer","decoded","DepthStart","DepthEnd","ParentFingerPrintStart","ParentFingerPrintEnd","ChildIndexStart","ChildIndexEnd","ChainCodeStart","ChainCodeEnd","PublicKeyStart","PublicKeyEnd","ChecksumStart","ChecksumEnd","_validateBufferArguments","defineImmutable","sequence","encode","Buffer","ParentFingerPrintSize","sha256ripemd160","integerFromSingleByteBuffer","checkBuffer","name","buff","VersionSize","DepthSize","ChildIndexSize","ChainCodeSize","PublicKeySize","CheckSumSize","fromString","checkArgument","fromObject","inspect","toObject","toJSON","bufferToHex","copy","RootElementAlias","SerializedByteSize","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/hdpublickey.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('./util/preconditions');\n\nvar BN = require('./crypto/bn');\nvar Base58 = require('./encoding/base58');\nvar Base58Check = require('./encoding/base58check');\nvar Hash = require('./crypto/hash');\nvar HDPrivateKey = require('./hdprivatekey');\nvar Network = require('./networks');\nvar Point = require('./crypto/point');\nvar PublicKey = require('./publickey');\n\nvar bitcoreErrors = require('./errors');\nvar errors = bitcoreErrors;\nvar hdErrors = bitcoreErrors.HDPublicKey;\nvar assert = require('assert');\n\nvar JSUtil = require('./util/js');\nvar BufferUtil = require('./util/buffer');\n\n/**\n * The representation of an hierarchically derived public key.\n *\n * See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n *\n * @constructor\n * @param {Object|string|Buffer} arg\n */\nfunction HDPublicKey(arg) {\n  /* jshint maxcomplexity: 12 */\n  /* jshint maxstatements: 20 */\n  if (arg instanceof HDPublicKey) {\n    return arg;\n  }\n  if (!(this instanceof HDPublicKey)) {\n    return new HDPublicKey(arg);\n  }\n  if (arg) {\n    if (_.isString(arg) || BufferUtil.isBuffer(arg)) {\n      var error = HDPublicKey.getSerializedError(arg);\n      if (!error) {\n        return this._buildFromSerialized(arg);\n      } else if (BufferUtil.isBuffer(arg) && !HDPublicKey.getSerializedError(arg.toString())) {\n        return this._buildFromSerialized(arg.toString());\n      } else {\n        if (error instanceof hdErrors.ArgumentIsPrivateExtended) {\n          return new HDPrivateKey(arg).hdPublicKey;\n        }\n        throw error;\n      }\n    } else {\n      if (_.isObject(arg)) {\n        if (arg instanceof HDPrivateKey) {\n          return this._buildFromPrivate(arg);\n        } else {\n          return this._buildFromObject(arg);\n        }\n      } else {\n        throw new hdErrors.UnrecognizedArgument(arg);\n      }\n    }\n  } else {\n    throw new hdErrors.MustSupplyArgument();\n  }\n}\n\n/**\n * Verifies that a given path is valid.\n *\n * @param {string|number} arg\n * @return {boolean}\n */\nHDPublicKey.isValidPath = function(arg) {\n  if (_.isString(arg)) {\n    var indexes = HDPrivateKey._getDerivationIndexes(arg);\n    return indexes !== null && _.every(indexes, HDPublicKey.isValidPath);\n  }\n\n  if (_.isNumber(arg)) {\n    return arg >= 0 && arg < HDPublicKey.Hardened;\n  }\n\n  return false;\n};\n\n/**\n * WARNING: This method is deprecated. Use deriveChild instead.\n *\n *\n * Get a derivated child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same public key), \"m/0/1/40/2/1000\".\n *\n * Note that hardened keys can't be derived from a public extended key.\n *\n * If the first argument is a number, the child with that index will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPublicKey('xpub...');\n * var child_0_1_2 = parent.derive(0).derive(1).derive(2);\n * var copy_of_child_0_1_2 = parent.derive(\"m/0/1/2\");\n * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);\n * ```\n *\n * @param {string|number} arg\n */\nHDPublicKey.prototype.derive = function(arg, hardened) {\n  return this.deriveChild(arg, hardened);\n};\n\n/**\n * WARNING: This method will not be officially supported until v1.0.0.\n *\n *\n * Get a derivated child based on a string or number.\n *\n * If the first argument is a string, it's parsed as the full path of\n * derivation. Valid values for this argument include \"m\" (which returns the\n * same public key), \"m/0/1/40/2/1000\".\n *\n * Note that hardened keys can't be derived from a public extended key.\n *\n * If the first argument is a number, the child with that index will be\n * derived. See the example usage for clarification.\n *\n * @example\n * ```javascript\n * var parent = new HDPublicKey('xpub...');\n * var child_0_1_2 = parent.deriveChild(0).deriveChild(1).deriveChild(2);\n * var copy_of_child_0_1_2 = parent.deriveChild(\"m/0/1/2\");\n * assert(child_0_1_2.xprivkey === copy_of_child_0_1_2);\n * ```\n *\n * @param {string|number} arg\n */\nHDPublicKey.prototype.deriveChild = function(arg, hardened) {\n  if (_.isNumber(arg)) {\n    return this._deriveWithNumber(arg, hardened);\n  } else if (_.isString(arg)) {\n    return this._deriveFromString(arg);\n  } else {\n    throw new hdErrors.InvalidDerivationArgument(arg);\n  }\n};\n\nHDPublicKey.prototype._deriveWithNumber = function(index, hardened) {\n  if (index >= HDPublicKey.Hardened || hardened) {\n    throw new hdErrors.InvalidIndexCantDeriveHardened();\n  }\n  if (index < 0) {\n    throw new hdErrors.InvalidPath(index);\n  }\n\n  var indexBuffer = BufferUtil.integerAsBuffer(index);\n  var data = BufferUtil.concat([this.publicKey.toBuffer(), indexBuffer]);\n  var hash = Hash.sha512hmac(data, this._buffers.chainCode);\n  var leftPart = BN.fromBuffer(hash.slice(0, 32), {size: 32});\n  var chainCode = hash.slice(32, 64);\n\n  var publicKey;\n  try {\n    publicKey = PublicKey.fromPoint(Point.getG().mul(leftPart).add(this.publicKey.point));\n  } catch (e) {\n    return this._deriveWithNumber(index + 1);\n  }\n\n  var derived = new HDPublicKey({\n    network: this.network,\n    depth: this.depth + 1,\n    parentFingerPrint: this.fingerPrint,\n    childIndex: index,\n    chainCode: chainCode,\n    publicKey: publicKey\n  });\n\n  return derived;\n};\n\nHDPublicKey.prototype._deriveFromString = function(path) {\n  /* jshint maxcomplexity: 8 */\n  if (_.includes(path, \"'\")) {\n    throw new hdErrors.InvalidIndexCantDeriveHardened();\n  } else if (!HDPublicKey.isValidPath(path)) {\n    throw new hdErrors.InvalidPath(path);\n  }\n\n  var indexes = HDPrivateKey._getDerivationIndexes(path);\n  var derived = indexes.reduce(function(prev, index) {\n    return prev._deriveWithNumber(index);\n  }, this);\n\n  return derived;\n};\n\n/**\n * Verifies that a given serialized public key in base58 with checksum format\n * is valid.\n *\n * @param {string|Buffer} data - the serialized public key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {boolean}\n */\nHDPublicKey.isValidSerialized = function(data, network) {\n  return _.isNull(HDPublicKey.getSerializedError(data, network));\n};\n\n/**\n * Checks what's the error that causes the validation of a serialized public key\n * in base58 with checksum to fail.\n *\n * @param {string|Buffer} data - the serialized public key\n * @param {string|Network=} network - optional, if present, checks that the\n *     network provided matches the network serialized.\n * @return {errors|null}\n */\nHDPublicKey.getSerializedError = function(data, network) {\n  /* jshint maxcomplexity: 10 */\n  /* jshint maxstatements: 20 */\n  if (!(_.isString(data) || BufferUtil.isBuffer(data))) {\n    return new hdErrors.UnrecognizedArgument('expected buffer or string');\n  }\n  if (!Base58.validCharacters(data)) {\n    return new errors.InvalidB58Char('(unknown)', data);\n  }\n  try {\n    data = Base58Check.decode(data);\n  } catch (e) {\n    return new errors.InvalidB58Checksum(data);\n  }\n  if (data.length !== HDPublicKey.DataSize) {\n    return new hdErrors.InvalidLength(data);\n  }\n  if (!_.isUndefined(network)) {\n    var error = HDPublicKey._validateNetwork(data, network);\n    if (error) {\n      return error;\n    }\n  }\n  var version = BufferUtil.integerFromBuffer(data.slice(0, 4));\n  if (version === Network.livenet.xprivkey || version === Network.testnet.xprivkey ) {\n    return new hdErrors.ArgumentIsPrivateExtended();\n  }\n  return null;\n};\n\nHDPublicKey._validateNetwork = function(data, networkArg) {\n  var network = Network.get(networkArg);\n  if (!network) {\n    return new errors.InvalidNetworkArgument(networkArg);\n  }\n  var version = data.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd);\n  if (BufferUtil.integerFromBuffer(version) !== network.xpubkey) {\n    return new errors.InvalidNetwork(version);\n  }\n  return null;\n};\n\nHDPublicKey.prototype._buildFromPrivate = function (arg) {\n  var args = _.clone(arg._buffers);\n  var point = Point.getG().mul(BN.fromBuffer(args.privateKey));\n  args.publicKey = Point.pointToCompressed(point);\n  args.version = BufferUtil.integerAsBuffer(Network.get(BufferUtil.integerFromBuffer(args.version)).xpubkey);\n  args.privateKey = undefined;\n  args.checksum = undefined;\n  args.xprivkey = undefined;\n  return this._buildFromBuffers(args);\n};\n\nHDPublicKey.prototype._buildFromObject = function(arg) {\n  /* jshint maxcomplexity: 10 */\n  // TODO: Type validation\n  var buffers = {\n    version: arg.network ? BufferUtil.integerAsBuffer(Network.get(arg.network).xpubkey) : arg.version,\n    depth: _.isNumber(arg.depth) ? BufferUtil.integerAsSingleByteBuffer(arg.depth) : arg.depth,\n    parentFingerPrint: _.isNumber(arg.parentFingerPrint) ? BufferUtil.integerAsBuffer(arg.parentFingerPrint) : arg.parentFingerPrint,\n    childIndex: _.isNumber(arg.childIndex) ? BufferUtil.integerAsBuffer(arg.childIndex) : arg.childIndex,\n    chainCode: _.isString(arg.chainCode) ? BufferUtil.hexToBuffer(arg.chainCode) : arg.chainCode,\n    publicKey: _.isString(arg.publicKey) ? BufferUtil.hexToBuffer(arg.publicKey) :\n      BufferUtil.isBuffer(arg.publicKey) ? arg.publicKey : arg.publicKey.toBuffer(),\n    checksum: _.isNumber(arg.checksum) ? BufferUtil.integerAsBuffer(arg.checksum) : arg.checksum\n  };\n  return this._buildFromBuffers(buffers);\n};\n\nHDPublicKey.prototype._buildFromSerialized = function(arg) {\n  var decoded = Base58Check.decode(arg);\n  var buffers = {\n    version: decoded.slice(HDPublicKey.VersionStart, HDPublicKey.VersionEnd),\n    depth: decoded.slice(HDPublicKey.DepthStart, HDPublicKey.DepthEnd),\n    parentFingerPrint: decoded.slice(HDPublicKey.ParentFingerPrintStart,\n                                     HDPublicKey.ParentFingerPrintEnd),\n    childIndex: decoded.slice(HDPublicKey.ChildIndexStart, HDPublicKey.ChildIndexEnd),\n    chainCode: decoded.slice(HDPublicKey.ChainCodeStart, HDPublicKey.ChainCodeEnd),\n    publicKey: decoded.slice(HDPublicKey.PublicKeyStart, HDPublicKey.PublicKeyEnd),\n    checksum: decoded.slice(HDPublicKey.ChecksumStart, HDPublicKey.ChecksumEnd),\n    xpubkey: arg\n  };\n  return this._buildFromBuffers(buffers);\n};\n\n/**\n * Receives a object with buffers in all the properties and populates the\n * internal structure\n *\n * @param {Object} arg\n * @param {buffer.Buffer} arg.version\n * @param {buffer.Buffer} arg.depth\n * @param {buffer.Buffer} arg.parentFingerPrint\n * @param {buffer.Buffer} arg.childIndex\n * @param {buffer.Buffer} arg.chainCode\n * @param {buffer.Buffer} arg.publicKey\n * @param {buffer.Buffer} arg.checksum\n * @param {string=} arg.xpubkey - if set, don't recalculate the base58\n *      representation\n * @return {HDPublicKey} this\n */\nHDPublicKey.prototype._buildFromBuffers = function(arg) {\n  /* jshint maxcomplexity: 8 */\n  /* jshint maxstatements: 20 */\n\n  HDPublicKey._validateBufferArguments(arg);\n\n  JSUtil.defineImmutable(this, {\n    _buffers: arg\n  });\n\n  var sequence = [\n    arg.version, arg.depth, arg.parentFingerPrint, arg.childIndex, arg.chainCode,\n    arg.publicKey\n  ];\n  var concat = BufferUtil.concat(sequence);\n  var checksum = Base58Check.checksum(concat);\n  if (!arg.checksum || !arg.checksum.length) {\n    arg.checksum = checksum;\n  } else {\n    if (arg.checksum.toString('hex') !== checksum.toString('hex')) {\n      throw new errors.InvalidB58Checksum(concat, checksum);\n    }\n  }\n  var network = Network.get(BufferUtil.integerFromBuffer(arg.version));\n\n  var xpubkey;\n  xpubkey = Base58Check.encode(BufferUtil.concat(sequence));\n  arg.xpubkey = new Buffer(xpubkey);\n\n  var publicKey = new PublicKey(arg.publicKey, {network: network});\n  var size = HDPublicKey.ParentFingerPrintSize;\n  var fingerPrint = Hash.sha256ripemd160(publicKey.toBuffer()).slice(0, size);\n\n  JSUtil.defineImmutable(this, {\n    xpubkey: xpubkey,\n    network: network,\n    depth: BufferUtil.integerFromSingleByteBuffer(arg.depth),\n    publicKey: publicKey,\n    fingerPrint: fingerPrint\n  });\n\n  return this;\n};\n\nHDPublicKey._validateBufferArguments = function(arg) {\n  var checkBuffer = function(name, size) {\n    var buff = arg[name];\n    assert(BufferUtil.isBuffer(buff), name + ' argument is not a buffer, it\\'s ' + typeof buff);\n    assert(\n      buff.length === size,\n      name + ' has not the expected size: found ' + buff.length + ', expected ' + size\n    );\n  };\n  checkBuffer('version', HDPublicKey.VersionSize);\n  checkBuffer('depth', HDPublicKey.DepthSize);\n  checkBuffer('parentFingerPrint', HDPublicKey.ParentFingerPrintSize);\n  checkBuffer('childIndex', HDPublicKey.ChildIndexSize);\n  checkBuffer('chainCode', HDPublicKey.ChainCodeSize);\n  checkBuffer('publicKey', HDPublicKey.PublicKeySize);\n  if (arg.checksum && arg.checksum.length) {\n    checkBuffer('checksum', HDPublicKey.CheckSumSize);\n  }\n};\n\nHDPublicKey.fromString = function(arg) {\n  $.checkArgument(_.isString(arg), 'No valid string was provided');\n  return new HDPublicKey(arg);\n};\n\nHDPublicKey.fromObject = function(arg) {\n  $.checkArgument(_.isObject(arg), 'No valid argument was provided');\n  return new HDPublicKey(arg);\n};\n\n/**\n * Returns the base58 checked representation of the public key\n * @return {string} a string starting with \"xpub...\" in livenet\n */\nHDPublicKey.prototype.toString = function() {\n  return this.xpubkey;\n};\n\n/**\n * Returns the console representation of this extended public key.\n * @return string\n */\nHDPublicKey.prototype.inspect = function() {\n  return '<HDPublicKey: ' + this.xpubkey + '>';\n};\n\n/**\n * Returns a plain JavaScript object with information to reconstruct a key.\n *\n * Fields are: <ul>\n *  <li> network: 'livenet' or 'testnet'\n *  <li> depth: a number from 0 to 255, the depth to the master extended key\n *  <li> fingerPrint: a number of 32 bits taken from the hash of the public key\n *  <li> fingerPrint: a number of 32 bits taken from the hash of this key's\n *  <li>     parent's public key\n *  <li> childIndex: index with which this key was derived\n *  <li> chainCode: string in hexa encoding used for derivation\n *  <li> publicKey: string, hexa encoded, in compressed key format\n *  <li> checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n *  <li> xpubkey: the string with the base58 representation of this extended key\n *  <li> checksum: the base58 checksum of xpubkey\n * </ul>\n */\nHDPublicKey.prototype.toObject = HDPublicKey.prototype.toJSON = function toObject() {\n  return {\n    network: Network.get(BufferUtil.integerFromBuffer(this._buffers.version)).name,\n    depth: BufferUtil.integerFromSingleByteBuffer(this._buffers.depth),\n    fingerPrint: BufferUtil.integerFromBuffer(this.fingerPrint),\n    parentFingerPrint: BufferUtil.integerFromBuffer(this._buffers.parentFingerPrint),\n    childIndex: BufferUtil.integerFromBuffer(this._buffers.childIndex),\n    chainCode: BufferUtil.bufferToHex(this._buffers.chainCode),\n    publicKey: this.publicKey.toString(),\n    checksum: BufferUtil.integerFromBuffer(this._buffers.checksum),\n    xpubkey: this.xpubkey\n  };\n};\n\n/**\n * Create a HDPublicKey from a buffer argument\n *\n * @param {Buffer} arg\n * @return {HDPublicKey}\n */\nHDPublicKey.fromBuffer = function(arg) {\n  return new HDPublicKey(arg);\n};\n\n/**\n * Return a buffer representation of the xpubkey\n *\n * @return {Buffer}\n */\nHDPublicKey.prototype.toBuffer = function() {\n  return BufferUtil.copy(this._buffers.xpubkey);\n};\n\nHDPublicKey.Hardened = 0x80000000;\nHDPublicKey.RootElementAlias = ['m', 'M'];\n\nHDPublicKey.VersionSize = 4;\nHDPublicKey.DepthSize = 1;\nHDPublicKey.ParentFingerPrintSize = 4;\nHDPublicKey.ChildIndexSize = 4;\nHDPublicKey.ChainCodeSize = 32;\nHDPublicKey.PublicKeySize = 33;\nHDPublicKey.CheckSumSize = 4;\n\nHDPublicKey.DataSize = 78;\nHDPublicKey.SerializedByteSize = 82;\n\nHDPublicKey.VersionStart           = 0;\nHDPublicKey.VersionEnd             = HDPublicKey.VersionStart + HDPublicKey.VersionSize;\nHDPublicKey.DepthStart             = HDPublicKey.VersionEnd;\nHDPublicKey.DepthEnd               = HDPublicKey.DepthStart + HDPublicKey.DepthSize;\nHDPublicKey.ParentFingerPrintStart = HDPublicKey.DepthEnd;\nHDPublicKey.ParentFingerPrintEnd   = HDPublicKey.ParentFingerPrintStart + HDPublicKey.ParentFingerPrintSize;\nHDPublicKey.ChildIndexStart        = HDPublicKey.ParentFingerPrintEnd;\nHDPublicKey.ChildIndexEnd          = HDPublicKey.ChildIndexStart + HDPublicKey.ChildIndexSize;\nHDPublicKey.ChainCodeStart         = HDPublicKey.ChildIndexEnd;\nHDPublicKey.ChainCodeEnd           = HDPublicKey.ChainCodeStart + HDPublicKey.ChainCodeSize;\nHDPublicKey.PublicKeyStart         = HDPublicKey.ChainCodeEnd;\nHDPublicKey.PublicKeyEnd           = HDPublicKey.PublicKeyStart + HDPublicKey.PublicKeySize;\nHDPublicKey.ChecksumStart          = HDPublicKey.PublicKeyEnd;\nHDPublicKey.ChecksumEnd            = HDPublicKey.ChecksumStart + HDPublicKey.CheckSumSize;\n\nassert(HDPublicKey.PublicKeyEnd === HDPublicKey.DataSize);\nassert(HDPublicKey.ChecksumEnd === HDPublicKey.SerializedByteSize);\n\nmodule.exports = HDPublicKey;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}