{"ast":null,"code":"import { invariant } from '../utils';\nimport { SingularRelativeTimeUnit } from './SingularRelativeTimeUnit';\nimport { MakePartsList } from './MakePartsList';\nimport { ToString, Type, SameValue } from '../262';\nexport function PartitionRelativeTimePattern(rtf, value, unit, _a) {\n  var getInternalSlots = _a.getInternalSlots;\n  invariant(Type(value) === 'Number', \"value must be number, instead got \" + typeof value, TypeError);\n  invariant(Type(unit) === 'String', \"unit must be number, instead got \" + typeof value, TypeError);\n  if (isNaN(value) || !isFinite(value)) {\n    throw new RangeError(\"Invalid value \" + value);\n  }\n  var resolvedUnit = SingularRelativeTimeUnit(unit);\n  var _b = getInternalSlots(rtf),\n    fields = _b.fields,\n    style = _b.style,\n    numeric = _b.numeric,\n    pluralRules = _b.pluralRules,\n    numberFormat = _b.numberFormat;\n  var entry = resolvedUnit;\n  if (style === 'short') {\n    entry = resolvedUnit + \"-short\";\n  } else if (style === 'narrow') {\n    entry = resolvedUnit + \"-narrow\";\n  }\n  if (!(entry in fields)) {\n    entry = resolvedUnit;\n  }\n  var patterns = fields[entry];\n  if (numeric === 'auto') {\n    if (ToString(value) in patterns) {\n      return [{\n        type: 'literal',\n        value: patterns[ToString(value)]\n      }];\n    }\n  }\n  var tl = 'future';\n  if (SameValue(value, -0) || value < 0) {\n    tl = 'past';\n  }\n  var po = patterns[tl];\n  var fv = typeof numberFormat.formatToParts === 'function' ? numberFormat.formatToParts(Math.abs(value)) :\n  // TODO: If formatToParts is not supported, we assume the whole formatted\n  // number is a part\n  [{\n    type: 'literal',\n    value: numberFormat.format(Math.abs(value)),\n    unit: unit\n  }];\n  var pr = pluralRules.select(value);\n  var pattern = po[pr];\n  return MakePartsList(pattern, resolvedUnit, fv);\n}","map":{"version":3,"names":["invariant","SingularRelativeTimeUnit","MakePartsList","ToString","Type","SameValue","PartitionRelativeTimePattern","rtf","value","unit","_a","getInternalSlots","TypeError","isNaN","isFinite","RangeError","resolvedUnit","_b","fields","style","numeric","pluralRules","numberFormat","entry","patterns","type","tl","po","fv","formatToParts","Math","abs","format","pr","select","pattern"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/@formatjs/ecma402-abstract/lib/RelativeTimeFormat/PartitionRelativeTimePattern.js"],"sourcesContent":["import { invariant } from '../utils';\nimport { SingularRelativeTimeUnit } from './SingularRelativeTimeUnit';\nimport { MakePartsList } from './MakePartsList';\nimport { ToString, Type, SameValue } from '../262';\nexport function PartitionRelativeTimePattern(rtf, value, unit, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    invariant(Type(value) === 'Number', \"value must be number, instead got \" + typeof value, TypeError);\n    invariant(Type(unit) === 'String', \"unit must be number, instead got \" + typeof value, TypeError);\n    if (isNaN(value) || !isFinite(value)) {\n        throw new RangeError(\"Invalid value \" + value);\n    }\n    var resolvedUnit = SingularRelativeTimeUnit(unit);\n    var _b = getInternalSlots(rtf), fields = _b.fields, style = _b.style, numeric = _b.numeric, pluralRules = _b.pluralRules, numberFormat = _b.numberFormat;\n    var entry = resolvedUnit;\n    if (style === 'short') {\n        entry = resolvedUnit + \"-short\";\n    }\n    else if (style === 'narrow') {\n        entry = resolvedUnit + \"-narrow\";\n    }\n    if (!(entry in fields)) {\n        entry = resolvedUnit;\n    }\n    var patterns = fields[entry];\n    if (numeric === 'auto') {\n        if (ToString(value) in patterns) {\n            return [\n                {\n                    type: 'literal',\n                    value: patterns[ToString(value)],\n                },\n            ];\n        }\n    }\n    var tl = 'future';\n    if (SameValue(value, -0) || value < 0) {\n        tl = 'past';\n    }\n    var po = patterns[tl];\n    var fv = typeof numberFormat.formatToParts === 'function'\n        ? numberFormat.formatToParts(Math.abs(value))\n        : // TODO: If formatToParts is not supported, we assume the whole formatted\n            // number is a part\n            [\n                {\n                    type: 'literal',\n                    value: numberFormat.format(Math.abs(value)),\n                    unit: unit,\n                },\n            ];\n    var pr = pluralRules.select(value);\n    var pattern = po[pr];\n    return MakePartsList(pattern, resolvedUnit, fv);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,QAAQ,QAAQ;AAClD,OAAO,SAASC,4BAA4B,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,EAAE,EAAE;EAC/D,IAAIC,gBAAgB,GAAGD,EAAE,CAACC,gBAAgB;EAC1CX,SAAS,CAACI,IAAI,CAACI,KAAK,CAAC,KAAK,QAAQ,EAAE,oCAAoC,GAAG,OAAOA,KAAK,EAAEI,SAAS,CAAC;EACnGZ,SAAS,CAACI,IAAI,CAACK,IAAI,CAAC,KAAK,QAAQ,EAAE,mCAAmC,GAAG,OAAOD,KAAK,EAAEI,SAAS,CAAC;EACjG,IAAIC,KAAK,CAACL,KAAK,CAAC,IAAI,CAACM,QAAQ,CAACN,KAAK,CAAC,EAAE;IAClC,MAAM,IAAIO,UAAU,CAAC,gBAAgB,GAAGP,KAAK,CAAC;EAClD;EACA,IAAIQ,YAAY,GAAGf,wBAAwB,CAACQ,IAAI,CAAC;EACjD,IAAIQ,EAAE,GAAGN,gBAAgB,CAACJ,GAAG,CAAC;IAAEW,MAAM,GAAGD,EAAE,CAACC,MAAM;IAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;IAAEC,OAAO,GAAGH,EAAE,CAACG,OAAO;IAAEC,WAAW,GAAGJ,EAAE,CAACI,WAAW;IAAEC,YAAY,GAAGL,EAAE,CAACK,YAAY;EACxJ,IAAIC,KAAK,GAAGP,YAAY;EACxB,IAAIG,KAAK,KAAK,OAAO,EAAE;IACnBI,KAAK,GAAGP,YAAY,GAAG,QAAQ;EACnC,CAAC,MACI,IAAIG,KAAK,KAAK,QAAQ,EAAE;IACzBI,KAAK,GAAGP,YAAY,GAAG,SAAS;EACpC;EACA,IAAI,EAAEO,KAAK,IAAIL,MAAM,CAAC,EAAE;IACpBK,KAAK,GAAGP,YAAY;EACxB;EACA,IAAIQ,QAAQ,GAAGN,MAAM,CAACK,KAAK,CAAC;EAC5B,IAAIH,OAAO,KAAK,MAAM,EAAE;IACpB,IAAIjB,QAAQ,CAACK,KAAK,CAAC,IAAIgB,QAAQ,EAAE;MAC7B,OAAO,CACH;QACIC,IAAI,EAAE,SAAS;QACfjB,KAAK,EAAEgB,QAAQ,CAACrB,QAAQ,CAACK,KAAK,CAAC;MACnC,CAAC,CACJ;IACL;EACJ;EACA,IAAIkB,EAAE,GAAG,QAAQ;EACjB,IAAIrB,SAAS,CAACG,KAAK,EAAE,CAAC,CAAC,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;IACnCkB,EAAE,GAAG,MAAM;EACf;EACA,IAAIC,EAAE,GAAGH,QAAQ,CAACE,EAAE,CAAC;EACrB,IAAIE,EAAE,GAAG,OAAON,YAAY,CAACO,aAAa,KAAK,UAAU,GACnDP,YAAY,CAACO,aAAa,CAACC,IAAI,CAACC,GAAG,CAACvB,KAAK,CAAC,CAAC;EAC3C;EACE;EACA,CACI;IACIiB,IAAI,EAAE,SAAS;IACfjB,KAAK,EAAEc,YAAY,CAACU,MAAM,CAACF,IAAI,CAACC,GAAG,CAACvB,KAAK,CAAC,CAAC;IAC3CC,IAAI,EAAEA;EACV,CAAC,CACJ;EACT,IAAIwB,EAAE,GAAGZ,WAAW,CAACa,MAAM,CAAC1B,KAAK,CAAC;EAClC,IAAI2B,OAAO,GAAGR,EAAE,CAACM,EAAE,CAAC;EACpB,OAAO/B,aAAa,CAACiC,OAAO,EAAEnB,YAAY,EAAEY,EAAE,CAAC;AACnD"},"metadata":{},"sourceType":"module"}