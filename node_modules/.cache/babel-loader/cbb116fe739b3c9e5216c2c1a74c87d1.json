{"ast":null,"code":"import { UnsupportedChainIdError } from '@web3-react/core';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nexport var getMetaMaskErrorMessage = function getMetaMaskErrorMessage(error) {\n  if (error instanceof NoEthereumProviderError) {\n    return 'metamask.error.noExtension';\n  } else if (error instanceof UnsupportedChainIdError) {\n    return 'metamask.error.unsupportedNetwork';\n  } else if (error instanceof UserRejectedRequestErrorInjected) {\n    return 'metamask.error.unauthorized';\n  } else {\n    return 'metamask.error.unknown';\n  }\n};","map":{"version":3,"names":["UnsupportedChainIdError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","getMetaMaskErrorMessage","error"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/modules/public/errorHandler/helpers/getMetaMaskErrorMessage.ts"],"sourcesContent":["import { UnsupportedChainIdError } from '@web3-react/core';\nimport {\n    NoEthereumProviderError,\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector';\n\nexport const getMetaMaskErrorMessage = (error: Error): string => {\n    if (error instanceof NoEthereumProviderError) {\n        return 'metamask.error.noExtension';\n    } else if (error instanceof UnsupportedChainIdError) {\n        return 'metamask.error.unsupportedNetwork';\n    } else if (error instanceof UserRejectedRequestErrorInjected) {\n        return 'metamask.error.unauthorized';\n    } else {\n        return 'metamask.error.unknown';\n    }\n};\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,kBAAkB;AAC1D,SACIC,uBAAuB,EACvBC,wBAAwB,IAAIC,gCAAgC,QACzD,gCAAgC;AAEvC,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAIC,KAAY,EAAa;EAC7D,IAAIA,KAAK,YAAYJ,uBAAuB,EAAE;IAC1C,OAAO,4BAA4B;EACvC,CAAC,MAAM,IAAII,KAAK,YAAYL,uBAAuB,EAAE;IACjD,OAAO,mCAAmC;EAC9C,CAAC,MAAM,IAAIK,KAAK,YAAYF,gCAAgC,EAAE;IAC1D,OAAO,6BAA6B;EACxC,CAAC,MAAM;IACH,OAAO,wBAAwB;EACnC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}