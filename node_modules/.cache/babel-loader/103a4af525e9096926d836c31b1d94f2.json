{"ast":null,"code":"var originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */\nvar FunctionToString = /** @class */function () {\n  function FunctionToString() {\n    /**\n     * @inheritDoc\n     */\n    this.name = FunctionToString.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  FunctionToString.prototype.setupOnce = function () {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n  FunctionToString.id = 'FunctionToString';\n  return FunctionToString;\n}();\nexport { FunctionToString };","map":{"version":3,"sources":["../../src/integrations/functiontostring.ts"],"names":[],"mappings":"AAEA,IAAI,wBAAoC;AAExC;AACA,IAAA,gBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,gBAAA,GAAA;IAME;;AAEG;IACI,IAAA,CAAA,IAAI,GAAW,gBAAgB,CAAC,EAAE;EAe3C;EAbE;;AAEG;EACI,gBAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE;IACA,wBAAwB,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ;IAEtD;IACA,QAAQ,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAA;MAAgC,IAAA,IAAA,GAAA,EAAA;WAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;QAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;MAC5D,IAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,IAAI,IAAI;MAChD,OAAO,wBAAwB,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;IACtD,CAAC;EACH,CAAC;EAtBD;;AAEG;EACW,gBAAA,CAAA,EAAE,GAAW,kBAAkB;EAoB/C,OAAA,gBAAC;CAAA,EAAA;SAxBY,gBAAgB","sourcesContent":["import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry_original__ || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}