{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n// eslint-disable\nimport { Decimal } from '../components/Decimal';\nimport { DEFAULT_CCY_PRECISION } from '../constants';\nimport { handleCCYPrecision } from './';\nvar findMarket = function findMarket(askUnit, bidUnit, markets) {\n  var _iterator = _createForOfIteratorHelper(markets),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var market = _step.value;\n      if (market.base_unit === askUnit && market.quote_unit === bidUnit || market.base_unit === bidUnit && market.quote_unit === askUnit) {\n        return market;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n};\nvar isMarketPresent = function isMarketPresent(askUnit, bidUnit, markets) {\n  return findMarket(askUnit, bidUnit, markets) !== null;\n};\nvar findMarketTicker = function findMarketTicker(marketPair, marketTickers) {\n  return marketTickers[marketPair];\n};\nvar getWalletTotal = function getWalletTotal(wallet) {\n  return (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n};\nexport var estimateWithMarket = function estimateWithMarket(targetCurrency, walletCurrency, walletTotal, currencies, markets, marketTickers) {\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var formattedWalletCurrency = walletCurrency.toLowerCase();\n  var market = findMarket(formattedTargetCurrency, formattedWalletCurrency, markets);\n  var marketTicker = findMarketTicker(market && market.id || '', marketTickers);\n  var targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n  if (formattedTargetCurrency === formattedWalletCurrency) {\n    return Number(Decimal.format(walletTotal, targetCurrencyPrecision));\n  }\n  if (market && marketTicker) {\n    if (formattedTargetCurrency === market.base_unit) {\n      var precisedValue = Number(Decimal.format(walletTotal * (Number(marketTicker.last) !== 0 ? 1 / Number(marketTicker.last) : 0), targetCurrencyPrecision));\n      return precisedValue;\n    } else {\n      var _precisedValue = Number(Decimal.format(walletTotal * Number(marketTicker.last), targetCurrencyPrecision));\n      return _precisedValue;\n    }\n  }\n  return 0;\n};\nvar estimateWithoutMarket = function estimateWithoutMarket(targetCurrency, walletCurrency, walletTotal, currencies, markets, marketTickers) {\n  var secondaryCurrencies = [];\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var formattedWalletCurrency = walletCurrency.toLowerCase();\n  var _iterator2 = _createForOfIteratorHelper(markets),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _market = _step2.value;\n      if (_market.base_unit === formattedTargetCurrency) {\n        secondaryCurrencies.push(_market.quote_unit);\n      }\n      if (_market.quote_unit === formattedTargetCurrency) {\n        secondaryCurrencies.push(_market.base_unit);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var selectedSecondaryCurrency = '';\n  outer: for (var _i = 0, _secondaryCurrencies = secondaryCurrencies; _i < _secondaryCurrencies.length; _i++) {\n    var secondaryCurrency = _secondaryCurrencies[_i];\n    var _iterator3 = _createForOfIteratorHelper(markets),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var market = _step3.value;\n        if (market.base_unit === secondaryCurrency && market.quote_unit === formattedWalletCurrency || market.quote_unit === secondaryCurrency && market.base_unit === formattedWalletCurrency) {\n          selectedSecondaryCurrency = secondaryCurrency;\n          break outer;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  if (selectedSecondaryCurrency) {\n    var secondaryCurrencyValue = estimateWithMarket(selectedSecondaryCurrency, formattedWalletCurrency, walletTotal, currencies, markets, marketTickers);\n    return estimateWithMarket(targetCurrency, selectedSecondaryCurrency, secondaryCurrencyValue, currencies, markets, marketTickers);\n  } else {\n    // 'No secondary currency found for', wallet.currency\n  }\n  return 0;\n};\nexport var estimateValue = function estimateValue(targetCurrency, currencies, wallets, markets, marketTickers) {\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var estimatedValue = 0;\n  if (wallets && wallets.length) {\n    var _iterator4 = _createForOfIteratorHelper(wallets),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var wallet = _step4.value;\n        var formattedWalletCurrency = wallet.currency.toLowerCase();\n        if (formattedWalletCurrency === formattedTargetCurrency) {\n          var walletTotal = (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n          estimatedValue += walletTotal;\n        } else if (isMarketPresent(formattedTargetCurrency, formattedWalletCurrency, markets)) {\n          estimatedValue += estimateWithMarket(formattedTargetCurrency, formattedWalletCurrency, getWalletTotal(wallet), currencies, markets, marketTickers);\n        } else {\n          estimatedValue += estimateWithoutMarket(formattedTargetCurrency, wallet.currency, getWalletTotal(wallet), currencies, markets, marketTickers);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  var targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n  var precisedEstimatedValue = Decimal.format(estimatedValue, targetCurrencyPrecision);\n  return precisedEstimatedValue;\n};\nexport var estimateUnitValue = function estimateUnitValue(targetCurrency, currentCurrency, total, currencies, markets, marketTickers) {\n  var estimated = estimateWithMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers) || estimateWithoutMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers);\n  var formattedTargetCurrency = targetCurrency.toLowerCase();\n  var targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n  return Decimal.format(estimated, targetCurrencyPrecision);\n};\nexport var findPrecision = function findPrecision(unit, markets) {\n  var _iterator5 = _createForOfIteratorHelper(markets),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var market = _step5.value;\n      if (market.base_unit === unit) {\n        return market.amount_precision;\n      }\n      if (market.quote_unit === unit) {\n        return market.price_precision;\n      }\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return 4;\n};","map":{"version":3,"names":["Decimal","DEFAULT_CCY_PRECISION","handleCCYPrecision","findMarket","askUnit","bidUnit","markets","market","base_unit","quote_unit","isMarketPresent","findMarketTicker","marketPair","marketTickers","getWalletTotal","wallet","Number","balance","locked","estimateWithMarket","targetCurrency","walletCurrency","walletTotal","currencies","formattedTargetCurrency","toLowerCase","formattedWalletCurrency","marketTicker","id","targetCurrencyPrecision","format","precisedValue","last","estimateWithoutMarket","secondaryCurrencies","push","selectedSecondaryCurrency","outer","secondaryCurrency","secondaryCurrencyValue","estimateValue","wallets","estimatedValue","length","currency","precisedEstimatedValue","estimateUnitValue","currentCurrency","total","estimated","findPrecision","unit","amount_precision","price_precision"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/helpers/estimateValue.ts"],"sourcesContent":["// eslint-disable\nimport { Decimal } from '../components/Decimal';\nimport { DEFAULT_CCY_PRECISION } from '../constants';\nimport {\n    Currency,\n    Market,\n    Ticker,\n    Wallet,\n} from '../modules';\nimport { handleCCYPrecision } from './';\n\nexport interface MarketTicker {\n    [key: string]: Ticker;\n}\n\nconst findMarket = (askUnit: string, bidUnit: string, markets: Market[]): Market | null => {\n    for (const market of markets) {\n        if ((market.base_unit === askUnit && market.quote_unit === bidUnit) ||\n            (market.base_unit === bidUnit && market.quote_unit === askUnit)) {\n            return market;\n        }\n    }\n\n    return null;\n};\n\nconst isMarketPresent = (askUnit: string, bidUnit: string, markets: Market[]): boolean => {\n    return (findMarket(askUnit, bidUnit, markets) !== null);\n};\n\nconst findMarketTicker = (marketPair: string, marketTickers: MarketTicker) => {\n    return marketTickers[marketPair];\n};\n\nconst getWalletTotal = (wallet: Wallet): number => {\n    return (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n};\n\nexport const estimateWithMarket = (targetCurrency: string, walletCurrency: string, walletTotal: number, currencies: Currency[], markets: Market[], marketTickers: MarketTicker): number => {\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    const formattedWalletCurrency = walletCurrency.toLowerCase();\n    const market = findMarket(formattedTargetCurrency, formattedWalletCurrency, markets);\n    const marketTicker = findMarketTicker((market && market.id) || '', marketTickers);\n    const targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n\n    if (formattedTargetCurrency === formattedWalletCurrency) {\n        return Number(Decimal.format(walletTotal, targetCurrencyPrecision));\n    }\n\n    if (market && marketTicker) {\n        if (formattedTargetCurrency === market.base_unit) {\n            const precisedValue = Number(Decimal.format(walletTotal * (Number(marketTicker.last) !== 0 ? 1 / Number(marketTicker.last) : 0), targetCurrencyPrecision));\n\n            return precisedValue;\n        } else {\n            const precisedValue = Number(Decimal.format(walletTotal * Number(marketTicker.last), targetCurrencyPrecision));\n\n            return precisedValue;\n        }\n    }\n\n    return 0;\n};\n\nconst estimateWithoutMarket = (targetCurrency: string, walletCurrency: string, walletTotal: number, currencies: Currency[], markets: Market[], marketTickers: MarketTicker): number => {\n    const secondaryCurrencies: string[] = [];\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    const formattedWalletCurrency = walletCurrency.toLowerCase();\n\n    for (const market of markets) {\n        if (market.base_unit === formattedTargetCurrency) {\n            secondaryCurrencies.push(market.quote_unit);\n        }\n        if (market.quote_unit === formattedTargetCurrency) {\n            secondaryCurrencies.push(market.base_unit);\n        }\n    }\n\n    let selectedSecondaryCurrency = '';\n    outer:\n        for (const secondaryCurrency of secondaryCurrencies) {\n            for (const market of markets) {\n                if ((market.base_unit === secondaryCurrency && market.quote_unit === formattedWalletCurrency) ||\n                    (market.quote_unit === secondaryCurrency && market.base_unit === formattedWalletCurrency)) {\n                    selectedSecondaryCurrency = secondaryCurrency;\n                    break outer;\n                }\n            }\n        }\n\n    if (selectedSecondaryCurrency) {\n        const secondaryCurrencyValue = estimateWithMarket(selectedSecondaryCurrency, formattedWalletCurrency, walletTotal, currencies, markets, marketTickers);\n\n        return estimateWithMarket(targetCurrency, selectedSecondaryCurrency, secondaryCurrencyValue, currencies, markets, marketTickers);\n    } else {\n        // 'No secondary currency found for', wallet.currency\n    }\n\n    return 0;\n};\n\nexport const estimateValue = (targetCurrency: string, currencies: Currency[], wallets: Wallet[], markets: Market[], marketTickers: MarketTicker): string => {\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    let estimatedValue = 0;\n\n    if (wallets && wallets.length) {\n        for (const wallet of wallets) {\n            const formattedWalletCurrency = wallet.currency.toLowerCase();\n\n            if (formattedWalletCurrency === formattedTargetCurrency) {\n                const walletTotal = (Number(wallet.balance) || 0) + (Number(wallet.locked) || 0);\n                estimatedValue += walletTotal;\n            } else if (isMarketPresent(formattedTargetCurrency, formattedWalletCurrency, markets)) {\n                estimatedValue += estimateWithMarket(formattedTargetCurrency, formattedWalletCurrency, getWalletTotal(wallet), currencies, markets, marketTickers);\n            } else {\n                estimatedValue += estimateWithoutMarket(formattedTargetCurrency, wallet.currency, getWalletTotal(wallet), currencies, markets, marketTickers);\n            }\n        }\n    }\n\n    const targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n    const precisedEstimatedValue = Decimal.format(estimatedValue, targetCurrencyPrecision);\n\n    return precisedEstimatedValue;\n};\n\nexport const estimateUnitValue = (targetCurrency: string, currentCurrency: string, total: number, currencies: Currency[], markets: Market[], marketTickers: MarketTicker): string => {\n    const estimated = estimateWithMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers) || estimateWithoutMarket(targetCurrency, currentCurrency, total, currencies, markets, marketTickers);\n    const formattedTargetCurrency = targetCurrency.toLowerCase();\n    const targetCurrencyPrecision = handleCCYPrecision(currencies, formattedTargetCurrency, DEFAULT_CCY_PRECISION);\n\n    return Decimal.format(estimated, targetCurrencyPrecision);\n};\n\nexport const findPrecision = (unit: string, markets: Market[]) => {\n    for (const market of markets) {\n        if (market.base_unit === unit) {\n            return market.amount_precision;\n        }\n        if (market.quote_unit === unit) {\n            return market.price_precision;\n        }\n    }\n\n    return 4;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}