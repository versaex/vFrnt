{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton) {\n  var result = {};\n  skeleton.replace(DATE_TIME_REGEX, function (match) {\n    var len = match.length;\n    switch (match[0]) {\n      // Era\n      case 'G':\n        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n        break;\n      // Year\n      case 'y':\n        result.year = len === 2 ? '2-digit' : 'numeric';\n        break;\n      case 'Y':\n      case 'u':\n      case 'U':\n      case 'r':\n        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n      // Quarter\n      case 'q':\n      case 'Q':\n        throw new RangeError('`q/Q` (quarter) patterns are not supported');\n      // Month\n      case 'M':\n      case 'L':\n        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n        break;\n      // Week\n      case 'w':\n      case 'W':\n        throw new RangeError('`w/W` (week) patterns are not supported');\n      case 'd':\n        result.day = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'D':\n      case 'F':\n      case 'g':\n        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n      // Weekday\n      case 'E':\n        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n        break;\n      case 'e':\n        if (len < 4) {\n          throw new RangeError('`e..eee` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      case 'c':\n        if (len < 4) {\n          throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n        }\n        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n        break;\n      // Period\n      case 'a':\n        // AM, PM\n        result.hour12 = true;\n        break;\n      case 'b': // am, pm, noon, midnight\n      case 'B':\n        // flexible day periods\n        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n      // Hour\n      case 'h':\n        result.hourCycle = 'h12';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'H':\n        result.hourCycle = 'h23';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'K':\n        result.hourCycle = 'h11';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'k':\n        result.hourCycle = 'h24';\n        result.hour = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'j':\n      case 'J':\n      case 'C':\n        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n      // Minute\n      case 'm':\n        result.minute = ['numeric', '2-digit'][len - 1];\n        break;\n      // Second\n      case 's':\n        result.second = ['numeric', '2-digit'][len - 1];\n        break;\n      case 'S':\n      case 'A':\n        throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');\n      // Zone\n      case 'z':\n        // 1..3, 4: specific non-location format\n        result.timeZoneName = len < 4 ? 'short' : 'long';\n        break;\n      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n      case 'O': // 1, 4: miliseconds in day short, long\n      case 'v': // 1, 4: generic non-location format\n      case 'V': // 1, 2, 3, 4: time zone ID or city\n      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n      case 'x':\n        // 1, 2, 3, 4: The ISO8601 varios formats\n        throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');\n    }\n    return '';\n  });\n  return result;\n}\nfunction icuUnitToEcma(unit) {\n  return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\+|#+)?)?$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nfunction parseSignificantPrecision(str) {\n  var result = {};\n  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n    // @@@ case\n    if (typeof g2 !== 'string') {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length;\n    }\n    // @@@+ case\n    else if (g2 === '+') {\n      result.minimumSignificantDigits = g1.length;\n    }\n    // .### case\n    else if (g1[0] === '#') {\n      result.maximumSignificantDigits = g1.length;\n    }\n    // .@@## or .@@@ case\n    else {\n      result.minimumSignificantDigits = g1.length;\n      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n    }\n    return '';\n  });\n  return result;\n}\nfunction parseSign(str) {\n  switch (str) {\n    case 'sign-auto':\n      return {\n        signDisplay: 'auto'\n      };\n    case 'sign-accounting':\n      return {\n        currencySign: 'accounting'\n      };\n    case 'sign-always':\n      return {\n        signDisplay: 'always'\n      };\n    case 'sign-accounting-always':\n      return {\n        signDisplay: 'always',\n        currencySign: 'accounting'\n      };\n    case 'sign-except-zero':\n      return {\n        signDisplay: 'exceptZero'\n      };\n    case 'sign-accounting-except-zero':\n      return {\n        signDisplay: 'exceptZero',\n        currencySign: 'accounting'\n      };\n    case 'sign-never':\n      return {\n        signDisplay: 'never'\n      };\n  }\n}\nfunction parseNotationOptions(opt) {\n  var result = {};\n  var signOpts = parseSign(opt);\n  if (signOpts) {\n    return signOpts;\n  }\n  return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function convertNumberSkeletonToNumberFormatOptions(tokens) {\n  var result = {};\n  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n    var token = tokens_1[_i];\n    switch (token.stem) {\n      case 'percent':\n        result.style = 'percent';\n        continue;\n      case 'currency':\n        result.style = 'currency';\n        result.currency = token.options[0];\n        continue;\n      case 'group-off':\n        result.useGrouping = false;\n        continue;\n      case 'precision-integer':\n        result.maximumFractionDigits = 0;\n        continue;\n      case 'measure-unit':\n        result.style = 'unit';\n        result.unit = icuUnitToEcma(token.options[0]);\n        continue;\n      case 'compact-short':\n        result.notation = 'compact';\n        result.compactDisplay = 'short';\n        continue;\n      case 'compact-long':\n        result.notation = 'compact';\n        result.compactDisplay = 'long';\n        continue;\n      case 'scientific':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'scientific'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'engineering':\n        result = __assign(__assign(__assign({}, result), {\n          notation: 'engineering'\n        }), token.options.reduce(function (all, opt) {\n          return __assign(__assign({}, all), parseNotationOptions(opt));\n        }, {}));\n        continue;\n      case 'notation-simple':\n        result.notation = 'standard';\n        continue;\n      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n      case 'unit-width-narrow':\n        result.currencyDisplay = 'narrowSymbol';\n        result.unitDisplay = 'narrow';\n        continue;\n      case 'unit-width-short':\n        result.currencyDisplay = 'code';\n        result.unitDisplay = 'short';\n        continue;\n      case 'unit-width-full-name':\n        result.currencyDisplay = 'name';\n        result.unitDisplay = 'long';\n        continue;\n      case 'unit-width-iso-code':\n        result.currencyDisplay = 'symbol';\n        continue;\n    }\n    // Precision\n    // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n    if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n      if (token.options.length > 1) {\n        throw new RangeError('Fraction-precision stems only accept a single optional option');\n      }\n      token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2) {\n        // precision-integer case\n        if (match === '.') {\n          result.maximumFractionDigits = 0;\n        }\n        // .000+ case\n        else if (g2 === '+') {\n          result.minimumFractionDigits = g2.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n          result.maximumFractionDigits = g1.length;\n        }\n        // .00## or .000 case\n        else {\n          result.minimumFractionDigits = g1.length;\n          result.maximumFractionDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n      });\n      if (token.options.length) {\n        result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n      }\n      continue;\n    }\n    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n      continue;\n    }\n    var signOpts = parseSign(token.stem);\n    if (signOpts) {\n      result = __assign(__assign({}, result), signOpts);\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","DATE_TIME_REGEX","parseDateTimeSkeleton","skeleton","result","replace","match","len","era","year","RangeError","month","day","weekday","hour12","hourCycle","hour","minute","second","timeZoneName","icuUnitToEcma","unit","FRACTION_PRECISION_REGEX","SIGNIFICANT_PRECISION_REGEX","parseSignificantPrecision","str","_","g1","g2","minimumSignificantDigits","maximumSignificantDigits","parseSign","signDisplay","currencySign","parseNotationOptions","opt","signOpts","convertNumberSkeletonToNumberFormatOptions","tokens","_i","tokens_1","token","stem","style","currency","options","useGrouping","maximumFractionDigits","notation","compactDisplay","reduce","all","currencyDisplay","unitDisplay","test","minimumFractionDigits"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/intl-messageformat-parser/lib/skeleton.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton) {\n    var result = {};\n    skeleton.replace(DATE_TIME_REGEX, function (match) {\n        var len = match.length;\n        switch (match[0]) {\n            // Era\n            case 'G':\n                result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n                break;\n            // Year\n            case 'y':\n                result.year = len === 2 ? '2-digit' : 'numeric';\n                break;\n            case 'Y':\n            case 'u':\n            case 'U':\n            case 'r':\n                throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');\n            // Quarter\n            case 'q':\n            case 'Q':\n                throw new RangeError('`q/Q` (quarter) patterns are not supported');\n            // Month\n            case 'M':\n            case 'L':\n                result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n                break;\n            // Week\n            case 'w':\n            case 'W':\n                throw new RangeError('`w/W` (week) patterns are not supported');\n            case 'd':\n                result.day = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'D':\n            case 'F':\n            case 'g':\n                throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');\n            // Weekday\n            case 'E':\n                result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';\n                break;\n            case 'e':\n                if (len < 4) {\n                    throw new RangeError('`e..eee` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            case 'c':\n                if (len < 4) {\n                    throw new RangeError('`c..ccc` (weekday) patterns are not supported');\n                }\n                result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];\n                break;\n            // Period\n            case 'a': // AM, PM\n                result.hour12 = true;\n                break;\n            case 'b': // am, pm, noon, midnight\n            case 'B': // flexible day periods\n                throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');\n            // Hour\n            case 'h':\n                result.hourCycle = 'h12';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'H':\n                result.hourCycle = 'h23';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'K':\n                result.hourCycle = 'h11';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'k':\n                result.hourCycle = 'h24';\n                result.hour = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'j':\n            case 'J':\n            case 'C':\n                throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n            // Minute\n            case 'm':\n                result.minute = ['numeric', '2-digit'][len - 1];\n                break;\n            // Second\n            case 's':\n                result.second = ['numeric', '2-digit'][len - 1];\n                break;\n            case 'S':\n            case 'A':\n                throw new RangeError('`S/A` (second) pattenrs are not supported, use `s` instead');\n            // Zone\n            case 'z': // 1..3, 4: specific non-location format\n                result.timeZoneName = len < 4 ? 'short' : 'long';\n                break;\n            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n            case 'O': // 1, 4: miliseconds in day short, long\n            case 'v': // 1, 4: generic non-location format\n            case 'V': // 1, 2, 3, 4: time zone ID or city\n            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n            case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n                throw new RangeError('`Z/O/v/V/X/x` (timeZone) pattenrs are not supported, use `z` instead');\n        }\n        return '';\n    });\n    return result;\n}\nfunction icuUnitToEcma(unit) {\n    return unit.replace(/^(.*?)-/, '');\n}\nvar FRACTION_PRECISION_REGEX = /^\\.(?:(0+)(\\+|#+)?)?$/g;\nvar SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\\+|#+)?$/g;\nfunction parseSignificantPrecision(str) {\n    var result = {};\n    str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {\n        // @@@ case\n        if (typeof g2 !== 'string') {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits = g1.length;\n        }\n        // @@@+ case\n        else if (g2 === '+') {\n            result.minimumSignificantDigits = g1.length;\n        }\n        // .### case\n        else if (g1[0] === '#') {\n            result.maximumSignificantDigits = g1.length;\n        }\n        // .@@## or .@@@ case\n        else {\n            result.minimumSignificantDigits = g1.length;\n            result.maximumSignificantDigits =\n                g1.length + (typeof g2 === 'string' ? g2.length : 0);\n        }\n        return '';\n    });\n    return result;\n}\nfunction parseSign(str) {\n    switch (str) {\n        case 'sign-auto':\n            return {\n                signDisplay: 'auto',\n            };\n        case 'sign-accounting':\n            return {\n                currencySign: 'accounting',\n            };\n        case 'sign-always':\n            return {\n                signDisplay: 'always',\n            };\n        case 'sign-accounting-always':\n            return {\n                signDisplay: 'always',\n                currencySign: 'accounting',\n            };\n        case 'sign-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n            };\n        case 'sign-accounting-except-zero':\n            return {\n                signDisplay: 'exceptZero',\n                currencySign: 'accounting',\n            };\n        case 'sign-never':\n            return {\n                signDisplay: 'never',\n            };\n    }\n}\nfunction parseNotationOptions(opt) {\n    var result = {};\n    var signOpts = parseSign(opt);\n    if (signOpts) {\n        return signOpts;\n    }\n    return result;\n}\n/**\n * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options\n */\nexport function convertNumberSkeletonToNumberFormatOptions(tokens) {\n    var result = {};\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        switch (token.stem) {\n            case 'percent':\n                result.style = 'percent';\n                continue;\n            case 'currency':\n                result.style = 'currency';\n                result.currency = token.options[0];\n                continue;\n            case 'group-off':\n                result.useGrouping = false;\n                continue;\n            case 'precision-integer':\n                result.maximumFractionDigits = 0;\n                continue;\n            case 'measure-unit':\n                result.style = 'unit';\n                result.unit = icuUnitToEcma(token.options[0]);\n                continue;\n            case 'compact-short':\n                result.notation = 'compact';\n                result.compactDisplay = 'short';\n                continue;\n            case 'compact-long':\n                result.notation = 'compact';\n                result.compactDisplay = 'long';\n                continue;\n            case 'scientific':\n                result = __assign(__assign(__assign({}, result), { notation: 'scientific' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'engineering':\n                result = __assign(__assign(__assign({}, result), { notation: 'engineering' }), token.options.reduce(function (all, opt) { return (__assign(__assign({}, all), parseNotationOptions(opt))); }, {}));\n                continue;\n            case 'notation-simple':\n                result.notation = 'standard';\n                continue;\n            // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h\n            case 'unit-width-narrow':\n                result.currencyDisplay = 'narrowSymbol';\n                result.unitDisplay = 'narrow';\n                continue;\n            case 'unit-width-short':\n                result.currencyDisplay = 'code';\n                result.unitDisplay = 'short';\n                continue;\n            case 'unit-width-full-name':\n                result.currencyDisplay = 'name';\n                result.unitDisplay = 'long';\n                continue;\n            case 'unit-width-iso-code':\n                result.currencyDisplay = 'symbol';\n                continue;\n        }\n        // Precision\n        // https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#fraction-precision\n        if (FRACTION_PRECISION_REGEX.test(token.stem)) {\n            if (token.options.length > 1) {\n                throw new RangeError('Fraction-precision stems only accept a single optional option');\n            }\n            token.stem.replace(FRACTION_PRECISION_REGEX, function (match, g1, g2) {\n                // precision-integer case\n                if (match === '.') {\n                    result.maximumFractionDigits = 0;\n                }\n                // .000+ case\n                else if (g2 === '+') {\n                    result.minimumFractionDigits = g2.length;\n                }\n                // .### case\n                else if (g1[0] === '#') {\n                    result.maximumFractionDigits = g1.length;\n                }\n                // .00## or .000 case\n                else {\n                    result.minimumFractionDigits = g1.length;\n                    result.maximumFractionDigits =\n                        g1.length + (typeof g2 === 'string' ? g2.length : 0);\n                }\n                return '';\n            });\n            if (token.options.length) {\n                result = __assign(__assign({}, result), parseSignificantPrecision(token.options[0]));\n            }\n            continue;\n        }\n        if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {\n            result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));\n            continue;\n        }\n        var signOpts = parseSign(token.stem);\n        if (signOpts) {\n            result = __assign(__assign({}, result), signOpts);\n        }\n    }\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}