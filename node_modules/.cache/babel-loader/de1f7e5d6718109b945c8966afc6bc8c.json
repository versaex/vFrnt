{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\components\\\\Captcha\\\\index.tsx\";\nimport * as React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GeetestCaptcha } from '../../containers';\nimport { useSetShouldGeetestReset } from '../../hooks';\nimport { selectConfigs, selectShouldGeetestReset, setGeetestCaptchaSuccess, setRecaptchaSuccess } from '../../modules';\nexport var CaptchaComponent = function CaptchaComponent(props) {\n  var dispatch = useDispatch();\n  var configs = useSelector(selectConfigs);\n  var shouldGeetestReset = useSelector(selectShouldGeetestReset);\n  var reCaptchaRef;\n  reCaptchaRef = React.useRef();\n  var geetestCaptchaRef = React.useRef(null);\n  React.useEffect(function () {\n    if (props.error || props.success) {\n      if (reCaptchaRef.current) {\n        reCaptchaRef.current.reset();\n      }\n    }\n  }, [props.error, props.success, reCaptchaRef]);\n  useSetShouldGeetestReset(props.error, props.success, geetestCaptchaRef);\n  var handleRecaptchaChange = function handleRecaptchaChange(value) {\n    dispatch(setRecaptchaSuccess({\n      captcha_response: value\n    }));\n  };\n  var handleGeetestCaptchaChange = function handleGeetestCaptchaChange(value) {\n    dispatch(setGeetestCaptchaSuccess({\n      captcha_response: value\n    }));\n  };\n  var renderCaptcha = function renderCaptcha() {\n    switch (configs.captcha_type) {\n      case 'recaptcha':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pg-captcha--recaptcha\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(ReCAPTCHA, {\n          ref: reCaptchaRef,\n          sitekey: configs.captcha_id,\n          onChange: handleRecaptchaChange,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }\n        }));\n      case 'geetest':\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pg-captcha--geetest\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(GeetestCaptcha, {\n          ref: geetestCaptchaRef,\n          shouldCaptchaReset: shouldGeetestReset,\n          onSuccess: handleGeetestCaptchaChange,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }\n        }));\n      default:\n        return null;\n    }\n  };\n  return renderCaptcha();\n};\nexport var Captcha = React.memo(CaptchaComponent);","map":{"version":3,"names":["React","ReCAPTCHA","useDispatch","useSelector","GeetestCaptcha","useSetShouldGeetestReset","selectConfigs","selectShouldGeetestReset","setGeetestCaptchaSuccess","setRecaptchaSuccess","CaptchaComponent","props","dispatch","configs","shouldGeetestReset","reCaptchaRef","useRef","geetestCaptchaRef","useEffect","error","success","current","reset","handleRecaptchaChange","value","captcha_response","handleGeetestCaptchaChange","renderCaptcha","captcha_type","captcha_id","Captcha","memo"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/components/Captcha/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GeetestCaptcha } from '../../containers';\nimport { useSetShouldGeetestReset } from '../../hooks';\nimport {\n    GeetestCaptchaResponse,\n    selectConfigs,\n    selectShouldGeetestReset,\n    setGeetestCaptchaSuccess,\n    setRecaptchaSuccess,\n} from '../../modules';\n\nexport const CaptchaComponent = props => {\n    const dispatch = useDispatch();\n    const configs = useSelector(selectConfigs);\n    const shouldGeetestReset = useSelector(selectShouldGeetestReset);\n\n    let reCaptchaRef;\n\n    reCaptchaRef = React.useRef();\n    const geetestCaptchaRef = React.useRef(null);\n\n    React.useEffect(() => {\n        if (props.error || props.success) {\n            if (reCaptchaRef.current) {\n                reCaptchaRef.current.reset();\n            }\n        }\n    }, [props.error, props.success, reCaptchaRef]);\n\n    useSetShouldGeetestReset(props.error, props.success, geetestCaptchaRef);\n\n    const handleRecaptchaChange = (value: string) => {\n        dispatch(setRecaptchaSuccess({ captcha_response: value }));\n    };\n\n    const handleGeetestCaptchaChange = (value?: GeetestCaptchaResponse) => {\n        dispatch(setGeetestCaptchaSuccess({ captcha_response: value }));\n    };\n\n    const renderCaptcha = () => {\n        switch (configs.captcha_type) {\n            case 'recaptcha':\n                return (\n                    <div className=\"pg-captcha--recaptcha\">\n                        <ReCAPTCHA\n                            ref={reCaptchaRef}\n                            sitekey={configs.captcha_id}\n                            onChange={handleRecaptchaChange}\n                        />\n                    </div>\n                );\n            case 'geetest':\n                return (\n                    <div className=\"pg-captcha--geetest\">\n                        <GeetestCaptcha\n                            ref={geetestCaptchaRef}\n                            shouldCaptchaReset={shouldGeetestReset}\n                            onSuccess={handleGeetestCaptchaChange}\n                        />\n                    </div>\n                );\n            default:\n                return null;\n        }\n    };\n\n    return renderCaptcha();\n};\n\nexport const Captcha = React.memo(CaptchaComponent);\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,wBAAwB,QAAQ,aAAa;AACtD,SAEIC,aAAa,EACbC,wBAAwB,EACxBC,wBAAwB,EACxBC,mBAAmB,QAChB,eAAe;AAEtB,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAGC,KAAK,EAAI;EACrC,IAAMC,QAAQ,GAAGV,WAAW,EAAE;EAC9B,IAAMW,OAAO,GAAGV,WAAW,CAACG,aAAa,CAAC;EAC1C,IAAMQ,kBAAkB,GAAGX,WAAW,CAACI,wBAAwB,CAAC;EAEhE,IAAIQ,YAAY;EAEhBA,YAAY,GAAGf,KAAK,CAACgB,MAAM,EAAE;EAC7B,IAAMC,iBAAiB,GAAGjB,KAAK,CAACgB,MAAM,CAAC,IAAI,CAAC;EAE5ChB,KAAK,CAACkB,SAAS,CAAC,YAAM;IAClB,IAAIP,KAAK,CAACQ,KAAK,IAAIR,KAAK,CAACS,OAAO,EAAE;MAC9B,IAAIL,YAAY,CAACM,OAAO,EAAE;QACtBN,YAAY,CAACM,OAAO,CAACC,KAAK,EAAE;MAChC;IACJ;EACJ,CAAC,EAAE,CAACX,KAAK,CAACQ,KAAK,EAAER,KAAK,CAACS,OAAO,EAAEL,YAAY,CAAC,CAAC;EAE9CV,wBAAwB,CAACM,KAAK,CAACQ,KAAK,EAAER,KAAK,CAACS,OAAO,EAAEH,iBAAiB,CAAC;EAEvE,IAAMM,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIC,KAAa,EAAK;IAC7CZ,QAAQ,CAACH,mBAAmB,CAAC;MAAEgB,gBAAgB,EAAED;IAAM,CAAC,CAAC,CAAC;EAC9D,CAAC;EAED,IAAME,0BAA0B,GAAG,SAA7BA,0BAA0B,CAAIF,KAA8B,EAAK;IACnEZ,QAAQ,CAACJ,wBAAwB,CAAC;MAAEiB,gBAAgB,EAAED;IAAM,CAAC,CAAC,CAAC;EACnE,CAAC;EAED,IAAMG,aAAa,GAAG,SAAhBA,aAAa,GAAS;IACxB,QAAQd,OAAO,CAACe,YAAY;MACxB,KAAK,WAAW;QACZ,oBACI;UAAK,SAAS,EAAC,uBAAuB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBAClC,oBAAC,SAAS;UACN,GAAG,EAAEb,YAAa;UAClB,OAAO,EAAEF,OAAO,CAACgB,UAAW;UAC5B,QAAQ,EAAEN,qBAAsB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAClC,CACA;MAEd,KAAK,SAAS;QACV,oBACI;UAAK,SAAS,EAAC,qBAAqB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBAChC,oBAAC,cAAc;UACX,GAAG,EAAEN,iBAAkB;UACvB,kBAAkB,EAAEH,kBAAmB;UACvC,SAAS,EAAEY,0BAA2B;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACxC,CACA;MAEd;QACI,OAAO,IAAI;IAAC;EAExB,CAAC;EAED,OAAOC,aAAa,EAAE;AAC1B,CAAC;AAED,OAAO,IAAMG,OAAO,GAAG9B,KAAK,CAAC+B,IAAI,CAACrB,gBAAgB,CAAC"},"metadata":{},"sourceType":"module"}