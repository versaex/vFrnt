{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar buffer = require('buffer');\nvar compare = Buffer.compare || require('buffer-compare');\nvar errors = require('../errors');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar Sighash = require('./sighash');\nvar Address = require('../address');\nvar UnspentOutput = require('./unspentoutput');\nvar Input = require('./input');\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nvar Output = require('./output');\nvar Script = require('../script');\nvar PrivateKey = require('../privatekey');\nvar BN = require('../crypto/bn');\n\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\nfunction Transaction(serialized) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\nvar CURRENT_VERSION = 1;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 150;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 21000000 * 1e8;\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 100000;\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\nTransaction.shallowCopy = function (transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function get() {\n    return new BufferReader(this._getHash()).readReverse().toString('hex');\n  }\n};\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function get() {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function () {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\nTransaction.prototype._getHash = function () {\n  return Hash.sha256sha256(this.toBuffer());\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\nTransaction.prototype.serialize = function (unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function () {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\nTransaction.prototype.checkedSerialize = function (opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' - For more information please see: ' + 'https://bitcore.io/api/lib/transaction#serialization-checks';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\nTransaction.prototype.invalidSatoshis = function () {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\nTransaction.prototype.getSerializationError = function (opts) {\n  opts = opts || {};\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n  return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);\n};\nTransaction.prototype._hasFeeError = function (opts, unspent) {\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different('Unspent value is ' + unspent + ' but specified fee is ' + this._fee);\n  }\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing('Fee is too large and no change address was provided');\n      }\n      return new errors.Transaction.FeeError.TooLarge('expected less than ' + maximumFee + ' but got ' + unspent);\n    }\n  }\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall('expected more than ' + minimumFee + ' but got ' + unspent);\n    }\n  }\n};\nTransaction.prototype._missingChange = function () {\n  return !this._changeScript;\n};\nTransaction.prototype._hasDustOutputs = function (opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\nTransaction.prototype._isMissingSignatures = function (opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\nTransaction.prototype.inspect = function () {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\nTransaction.prototype.toBuffer = function () {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer).toBuffer();\n};\nTransaction.prototype.toBufferWriter = function (writer) {\n  writer.writeInt32LE(this.version);\n  writer.writeVarintNum(this.inputs.length);\n  _.each(this.inputs, function (input) {\n    input.toBufferWriter(writer);\n  });\n  writer.writeVarintNum(this.outputs.length);\n  _.each(this.outputs, function (output) {\n    output.toBufferWriter(writer);\n  });\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\nTransaction.prototype.fromBuffer = function (buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\nTransaction.prototype.fromBufferReader = function (reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  var i, sizeTxIns, sizeTxOuts;\n  this.version = reader.readInt32LE();\n  sizeTxIns = reader.readVarintNum();\n  for (i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n  sizeTxOuts = reader.readVarintNum();\n  for (i = 0; i < sizeTxOuts; i++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function (input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function (output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\nTransaction.prototype.fromObject = function fromObject(arg) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n  _.each(transaction.inputs, function (input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if (script.isPublicKeyHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isScriptHashOut() && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(input, input.publicKeys, input.threshold, input.signatures);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    self.addInput(txin);\n  });\n  _.each(transaction.outputs, function (output) {\n    self.addOutput(new Output(output));\n  });\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\nTransaction.prototype._checkConsistency = function (arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript);\n    $.checkState(this.outputs[this._changeIndex]);\n    $.checkState(this.outputs[this._changeIndex].script.toString() === this._changeScript.toString());\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash');\n  }\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilDate = function (time) {\n  $.checkArgument(time);\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n  this.nLockTime = time;\n  return this;\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilBlockHeight = function (height) {\n  $.checkArgument(_.isNumber(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n  this.nLockTime = height;\n  return this;\n};\n\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\nTransaction.prototype.getLockTime = function () {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\nTransaction.prototype.fromString = function (string) {\n  this.fromBuffer(new buffer.Buffer(string, 'hex'));\n};\nTransaction.prototype._newTransaction = function () {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n */\nTransaction.prototype.from = function (utxo, pubkeys, threshold) {\n  if (_.isArray(utxo)) {\n    var self = this;\n    _.each(utxo, function (utxo) {\n      self.from(utxo, pubkeys, threshold);\n    });\n    return this;\n  }\n  var exists = _.some(this.inputs, function (input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n  return this;\n};\nTransaction.prototype._fromNonP2SH = function (utxo) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isPublicKeyHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }));\n};\nTransaction.prototype._fromMultisigUtxo = function (utxo, pubkeys, threshold) {\n  $.checkArgument(threshold <= pubkeys.length, 'Number of required signatures must be greater than the number of public keys');\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isMultisigOut()) {\n    clazz = MultiSigInput;\n  } else if (utxo.script.isScriptHashOut()) {\n    clazz = MultiSigScriptHashInput;\n  } else {\n    throw new Error(\"@TODO\");\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }, pubkeys, threshold));\n};\n\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\nTransaction.prototype.addInput = function (input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\nTransaction.prototype.uncheckedAddInput = function (input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\nTransaction.prototype.hasAllUtxoInfo = function () {\n  return _.every(this.inputs.map(function (input) {\n    return !!input.output;\n  }));\n};\n\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.fee = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerKb = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.change = function (address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * @return {Output} change output, if it exists\n */\nTransaction.prototype.getChangeOutput = function () {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.to = function (address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n    _.each(address, function (to) {\n      self.to(to.address, to.satoshis);\n    });\n    return this;\n  }\n  $.checkArgument(JSUtil.isNaturalNumber(amount), 'Amount is expected to be a positive integer');\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addData = function (value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addOutput = function (output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.clearOutputs = function () {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\nTransaction.prototype._addOutput = function (output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\nTransaction.prototype._getOutputAmount = function () {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n    _.each(this.outputs, function (output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n  return this._outputAmount;\n};\n\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\nTransaction.prototype._getInputAmount = function () {\n  if (_.isUndefined(this._inputAmount)) {\n    var self = this;\n    this._inputAmount = 0;\n    _.each(this.inputs, function (input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      self._inputAmount += input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\nTransaction.prototype._updateChangeOutput = function () {\n  if (!this._changeScript) {\n    return;\n  }\n  this._clearSignatures();\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > 0) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\nTransaction.prototype.getFee = function () {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n  var available = this._getUnspentValue();\n  return Transaction._estimateFee(estimatedSize, available, this._feePerKb);\n};\nTransaction.prototype._getUnspentValue = function () {\n  return this._getInputAmount() - this._getOutputAmount();\n};\nTransaction.prototype._clearSignatures = function () {\n  _.each(this.inputs, function (input) {\n    input.clearSignatures();\n  });\n};\nTransaction._estimateFee = function (size, amountAvailable, feePerKb) {\n  var fee = Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n  if (amountAvailable > fee) {\n    size += Transaction.CHANGE_OUTPUT_MAX_SIZE;\n  }\n  return Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n};\nTransaction.prototype._estimateSize = function () {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n  _.each(this.inputs, function (input) {\n    result += input._estimateSize();\n  });\n  _.each(this.outputs, function (output) {\n    result += output.script.toBuffer().length + 9;\n  });\n  return result;\n};\nTransaction.prototype._removeOutput = function (index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\nTransaction.prototype.removeOutput = function (index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\nTransaction.prototype.sort = function () {\n  this.sortInputs(function (inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    copy.sort(function (first, second) {\n      return compare(first.prevTxId, second.prevTxId) || first.outputIndex - second.outputIndex;\n    });\n    return copy;\n  });\n  this.sortOutputs(function (outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    copy.sort(function (first, second) {\n      return first.satoshis - second.satoshis || compare(first.script.toBuffer(), second.script.toBuffer());\n    });\n    return copy;\n  });\n  return this;\n};\n\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\nTransaction.prototype.shuffleOutputs = function () {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortOutputs = function (sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortInputs = function (sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\nTransaction.prototype._newOutputOrder = function (newOutputs) {\n  var isInvalidSorting = this.outputs.length !== newOutputs.length || _.difference(this.outputs, newOutputs).length !== 0;\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n  this.outputs = newOutputs;\n  return this;\n};\nTransaction.prototype.removeInput = function (txId, outputIndex) {\n  var index;\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function (input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.sign = function (privateKey, sigtype) {\n  $.checkState(this.hasAllUtxoInfo());\n  var self = this;\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function (privateKey) {\n      self.sign(privateKey, sigtype);\n    });\n    return this;\n  }\n  _.each(this.getSignatures(privateKey, sigtype), function (signature) {\n    self.applySignature(signature);\n  });\n  return this;\n};\nTransaction.prototype.getSignatures = function (privKey, sigtype) {\n  privKey = new PrivateKey(privKey);\n  // By default, signs using ALL|FORKID\n  sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData), function (signature) {\n      results.push(signature);\n    });\n  });\n  return results;\n};\n\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.applySignature = function (signature) {\n  this.inputs[signature.inputIndex].addSignature(this, signature);\n  return this;\n};\nTransaction.prototype.isFullySigned = function () {\n  _.each(this.inputs, function (input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n    }\n  });\n  return _.every(_.map(this.inputs, function (input) {\n    return input.isFullySigned();\n  }));\n};\nTransaction.prototype.isValidSignature = function (signature) {\n  var self = this;\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature);\n};\n\n/**\n * @returns {bool} whether the signature is valid for this transaction input\n */\nTransaction.prototype.verifySignature = function (sig, pubkey, nin, subscript) {\n  return Sighash.verify(this, sig, pubkey, nin, subscript);\n};\n\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\nTransaction.prototype.verify = function () {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\nTransaction.prototype.isCoinbase = function () {\n  return this.inputs.length === 1 && this.inputs[0].isNull();\n};\n\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\nTransaction.prototype.isRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\nTransaction.prototype.enableRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n  return this;\n};\nmodule.exports = Transaction;","map":{"version":3,"names":["_","require","$","buffer","compare","Buffer","errors","BufferUtil","JSUtil","BufferReader","BufferWriter","Hash","Signature","Sighash","Address","UnspentOutput","Input","PublicKeyHashInput","PublicKeyHash","PublicKeyInput","PublicKey","MultiSigScriptHashInput","MultiSigScriptHash","MultiSigInput","MultiSig","Output","Script","PrivateKey","BN","Transaction","serialized","inputs","outputs","_inputAmount","undefined","_outputAmount","shallowCopy","isHexa","fromString","isBuffer","fromBuffer","isObject","fromObject","InvalidArgument","_newTransaction","CURRENT_VERSION","DEFAULT_NLOCKTIME","MAX_BLOCK_SIZE","DUST_AMOUNT","FEE_SECURITY_MARGIN","MAX_MONEY","NLOCKTIME_BLOCKHEIGHT_LIMIT","NLOCKTIME_MAX_VALUE","FEE_PER_KB","CHANGE_OUTPUT_MAX_SIZE","MAXIMUM_EXTRA_SIZE","transaction","copy","toBuffer","hashProperty","configurable","enumerable","get","_getHash","readReverse","toString","Object","defineProperty","prototype","ioProperty","_getInputAmount","_getOutputAmount","sha256sha256","serialize","unsafe","disableAll","uncheckedSerialize","checkedSerialize","opts","serializationError","getSerializationError","message","invalidSatoshis","invalid","i","length","InvalidSatoshis","unspent","_getUnspentValue","unspentError","disableMoreOutputThanInput","InvalidOutputAmountSum","_hasFeeError","_hasDustOutputs","_isMissingSignatures","isUndefined","_fee","FeeError","Different","disableLargeFees","maximumFee","Math","floor","_estimateFee","_missingChange","ChangeAddressMissing","TooLarge","disableSmallFees","minimumFee","ceil","TooSmall","_changeScript","disableDustOutputs","index","output","satoshis","script","isDataOut","DustOutputs","disableIsFullySigned","isFullySigned","MissingSignatures","inspect","writer","toBufferWriter","writeInt32LE","version","writeVarintNum","each","input","writeUInt32LE","nLockTime","reader","fromBufferReader","checkArgument","finished","sizeTxIns","sizeTxOuts","readInt32LE","readVarintNum","push","readUInt32LE","toObject","toJSON","forEach","obj","hash","changeScript","_changeIndex","changeIndex","fee","arg","self","uncheckedAddInput","txin","isPublicKeyHashOut","isScriptHashOut","publicKeys","threshold","signatures","isPublicKeyOut","UnsupportedScript","addInput","addOutput","_checkConsistency","checkState","lockUntilDate","time","isNumber","LockTimeTooEarly","isDate","getTime","sequenceNumber","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","lockUntilBlockHeight","height","BlockHeightTooHigh","NLockTimeOutOfRange","getLockTime","Date","string","from","utxo","pubkeys","isArray","exists","some","prevTxId","txId","outputIndex","_fromMultisigUtxo","_fromNonP2SH","clazz","empty","isMultisigOut","Error","outputScript","checkArgumentType","NeedMoreInfo","_updateChangeOutput","hasAllUtxoInfo","every","map","amount","feePerKb","_feePerKb","change","address","fromAddress","getChangeOutput","to","isNaturalNumber","addData","value","buildDataOut","_addOutput","clearOutputs","_clearSignatures","MissingPreviousOutput","_removeOutput","available","getFee","changeAmount","isCoinbase","estimatedSize","_estimateSize","clearSignatures","size","amountAvailable","result","without","removeOutput","sort","sortInputs","Array","concat","apply","first","second","sortOutputs","shuffleOutputs","shuffle","sortingFunction","outs","_newOutputOrder","newOutputs","isInvalidSorting","difference","InvalidSorting","changeOutput","findIndex","removeInput","InvalidIndex","sign","privateKey","sigtype","getSignatures","signature","applySignature","privKey","SIGHASH_ALL","SIGHASH_FORKID","results","hashData","sha256ripemd160","publicKey","forEachInput","inputIndex","addSignature","UnableToVerifySignature","isValidSignature","verifySignature","sig","pubkey","nin","subscript","verify","valueoutbn","txout","_satoshisBN","gt","add","txinmap","inputid","buf","_scriptBuffer","isNull","isRBF","MAXINT","enableRBF","DEFAULT_RBF_SEQNUMBER","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/transaction/transaction.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar buffer = require('buffer');\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar Sighash = require('./sighash');\n\nvar Address = require('../address');\nvar UnspentOutput = require('./unspentoutput');\nvar Input = require('./input');\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nvar Output = require('./output');\nvar Script = require('../script');\nvar PrivateKey = require('../privatekey');\nvar BN = require('../crypto/bn');\n\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\nfunction Transaction(serialized) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 1;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 150;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 21000000 * 1e8;\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 100000;\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\nTransaction.shallowCopy = function(transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return new BufferReader(this._getHash()).readReverse().toString('hex');\n  }\n};\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\n\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function() {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\nTransaction.prototype._getHash = function() {\n  return Hash.sha256sha256(this.toBuffer());\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\nTransaction.prototype.serialize = function(unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\nTransaction.prototype.checkedSerialize = function(opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' - For more information please see: ' +\n      'https://bitcore.io/api/lib/transaction#serialization-checks';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function() {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\nTransaction.prototype.getSerializationError = function(opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError ||\n    this._hasDustOutputs(opts) ||\n    this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function(opts, unspent) {\n\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different(\n      'Unspent value is ' + unspent + ' but specified fee is ' + this._fee\n    );\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing(\n          'Fee is too large and no change address was provided'\n        );\n      }\n      return new errors.Transaction.FeeError.TooLarge(\n        'expected less than ' + maximumFee + ' but got ' + unspent\n      );\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall(\n        'expected more than ' + minimumFee + ' but got ' + unspent\n      );\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function() {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function(opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function(opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function() {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function() {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer).toBuffer();\n};\n\nTransaction.prototype.toBufferWriter = function(writer) {\n  writer.writeInt32LE(this.version);\n  writer.writeVarintNum(this.inputs.length);\n  _.each(this.inputs, function(input) {\n    input.toBufferWriter(writer);\n  });\n  writer.writeVarintNum(this.outputs.length);\n  _.each(this.outputs, function(output) {\n    output.toBufferWriter(writer);\n  });\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function(buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function(reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  var i, sizeTxIns, sizeTxOuts;\n\n  this.version = reader.readInt32LE();\n  sizeTxIns = reader.readVarintNum();\n  for (i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n  sizeTxOuts = reader.readVarintNum();\n  for (i = 0; i < sizeTxOuts; i++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function(input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function(output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n  _.each(transaction.inputs, function(input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if (script.isPublicKeyHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isScriptHashOut() && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(\n        input, input.publicKeys, input.threshold, input.signatures\n      );\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    self.addInput(txin);\n  });\n  _.each(transaction.outputs, function(output) {\n    self.addOutput(new Output(output));\n  });\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function(arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript);\n    $.checkState(this.outputs[this._changeIndex]);\n    $.checkState(this.outputs[this._changeIndex].script.toString() ===\n      this._changeScript.toString());\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash');\n  }\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilDate = function(time) {\n  $.checkArgument(time);\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilBlockHeight = function(height) {\n  $.checkArgument(_.isNumber(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n\n  this.nLockTime = height;\n  return this;\n};\n\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\nTransaction.prototype.getLockTime = function() {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function(string) {\n  this.fromBuffer(new buffer.Buffer(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function() {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n */\nTransaction.prototype.from = function(utxo, pubkeys, threshold) {\n  if (_.isArray(utxo)) {\n    var self = this;\n    _.each(utxo, function(utxo) {\n      self.from(utxo, pubkeys, threshold);\n    });\n    return this;\n  }\n  var exists = _.some(this.inputs, function(input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n  return this;\n};\n\nTransaction.prototype._fromNonP2SH = function(utxo) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isPublicKeyHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }));\n};\n\nTransaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold) {\n  $.checkArgument(threshold <= pubkeys.length,\n    'Number of required signatures must be greater than the number of public keys');\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isMultisigOut()) {\n    clazz = MultiSigInput;\n  } else if (utxo.script.isScriptHashOut()) {\n    clazz = MultiSigScriptHashInput;\n  } else {\n    throw new Error(\"@TODO\");\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }, pubkeys, threshold));\n};\n\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\nTransaction.prototype.addInput = function(input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\nTransaction.prototype.uncheckedAddInput = function(input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\nTransaction.prototype.hasAllUtxoInfo = function() {\n  return _.every(this.inputs.map(function(input) {\n    return !!input.output;\n  }));\n};\n\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.fee = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerKb = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.change = function(address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * @return {Output} change output, if it exists\n */\nTransaction.prototype.getChangeOutput = function() {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.to = function(address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n    _.each(address, function(to) {\n      self.to(to.address, to.satoshis);\n    });\n    return this;\n  }\n\n  $.checkArgument(\n    JSUtil.isNaturalNumber(amount),\n    'Amount is expected to be a positive integer'\n  );\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addData = function(value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addOutput = function(output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.clearOutputs = function() {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n\nTransaction.prototype._addOutput = function(output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\nTransaction.prototype._getOutputAmount = function() {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n    _.each(this.outputs, function(output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n  return this._outputAmount;\n};\n\n\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\nTransaction.prototype._getInputAmount = function() {\n  if (_.isUndefined(this._inputAmount)) {\n    var self = this;\n    this._inputAmount = 0;\n    _.each(this.inputs, function(input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      self._inputAmount += input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function() {\n  if (!this._changeScript) {\n    return;\n  }\n  this._clearSignatures();\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > 0) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\nTransaction.prototype.getFee = function() {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\nTransaction.prototype._estimateFee = function() {\n  var estimatedSize = this._estimateSize();\n  var available = this._getUnspentValue();\n  return Transaction._estimateFee(estimatedSize, available, this._feePerKb);\n};\n\nTransaction.prototype._getUnspentValue = function() {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function() {\n  _.each(this.inputs, function(input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction._estimateFee = function(size, amountAvailable, feePerKb) {\n  var fee = Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n  if (amountAvailable > fee) {\n    size += Transaction.CHANGE_OUTPUT_MAX_SIZE;\n  }\n  return Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n};\n\nTransaction.prototype._estimateSize = function() {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n  _.each(this.inputs, function(input) {\n    result += input._estimateSize();\n  });\n  _.each(this.outputs, function(output) {\n    result += output.script.toBuffer().length + 9;\n  });\n  return result;\n};\n\nTransaction.prototype._removeOutput = function(index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function(index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\nTransaction.prototype.sort = function() {\n  this.sortInputs(function(inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    copy.sort(function(first, second) {\n      return compare(first.prevTxId, second.prevTxId)\n        || first.outputIndex - second.outputIndex;\n    });\n    return copy;\n  });\n  this.sortOutputs(function(outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    copy.sort(function(first, second) {\n      return first.satoshis - second.satoshis\n        || compare(first.script.toBuffer(), second.script.toBuffer());\n    });\n    return copy;\n  });\n  return this;\n};\n\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\nTransaction.prototype.shuffleOutputs = function() {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortOutputs = function(sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortInputs = function(sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function(newOutputs) {\n  var isInvalidSorting = (this.outputs.length !== newOutputs.length ||\n                          _.difference(this.outputs, newOutputs).length !== 0);\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function(txId, outputIndex) {\n  var index;\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function(input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.sign = function(privateKey, sigtype) {\n  $.checkState(this.hasAllUtxoInfo());\n  var self = this;\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function(privateKey) {\n      self.sign(privateKey, sigtype);\n    });\n    return this;\n  }\n  _.each(this.getSignatures(privateKey, sigtype), function(signature) {\n    self.applySignature(signature);\n  });\n  return this;\n};\n\nTransaction.prototype.getSignatures = function(privKey, sigtype) {\n  privKey = new PrivateKey(privKey);\n  // By default, signs using ALL|FORKID\n  sigtype = sigtype || (Signature.SIGHASH_ALL |  Signature.SIGHASH_FORKID);\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData), function(signature) {\n      results.push(signature);\n    });\n  });\n  return results;\n};\n\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.applySignature = function(signature) {\n  this.inputs[signature.inputIndex].addSignature(this, signature);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function() {\n  _.each(this.inputs, function(input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature(\n        'Unrecognized script kind, or not enough information to execute script.' +\n        'This usually happens when creating a transaction from a serialized transaction'\n      );\n    }\n  });\n  return _.every(_.map(this.inputs, function(input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function(signature) {\n  var self = this;\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature(\n      'Unrecognized script kind, or not enough information to execute script.' +\n      'This usually happens when creating a transaction from a serialized transaction'\n    );\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature);\n};\n\n/**\n * @returns {bool} whether the signature is valid for this transaction input\n */\nTransaction.prototype.verifySignature = function(sig, pubkey, nin, subscript) {\n  return Sighash.verify(this, sig, pubkey, nin, subscript);\n};\n\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\nTransaction.prototype.verify = function() {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\nTransaction.prototype.isCoinbase = function() {\n  return (this.inputs.length === 1 && this.inputs[0].isNull());\n};\n\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\nTransaction.prototype.isRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\nTransaction.prototype.enableRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n  return this;\n};\n\nmodule.exports = Transaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}