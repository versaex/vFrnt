{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport { SET_MOBILE_WALLET_UI, WALLETS_ADDRESS_DATA, WALLETS_ADDRESS_DATA_WS, WALLETS_ADDRESS_ERROR, WALLETS_ADDRESS_FETCH, WALLETS_DATA, WALLETS_DATA_WS, WALLETS_ERROR, WALLETS_FETCH, WALLETS_RESET, WALLETS_WITHDRAW_CCY_DATA, WALLETS_WITHDRAW_CCY_ERROR, WALLETS_WITHDRAW_CCY_FETCH } from './constants';\nexport var initialWalletsState = {\n  wallets: {\n    list: [],\n    loading: false,\n    withdrawSuccess: false,\n    mobileWalletChosen: ''\n  }\n};\nvar getUpdatedWalletsList = function getUpdatedWalletsList(list, payload) {\n  var _payload$currencies;\n  if (list.length && ((_payload$currencies = payload.currencies) === null || _payload$currencies === void 0 ? void 0 : _payload$currencies.length)) {\n    return list.map(function (wallet) {\n      if (payload.currencies.includes(wallet.currency)) {\n        var depositAddress = {\n          address: payload.address,\n          currencies: payload.currencies\n        };\n        if (payload.state) {\n          depositAddress = _objectSpread(_objectSpread({}, depositAddress), {}, {\n            state: payload.state\n          });\n        }\n        return _objectSpread(_objectSpread({}, wallet), {}, {\n          deposit_address: depositAddress\n        });\n      }\n      return wallet;\n    });\n  }\n  return list;\n};\nvar walletsListReducer = function walletsListReducer(state, action) {\n  switch (action.type) {\n    case WALLETS_ADDRESS_FETCH:\n    case WALLETS_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        timestamp: Math.floor(Date.now() / 1000)\n      });\n    case WALLETS_WITHDRAW_CCY_FETCH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        withdrawSuccess: false\n      });\n    case WALLETS_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          list: action.payload\n        });\n      }\n    case WALLETS_DATA_WS:\n      {\n        var updatedList = state.list;\n        if (state.list.length) {\n          updatedList = state.list.map(function (wallet) {\n            var updatedWallet = wallet;\n            var payloadCurrencies = Object.keys(action.payload.balances);\n            if (payloadCurrencies.length) {\n              payloadCurrencies.some(function (value) {\n                var targetWallet = action.payload.balances[value];\n                if (value === wallet.currency) {\n                  updatedWallet = _objectSpread(_objectSpread({}, updatedWallet), {}, {\n                    balance: targetWallet && targetWallet[0] ? targetWallet[0] : updatedWallet.balance,\n                    locked: targetWallet && targetWallet[1] ? targetWallet[1] : updatedWallet.locked\n                  });\n                  return true;\n                }\n                return false;\n              });\n            }\n            return updatedWallet;\n          });\n        }\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          list: updatedList\n        });\n      }\n    case WALLETS_ADDRESS_DATA:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          list: getUpdatedWalletsList(state.list, action.payload),\n          loading: false\n        });\n      }\n    case WALLETS_WITHDRAW_CCY_DATA:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        withdrawSuccess: true\n      });\n    case WALLETS_ADDRESS_DATA_WS:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          list: getUpdatedWalletsList(state.list, action.payload),\n          loading: false\n        });\n      }\n    case WALLETS_WITHDRAW_CCY_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        withdrawSuccess: false,\n        error: action.error\n      });\n    case WALLETS_ADDRESS_ERROR:\n    case WALLETS_ERROR:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        error: action.error\n      });\n    case SET_MOBILE_WALLET_UI:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mobileWalletChosen: action.payload\n      });\n    default:\n      return state;\n  }\n};\nexport var walletsReducer = function walletsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialWalletsState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case WALLETS_FETCH:\n    case WALLETS_DATA:\n    case WALLETS_DATA_WS:\n    case WALLETS_ERROR:\n    case WALLETS_ADDRESS_FETCH:\n    case WALLETS_ADDRESS_DATA:\n    case WALLETS_ADDRESS_DATA_WS:\n    case WALLETS_ADDRESS_ERROR:\n    case WALLETS_WITHDRAW_CCY_FETCH:\n    case WALLETS_WITHDRAW_CCY_DATA:\n    case SET_MOBILE_WALLET_UI:\n    case WALLETS_WITHDRAW_CCY_ERROR:\n      var walletsListState = _objectSpread({}, state.wallets);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        wallets: walletsListReducer(walletsListState, action)\n      });\n    case WALLETS_RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        wallets: {\n          list: [],\n          loading: false,\n          withdrawSuccess: false,\n          mobileWalletChosen: ''\n        }\n      });\n    default:\n      return state;\n  }\n};","map":{"version":3,"names":["SET_MOBILE_WALLET_UI","WALLETS_ADDRESS_DATA","WALLETS_ADDRESS_DATA_WS","WALLETS_ADDRESS_ERROR","WALLETS_ADDRESS_FETCH","WALLETS_DATA","WALLETS_DATA_WS","WALLETS_ERROR","WALLETS_FETCH","WALLETS_RESET","WALLETS_WITHDRAW_CCY_DATA","WALLETS_WITHDRAW_CCY_ERROR","WALLETS_WITHDRAW_CCY_FETCH","initialWalletsState","wallets","list","loading","withdrawSuccess","mobileWalletChosen","getUpdatedWalletsList","payload","length","currencies","map","wallet","includes","currency","depositAddress","address","state","deposit_address","walletsListReducer","action","type","timestamp","Math","floor","Date","now","updatedList","updatedWallet","payloadCurrencies","Object","keys","balances","some","value","targetWallet","balance","locked","error","walletsReducer","walletsListState"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/modules/user/wallets/reducer.ts"],"sourcesContent":["import { CommonError } from '../../types';\nimport { WalletsAction } from './actions';\nimport {\n    SET_MOBILE_WALLET_UI,\n    WALLETS_ADDRESS_DATA,\n    WALLETS_ADDRESS_DATA_WS,\n    WALLETS_ADDRESS_ERROR,\n    WALLETS_ADDRESS_FETCH,\n    WALLETS_DATA,\n    WALLETS_DATA_WS,\n    WALLETS_ERROR,\n    WALLETS_FETCH,\n    WALLETS_RESET,\n    WALLETS_WITHDRAW_CCY_DATA,\n    WALLETS_WITHDRAW_CCY_ERROR,\n    WALLETS_WITHDRAW_CCY_FETCH,\n} from './constants';\nimport { Wallet, WalletAddress } from './types';\n\nexport interface WalletsState {\n    wallets: {\n        list: Wallet[];\n        loading: boolean;\n        withdrawSuccess: boolean;\n        error?: CommonError;\n        mobileWalletChosen: string;\n        timestamp?: number;\n    };\n}\n\nexport const initialWalletsState: WalletsState = {\n    wallets: {\n        list: [],\n        loading: false,\n        withdrawSuccess: false,\n        mobileWalletChosen: '',\n    },\n};\n\nconst getUpdatedWalletsList = (list: Wallet[], payload: WalletAddress) => {\n    if (list.length && payload.currencies?.length) {\n        return list.map(wallet => {\n            if (payload.currencies.includes(wallet.currency)) {\n                let depositAddress: WalletAddress = {\n                    address: payload.address,\n                    currencies: payload.currencies,\n                };\n\n                if (payload.state) {\n                    depositAddress = {\n                        ...depositAddress,\n                        state: payload.state,\n                    };\n                }\n\n                return {\n                    ...wallet,\n                    deposit_address: depositAddress,\n                };\n            }\n\n            return wallet;\n        });\n    }\n\n    return list;\n};\n\nconst walletsListReducer = (state: WalletsState['wallets'], action: WalletsAction): WalletsState['wallets'] => {\n    switch (action.type) {\n        case WALLETS_ADDRESS_FETCH:\n        case WALLETS_FETCH:\n            return {\n                ...state,\n                loading: true,\n                timestamp: Math.floor(Date.now() / 1000),\n            };\n        case WALLETS_WITHDRAW_CCY_FETCH:\n            return {\n                ...state,\n                loading: true,\n                withdrawSuccess: false,\n            };\n        case WALLETS_DATA: {\n            return {\n                ...state,\n                loading: false,\n                list: action.payload,\n            };\n        }\n        case WALLETS_DATA_WS: {\n            let updatedList = state.list;\n\n            if (state.list.length) {\n                updatedList = state.list.map(wallet => {\n                    let updatedWallet = wallet;\n                    const payloadCurrencies = Object.keys(action.payload.balances);\n\n                    if (payloadCurrencies.length) {\n                        payloadCurrencies.some(value => {\n                            const targetWallet = action.payload.balances[value];\n\n                            if (value === wallet.currency) {\n                                updatedWallet = {\n                                    ...updatedWallet,\n                                    balance: targetWallet && targetWallet[0] ? targetWallet[0] : updatedWallet.balance,\n                                    locked: targetWallet && targetWallet[1] ? targetWallet[1] : updatedWallet.locked,\n                                };\n\n                                return true;\n                            }\n\n                            return false;\n                        });\n                    }\n\n                    return updatedWallet;\n                });\n            }\n\n            return {\n                ...state,\n                loading: false,\n                list: updatedList,\n            };\n        }\n        case WALLETS_ADDRESS_DATA: {\n            return {\n                ...state,\n                list: getUpdatedWalletsList(state.list, action.payload),\n                loading: false,\n            };\n        }\n        case WALLETS_WITHDRAW_CCY_DATA:\n            return {\n                ...state,\n                loading: false,\n                withdrawSuccess: true,\n            };\n        case WALLETS_ADDRESS_DATA_WS: {\n            return {\n                ...state,\n                list: getUpdatedWalletsList(state.list, action.payload),\n                loading: false,\n            };\n        }\n        case WALLETS_WITHDRAW_CCY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                withdrawSuccess: false,\n                error: action.error,\n            };\n        case WALLETS_ADDRESS_ERROR:\n        case WALLETS_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.error,\n            };\n\n        case SET_MOBILE_WALLET_UI:\n            return { ...state, mobileWalletChosen: action.payload };\n        default:\n            return state;\n    }\n};\n\nexport const walletsReducer = (state = initialWalletsState, action: WalletsAction): WalletsState => {\n    switch (action.type) {\n        case WALLETS_FETCH:\n        case WALLETS_DATA:\n        case WALLETS_DATA_WS:\n        case WALLETS_ERROR:\n        case WALLETS_ADDRESS_FETCH:\n        case WALLETS_ADDRESS_DATA:\n        case WALLETS_ADDRESS_DATA_WS:\n        case WALLETS_ADDRESS_ERROR:\n        case WALLETS_WITHDRAW_CCY_FETCH:\n        case WALLETS_WITHDRAW_CCY_DATA:\n        case SET_MOBILE_WALLET_UI:\n        case WALLETS_WITHDRAW_CCY_ERROR:\n            const walletsListState = { ...state.wallets };\n\n            return {\n                ...state,\n                wallets: walletsListReducer(walletsListState, action),\n            };\n        case WALLETS_RESET:\n            return {\n                ...state,\n                wallets: {\n                    list: [],\n                    loading: false,\n                    withdrawSuccess: false,\n                    mobileWalletChosen: '',\n                },\n            };\n        default:\n            return state;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}