{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\components\\\\CopyableTextField\\\\index.tsx\";\nimport '@openware/cryptofont';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { CustomInput } from '../';\nimport { copy } from '../../helpers';\n/**\n * Text field component with ability to copy inner text.\n */\nvar CopyableTextField = /*#__PURE__*/function (_React$Component) {\n  _inherits(CopyableTextField, _React$Component);\n  var _super = _createSuper(CopyableTextField);\n  function CopyableTextField() {\n    _classCallCheck(this, CopyableTextField);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CopyableTextField, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.fieldId) {\n        throw new Error('CopyableTextField must contain `fieldId` prop');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        value = _this$props.value,\n        className = _this$props.className,\n        disabled = _this$props.disabled,\n        fieldId = _this$props.fieldId,\n        copyButtonText = _this$props.copyButtonText,\n        label = _this$props.label;\n      var doCopy = function doCopy() {\n        return copy(fieldId);\n      };\n      var cx = classnames('cr-copyable-text-field', className);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: cx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(InputGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        id: String(fieldId),\n        readOnly: true,\n        inputValue: value,\n        handleClick: doCopy,\n        type: \"text\",\n        isDisabled: disabled,\n        label: label || '',\n        defaultLabel: label || '',\n        placeholder: label || '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: doCopy,\n        disabled: disabled,\n        size: \"lg\",\n        variant: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }\n      }, copyButtonText ? copyButtonText : 'Copy'))));\n    }\n  }]);\n  return CopyableTextField;\n}(React.Component);\nexport { CopyableTextField, copy };","map":{"version":3,"names":["classnames","React","Button","InputGroup","CustomInput","copy","CopyableTextField","props","fieldId","Error","value","className","disabled","copyButtonText","label","doCopy","cx","String","Component"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/components/CopyableTextField/index.tsx"],"sourcesContent":["import '@openware/cryptofont';\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { CustomInput } from '../';\nimport { copy } from '../../helpers';\n\n\nexport interface CopyableTextFieldProps {\n    /**\n     * Text value that will be copied to the clipboard\n     */\n    value: string;\n    /**\n     * Additional class name for styling. By default element receives `cr-button` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * String value that makes copy field be unique\n     */\n    fieldId: string;\n    /**\n     * @default 'Copy'\n     *  Renders text of the label of copy button component\n     */\n    copyButtonText?: string;\n    /**\n     * @default 'false'\n     * If true, Button will be disabled.\n     */\n    disabled?: boolean;\n    label?: string;\n}\n\n/**\n * Text field component with ability to copy inner text.\n */\nclass CopyableTextField extends React.Component<CopyableTextFieldProps> {\n    public componentDidMount() {\n        if (!this.props.fieldId) {\n            throw new Error('CopyableTextField must contain `fieldId` prop');\n        }\n    }\n\n    public render() {\n        const {\n            value,\n            className,\n            disabled,\n            fieldId,\n            copyButtonText,\n            label,\n        } = this.props;\n        const doCopy = () => copy(fieldId);\n        const cx = classnames('cr-copyable-text-field', className);\n\n        return (\n            <div className={cx}>\n                <InputGroup>\n                    <CustomInput\n                        id={String(fieldId)}\n                        readOnly={true}\n                        inputValue={value}\n                        handleClick={doCopy}\n                        type=\"text\"\n                        isDisabled={disabled}\n                        label={label || ''}\n                        defaultLabel={label || ''}\n                        placeholder={label || ''}\n                    />\n                    <InputGroup.Append>\n                        <Button\n                            onClick={doCopy}\n                            disabled={disabled}\n                            size=\"lg\"\n                            variant=\"primary\"\n                        >\n                            {copyButtonText ? copyButtonText : 'Copy'}\n                        </Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </div>\n        );\n    }\n}\n\nexport {\n    CopyableTextField,\n    copy,\n};\n"],"mappings":";;;;;AAAA,OAAO,sBAAsB;AAC7B,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,EAAEC,UAAU,QAAQ,iBAAiB;AACpD,SAASC,WAAW,QAAQ,KAAK;AACjC,SAASC,IAAI,QAAQ,eAAe;AA8BpC;AACA;AACA;AAFA,IAGMC,iBAAiB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACnB,6BAA2B;MACvB,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,OAAO,EAAE;QACrB,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;MACpE;IACJ;EAAC;IAAA;IAAA,OAED,kBAAgB;MACZ,kBAOI,IAAI,CAACF,KAAK;QANVG,KAAK,eAALA,KAAK;QACLC,SAAS,eAATA,SAAS;QACTC,QAAQ,eAARA,QAAQ;QACRJ,OAAO,eAAPA,OAAO;QACPK,cAAc,eAAdA,cAAc;QACdC,KAAK,eAALA,KAAK;MAET,IAAMC,MAAM,GAAG,SAATA,MAAM;QAAA,OAASV,IAAI,CAACG,OAAO,CAAC;MAAA;MAClC,IAAMQ,EAAE,GAAGhB,UAAU,CAAC,wBAAwB,EAAEW,SAAS,CAAC;MAE1D,oBACI;QAAK,SAAS,EAAEK,EAAG;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACf,oBAAC,UAAU;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACP,oBAAC,WAAW;QACR,EAAE,EAAEC,MAAM,CAACT,OAAO,CAAE;QACpB,QAAQ,EAAE,IAAK;QACf,UAAU,EAAEE,KAAM;QAClB,WAAW,EAAEK,MAAO;QACpB,IAAI,EAAC,MAAM;QACX,UAAU,EAAEH,QAAS;QACrB,KAAK,EAAEE,KAAK,IAAI,EAAG;QACnB,YAAY,EAAEA,KAAK,IAAI,EAAG;QAC1B,WAAW,EAAEA,KAAK,IAAI,EAAG;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAC3B,eACF,oBAAC,UAAU,CAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACd,oBAAC,MAAM;QACH,OAAO,EAAEC,MAAO;QAChB,QAAQ,EAAEH,QAAS;QACnB,IAAI,EAAC,IAAI;QACT,OAAO,EAAC,SAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEhBC,cAAc,GAAGA,cAAc,GAAG,MAAM,CACpC,CACO,CACX,CACX;IAEd;EAAC;EAAA;AAAA,EA9C2BZ,KAAK,CAACiB,SAAS;AAiD/C,SACIZ,iBAAiB,EACjBD,IAAI"},"metadata":{},"sourceType":"module"}