{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nvar BrowserBackend = /** @class */function (_super) {\n  __extends(BrowserBackend, _super);\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    return eventFromException(this._options, exception, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n    return eventFromMessage(this._options, message, level, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n    var transportOptions = __assign(__assign({}, this._options.transportOptions), {\n      dsn: this._options.dsn\n    });\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  };\n  return BrowserBackend;\n}(BaseBackend);\nexport { BrowserBackend };","map":{"version":3,"sources":["../src/backend.ts"],"names":[],"mappings":";AAAA,SAAS,WAAW,QAAQ,cAAc;AAC1C,SAAoC,QAAQ,QAAmB,eAAe;AAC9E,SAAS,aAAa,QAAQ,eAAe;AAE7C,SAAS,kBAAkB,EAAE,gBAAgB,QAAQ,gBAAgB;AACrE,SAAS,cAAc,EAAE,YAAY,QAAQ,cAAc;AAkC3D;;;AAGG;AACH,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAApC,SAAA,cAAA,GAAA;;EAoCA;EAnCE;;AAEG;EACI,cAAA,CAAA,SAAA,CAAA,kBAAkB,GAAzB,UAA0B,SAAkB,EAAE,IAAgB,EAAA;IAC5D,OAAO,kBAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,IAAI,CAAC;EAC3D,CAAC;EACD;;AAEG;EACI,cAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,OAAe,EAAE,KAA+B,EAAE,IAAgB,EAAA;IAAjD,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;MAAA,KAAA,GAAkB,QAAQ,CAAC,IAAI;IAAA;IACtE,OAAO,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC;EAC9D,CAAC;EAED;;AAEG;EACO,cAAA,CAAA,SAAA,CAAA,eAAe,GAAzB,YAAA;IACE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;MACtB;MACA,OAAO,MAAA,CAAA,SAAA,CAAM,eAAe,CAAA,IAAA,CAAA,IAAA,CAAE;IAC/B;IAED,IAAM,gBAAgB,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACjB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAA,EAAA;MACjC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC;IAAG,CAAA,CACvB;IAED,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;MAC3B,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACrD;IACD,IAAI,aAAa,EAAE,EAAE;MACnB,OAAO,IAAI,cAAc,CAAC,gBAAgB,CAAC;IAC5C;IACD,OAAO,IAAI,YAAY,CAAC,gBAAgB,CAAC;EAC3C,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CApCmC,WAAW,CAAA","sourcesContent":["import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A flag enabling Sessions Tracking feature.\n   * By default Sessions Tracking is disabled.\n   */\n  autoSessionTracking?: boolean;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}