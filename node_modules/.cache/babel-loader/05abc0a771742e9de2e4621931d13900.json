{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addInstrumentationHandler, getEventDescription, getGlobalObject, htmlTreeAsString, parseUrl, safeJoin } from '@sentry/utils';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = __assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  Breadcrumbs.prototype.setupOnce = function () {\n    var _this = this;\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._consoleBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'console'\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._domBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'dom'\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._xhrBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'xhr'\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._fetchBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'fetch'\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._historyBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'history'\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._consoleBreadcrumb = function (handlerData) {\n    var breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console'\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' ')\n    };\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = \"Assertion failed: \" + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level\n    });\n  };\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._domBreadcrumb = function (handlerData) {\n    var target;\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target) : htmlTreeAsString(handlerData.event);\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name\n    });\n  };\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._xhrBreadcrumb = function (handlerData) {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n      var _a = handlerData.xhr.__sentry_xhr__ || {},\n        method = _a.method,\n        url = _a.url,\n        status_code = _a.status_code,\n        body = _a.body;\n      getCurrentHub().addBreadcrumb({\n        category: 'xhr',\n        data: {\n          method: method,\n          url: url,\n          status_code: status_code\n        },\n        type: 'http'\n      }, {\n        xhr: handlerData.xhr,\n        input: body\n      });\n      return;\n    }\n  };\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._fetchBreadcrumb = function (handlerData) {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http'\n      }, {\n        data: handlerData.error,\n        input: handlerData.args\n      });\n    } else {\n      getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: __assign(__assign({}, handlerData.fetchData), {\n          status_code: handlerData.response.status\n        }),\n        type: 'http'\n      }, {\n        input: handlerData.args,\n        response: handlerData.response\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._historyBreadcrumb = function (handlerData) {\n    var global = getGlobalObject();\n    var from = handlerData.from;\n    var to = handlerData.to;\n    var parsedLoc = parseUrl(global.location.href);\n    var parsedFrom = parseUrl(from);\n    var parsedTo = parseUrl(to);\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from: from,\n        to: to\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\nexport { Breadcrumbs };","map":{"version":3,"sources":["../../src/integrations/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}