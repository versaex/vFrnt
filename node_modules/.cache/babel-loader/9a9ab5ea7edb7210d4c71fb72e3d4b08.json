{"ast":null,"code":"import { PartitionPattern } from '../PartitionPattern';\nimport { invariant } from '../utils';\nexport function MakePartsList(pattern, unit, parts) {\n  var patternParts = PartitionPattern(pattern);\n  var result = [];\n  for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\n    var patternPart = patternParts_1[_i];\n    if (patternPart.type === 'literal') {\n      result.push({\n        type: 'literal',\n        value: patternPart.value\n      });\n    } else {\n      invariant(patternPart.type === '0', \"Malformed pattern \" + pattern);\n      for (var _a = 0, parts_1 = parts; _a < parts_1.length; _a++) {\n        var part = parts_1[_a];\n        result.push({\n          type: part.type,\n          value: part.value,\n          unit: unit\n        });\n      }\n    }\n  }\n  return result;\n}","map":{"version":3,"names":["PartitionPattern","invariant","MakePartsList","pattern","unit","parts","patternParts","result","_i","patternParts_1","length","patternPart","type","push","value","_a","parts_1","part"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/@formatjs/ecma402-abstract/lib/RelativeTimeFormat/MakePartsList.js"],"sourcesContent":["import { PartitionPattern } from '../PartitionPattern';\nimport { invariant } from '../utils';\nexport function MakePartsList(pattern, unit, parts) {\n    var patternParts = PartitionPattern(pattern);\n    var result = [];\n    for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {\n        var patternPart = patternParts_1[_i];\n        if (patternPart.type === 'literal') {\n            result.push({\n                type: 'literal',\n                value: patternPart.value,\n            });\n        }\n        else {\n            invariant(patternPart.type === '0', \"Malformed pattern \" + pattern);\n            for (var _a = 0, parts_1 = parts; _a < parts_1.length; _a++) {\n                var part = parts_1[_a];\n                result.push({\n                    type: part.type,\n                    value: part.value,\n                    unit: unit,\n                });\n            }\n        }\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,SAAS,QAAQ,UAAU;AACpC,OAAO,SAASC,aAAa,CAACC,OAAO,EAAEC,IAAI,EAAEC,KAAK,EAAE;EAChD,IAAIC,YAAY,GAAGN,gBAAgB,CAACG,OAAO,CAAC;EAC5C,IAAII,MAAM,GAAG,EAAE;EACf,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,cAAc,GAAGH,YAAY,EAAEE,EAAE,GAAGC,cAAc,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC9E,IAAIG,WAAW,GAAGF,cAAc,CAACD,EAAE,CAAC;IACpC,IAAIG,WAAW,CAACC,IAAI,KAAK,SAAS,EAAE;MAChCL,MAAM,CAACM,IAAI,CAAC;QACRD,IAAI,EAAE,SAAS;QACfE,KAAK,EAAEH,WAAW,CAACG;MACvB,CAAC,CAAC;IACN,CAAC,MACI;MACDb,SAAS,CAACU,WAAW,CAACC,IAAI,KAAK,GAAG,EAAE,oBAAoB,GAAGT,OAAO,CAAC;MACnE,KAAK,IAAIY,EAAE,GAAG,CAAC,EAAEC,OAAO,GAAGX,KAAK,EAAEU,EAAE,GAAGC,OAAO,CAACN,MAAM,EAAEK,EAAE,EAAE,EAAE;QACzD,IAAIE,IAAI,GAAGD,OAAO,CAACD,EAAE,CAAC;QACtBR,MAAM,CAACM,IAAI,CAAC;UACRD,IAAI,EAAEK,IAAI,CAACL,IAAI;UACfE,KAAK,EAAEG,IAAI,CAACH,KAAK;UACjBV,IAAI,EAAEA;QACV,CAAC,CAAC;MACN;IACJ;EACJ;EACA,OAAOG,MAAM;AACjB"},"metadata":{},"sourceType":"module"}