{"ast":null,"code":"(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert(val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function TempCtor() {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN(number, base, endian) {\n    // May be `new BN(bn)` ?\n    if (number !== null && typeof number === 'object' && Array.isArray(number.words)) {\n      return number;\n    }\n    this.sign = false;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n    if (base === 'le' || base === 'be') {\n      endian = base;\n      base = 10;\n    }\n    if (number !== null) this._init(number || 0, base || 10, endian || 'be');\n  }\n  if (typeof module === 'object') module.exports = BN;else exports.BN = BN;\n  BN.BN = BN;\n  BN.wordSize = 26;\n  BN.prototype._init = function init(number, base, endian) {\n    if (typeof number === 'number') {\n      if (number < 0) {\n        this.sign = true;\n        number = -number;\n      }\n      if (number < 0x4000000) {\n        this.words = [number & 0x3ffffff];\n        this.length = 1;\n      } else if (number < 0x10000000000000) {\n        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n        this.length = 2;\n      } else {\n        assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n        this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n        this.length = 3;\n      }\n      return;\n    } else if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n    if (base === 'hex') base = 16;\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') start++;\n    if (base === 16) this._parseHex(number, start);else this._parseBase(number, base, start);\n    if (number[0] === '-') this.sign = true;\n    this.strip();\n  };\n  BN.prototype._initArray = function _initArray(number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n    var off = 0;\n    if (endian === 'be') {\n      for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        var w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n        this.words[j] |= w << off & 0x3ffffff;\n        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (var i = 0, j = 0; i < number.length; i += 3) {\n        var w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n        this.words[j] |= w << off & 0x3ffffff;\n        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n  function parseHex(str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      else if (c >= 17 && c <= 22) r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      else r |= c & 0xf;\n    }\n    return r;\n  }\n  BN.prototype._parseHex = function _parseHex(number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (var i = number.length - 6, j = 0; i >= start; i -= 6) {\n      var w = parseHex(number, i, i + 6);\n      this.words[j] |= w << off & 0x3ffffff;\n      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      var w = parseHex(number, start, i + 6);\n      this.words[j] |= w << off & 0x3ffffff;\n      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n    }\n    this.strip();\n  };\n  function parseBase(str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) r += c - 49 + 0xa;\n\n      // 'A'\n      else if (c >= 17) r += c - 17 + 0xa;\n\n      // '0' - '9'\n      else r += c;\n    }\n    return r;\n  }\n  BN.prototype._parseBase = function _parseBase(number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = limbPow / base | 0;\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) this.words[0] += word;else this._iaddn(word);\n    }\n    if (mod !== 0) {\n      var pow = 1;\n      var word = parseBase(number, i, number.length, base);\n      for (var i = 0; i < mod; i++) {\n        pow *= base;\n      }\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) this.words[0] += word;else this._iaddn(word);\n    }\n  };\n  BN.prototype.copy = function copy(dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.sign = this.sign;\n    dest.red = this.red;\n  };\n  BN.prototype.clone = function clone() {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip() {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n  BN.prototype._normSign = function _normSign() {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) this.sign = false;\n    return this;\n  };\n  BN.prototype.inspect = function inspect() {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n  \n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n  \n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n  \n  */\n\n  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n  BN.prototype.toString = function toString(base, padding) {\n    base = base || 10;\n    if (base === 16 || base === 'hex') {\n      var out = '';\n      var off = 0;\n      var padding = padding | 0 || 1;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = ((w << off | carry) & 0xffffff).toString(16);\n        carry = w >>> 24 - off & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;else out = word + out;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) out = carry.toString(16) + out;\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.sign) out = '-' + out;\n      return out;\n    } else if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      var out = '';\n      var c = this.clone();\n      c.sign = false;\n      while (c.cmpn(0) !== 0) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n        if (c.cmpn(0) !== 0) out = zeros[groupSize - r.length] + r + out;else out = r + out;\n      }\n      if (this.cmpn(0) === 0) out = '0' + out;\n      if (this.sign) out = '-' + out;\n      return out;\n    } else {\n      assert(false, 'Base should be between 2 and 36');\n    }\n  };\n  BN.prototype.toJSON = function toJSON() {\n    return this.toString(16);\n  };\n  BN.prototype.toArray = function toArray() {\n    this.strip();\n    var res = new Array(this.byteLength());\n    res[0] = 0;\n    var q = this.clone();\n    for (var i = 0; q.cmpn(0) !== 0; i++) {\n      var b = q.andln(0xff);\n      q.ishrn(8);\n\n      // Assume big-endian\n      res[res.length - i - 1] = b;\n    }\n    return res;\n  };\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits(w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits(w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n  BN.prototype._zeroBits = function _zeroBits(w) {\n    // Short-cut\n    if (w === 0) return 26;\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) r++;\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength() {\n    var hi = 0;\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits() {\n    if (this.cmpn(0) === 0) return 0;\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n  BN.prototype.byteLength = function byteLength() {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg() {\n    if (this.cmpn(0) === 0) return this.clone();\n    var r = this.clone();\n    r.sign = !this.sign;\n    return r;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.ior = function ior(num) {\n    this.sign = this.sign || num.sign;\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n    return this.strip();\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or(num) {\n    if (this.length > num.length) return this.clone().ior(num);else return num.clone().ior(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iand = function iand(num) {\n    this.sign = this.sign && num.sign;\n\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) b = num;else b = this;\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n    this.length = b.length;\n    return this.strip();\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and(num) {\n    if (this.length > num.length) return this.clone().iand(num);else return num.clone().iand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.ixor = function ixor(num) {\n    this.sign = this.sign || num.sign;\n\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n    if (this !== a) for (; i < a.length; i++) {\n      this.words[i] = a.words[i];\n    }\n    this.length = a.length;\n    return this.strip();\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor(num) {\n    if (this.length > num.length) return this.clone().ixor(num);else return num.clone().ixor(this);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn(bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var off = bit / 26 | 0;\n    var wbit = bit % 26;\n    while (this.length <= off) {\n      this.words[this.length++] = 0;\n    }\n    if (val) this.words[off] = this.words[off] | 1 << wbit;else this.words[off] = this.words[off] & ~(1 << wbit);\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd(num) {\n    // negative + positive\n    if (this.sign && !num.sign) {\n      this.sign = false;\n      var r = this.isub(num);\n      this.sign = !this.sign;\n      return this._normSign();\n\n      // positive + negative\n    } else if (!this.sign && num.sign) {\n      num.sign = false;\n      var r = this.isub(num);\n      num.sign = true;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      var r = a.words[i] + b.words[i] + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      var r = a.words[i] + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n      // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add(num) {\n    if (num.sign && !this.sign) {\n      num.sign = false;\n      var res = this.sub(num);\n      num.sign = true;\n      return res;\n    } else if (!num.sign && this.sign) {\n      this.sign = false;\n      var res = num.sub(this);\n      this.sign = true;\n      return res;\n    }\n    if (this.length > num.length) return this.clone().iadd(num);else return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub(num) {\n    // this - (-num) = this + num\n    if (num.sign) {\n      num.sign = false;\n      var r = this.iadd(num);\n      num.sign = true;\n      return r._normSign();\n\n      // -this - num = -(this + num)\n    } else if (this.sign) {\n      this.sign = false;\n      this.iadd(num);\n      this.sign = true;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.sign = false;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a;\n    var b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      var r = a.words[i] - b.words[i] + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      var r = a.words[i] + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) for (; i < a.length; i++) {\n      this.words[i] = a.words[i];\n    }\n    this.length = Math.max(this.length, i);\n    if (a !== this) this.sign = true;\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub(num) {\n    return this.clone().isub(num);\n  };\n\n  /*\n  // NOTE: This could be potentionally used to generate loop-less multiplications\n  function _genCombMulTo(alen, blen) {\n    var len = alen + blen - 1;\n    var src = [\n      'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +\n          'mask = 0x3ffffff, shift = 0x4000000;',\n      'out.length = ' + len + ';'\n    ];\n    for (var k = 0; k < len; k++) {\n      var minJ = Math.max(0, k - alen + 1);\n      var maxJ = Math.min(k, blen - 1);\n  \n      for (var j = minJ; j <= maxJ; j++) {\n        var i = k - j;\n        var mul = 'a[' + i + '] * b[' + j + ']';\n  \n        if (j === minJ) {\n          src.push('w = ' + mul + ' + c;');\n          src.push('c = (w / shift) | 0;');\n        } else {\n          src.push('w += ' + mul + ';');\n          src.push('c += (w / shift) | 0;');\n        }\n        src.push('w &= mask;');\n      }\n      src.push('o[' + k + '] = w;');\n    }\n    src.push('if (c !== 0) {',\n             '  o[' + k + '] = c;',\n             '  out.length++;',\n             '}',\n             'return out;');\n  \n    return src.join('\\n');\n  }\n  */\n\n  BN.prototype._smallMulTo = function _smallMulTo(num, out) {\n    out.sign = num.sign !== this.sign;\n    out.length = this.length + num.length;\n    var carry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = this.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n        lo = lo + rword | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = ncarry + (lo >>> 26) | 0;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n    return out.strip();\n  };\n  BN.prototype._bigMulTo = function _bigMulTo(num, out) {\n    out.sign = num.sign !== this.sign;\n    out.length = this.length + num.length;\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = this.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n        lo = lo + rword | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = ncarry + (lo >>> 26) | 0;\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n    return out.strip();\n  };\n  BN.prototype.mulTo = function mulTo(num, out) {\n    var res;\n    if (this.length + num.length < 63) res = this._smallMulTo(num, out);else res = this._bigMulTo(num, out);\n    return res;\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul(num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul(num) {\n    if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n      return this;\n    }\n    var tlen = this.length;\n    var nlen = num.length;\n    this.sign = num.sign !== this.sign;\n    this.length = this.length + num.length;\n    this.words[this.length - 1] = 0;\n    for (var k = this.length - 2; k >= 0; k--) {\n      // Sum all words with the same `i + j = k` and accumulate `carry`,\n      // note that carry could be >= 0x3ffffff\n      var carry = 0;\n      var rword = 0;\n      var maxJ = Math.min(k, nlen - 1);\n      for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = this.words[i];\n        var b = num.words[j];\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        carry += r / 0x4000000 | 0;\n        lo += rword;\n        rword = lo & 0x3ffffff;\n        carry += lo >>> 26;\n      }\n      this.words[k] = rword;\n      this.words[k + 1] += carry;\n      carry = 0;\n    }\n\n    // Propagate overflows\n    var carry = 0;\n    for (var i = 1; i < this.length; i++) {\n      var w = this.words[i] + carry;\n      this.words[i] = w & 0x3ffffff;\n      carry = w >>> 26;\n    }\n    return this.strip();\n  };\n  BN.prototype.imuln = function imuln(num) {\n    assert(typeof num === 'number');\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = this.words[i] * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += w / 0x4000000 | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr() {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr() {\n    return this.mul(this);\n  };\n\n  // Shift-left in-place\n  BN.prototype.ishln = function ishln(bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n    if (r !== 0) {\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = this.words[i] - newCarry << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> 26 - r;\n      }\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n    if (s !== 0) {\n      for (var i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n      for (var i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n      this.length += s;\n    }\n    return this.strip();\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) h = (hint - hint % 26) / 26;else h = 0;\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n    var maskedWords = extended;\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (var i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i];\n      this.words[i] = carry << 26 - r | word >>> r;\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n    this.strip();\n    return this;\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln(bits) {\n    return this.clone().ishln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn(bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn(bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      return false;\n    }\n\n    // Check bit and return\n    var w = this.words[s];\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn(bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    assert(!this.sign, 'imaskn works only with positive numbers');\n    if (r !== 0) s++;\n    this.length = Math.min(s, this.length);\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n      this.words[this.length - 1] &= mask;\n    }\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn(bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn(num) {\n    assert(typeof num === 'number');\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.sign) {\n      if (this.length === 1 && this.words[0] < num) {\n        this.words[0] = num - this.words[0];\n        this.sign = false;\n        return this;\n      }\n      this.sign = false;\n      this.isubn(num);\n      this.sign = true;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n  BN.prototype._iaddn = function _iaddn(num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) this.words[i + 1] = 1;else this.words[i + 1]++;\n    }\n    this.length = Math.max(this.length, i + 1);\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn(num) {\n    assert(typeof num === 'number');\n    if (num < 0) return this.iaddn(-num);\n    if (this.sign) {\n      this.sign = false;\n      this.iaddn(num);\n      this.sign = true;\n      return this;\n    }\n    this.words[0] -= num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n      this.words[i] += 0x4000000;\n      this.words[i + 1] -= 1;\n    }\n    return this.strip();\n  };\n  BN.prototype.addn = function addn(num) {\n    return this.clone().iaddn(num);\n  };\n  BN.prototype.subn = function subn(num) {\n    return this.clone().isubn(num);\n  };\n  BN.prototype.iabs = function iabs() {\n    this.sign = false;\n    return this;\n  };\n  BN.prototype.abs = function abs() {\n    return this.clone().iabs();\n  };\n  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n    // Bigger storage is needed\n    var len = num.length + shift;\n    var i;\n    if (this.words.length < len) {\n      var t = new Array(len);\n      for (var i = 0; i < this.length; i++) {\n        t[i] = this.words[i];\n      }\n      this.words = t;\n    } else {\n      i = this.length;\n    }\n\n    // Zeroify rest\n    this.length = Math.max(this.length, len);\n    for (; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = this.words[i + shift] + carry;\n      var right = num.words[i] * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - (right / 0x4000000 | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      var w = this.words[i + shift] + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = -this.words[i] + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.sign = true;\n    return this.strip();\n  };\n  BN.prototype._wordDiv = function _wordDiv(num, mode) {\n    var shift = this.length - num.length;\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1];\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.shln(shift);\n      a.ishln(shift);\n      bhi = b.words[b.length - 1];\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (!diff.sign) {\n      a = diff;\n      if (q) q.words[m] = 1;\n    }\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min(qj / bhi | 0, 0x3ffffff);\n      a._ishlnsubmul(b, qj, j);\n      while (a.sign) {\n        qj--;\n        a.sign = false;\n        a._ishlnsubmul(b, 1, j);\n        if (a.cmpn(0) !== 0) a.sign = !a.sign;\n      }\n      if (q) q.words[j] = qj;\n    }\n    if (q) q.strip();\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) a.ishrn(shift);\n    return {\n      div: q ? q : null,\n      mod: a\n    };\n  };\n  BN.prototype.divmod = function divmod(num, mode) {\n    assert(num.cmpn(0) !== 0);\n    if (this.sign && !num.sign) {\n      var res = this.neg().divmod(num, mode);\n      var div;\n      var mod;\n      if (mode !== 'mod') div = res.div.neg();\n      if (mode !== 'div') mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);\n      return {\n        div: div,\n        mod: mod\n      };\n    } else if (!this.sign && num.sign) {\n      var res = this.divmod(num.neg(), mode);\n      var div;\n      if (mode !== 'mod') div = res.div.neg();\n      return {\n        div: div,\n        mod: res.mod\n      };\n    } else if (this.sign && num.sign) {\n      return this.neg().divmod(num.neg(), mode);\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) return {\n      div: new BN(0),\n      mod: this\n    };\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') return {\n        div: this.divn(num.words[0]),\n        mod: null\n      };else if (mode === 'mod') return {\n        div: null,\n        mod: new BN(this.modn(num.words[0]))\n      };\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div(num) {\n    return this.divmod(num, 'div').div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod(num) {\n    return this.divmod(num, 'mod').mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound(num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.cmpn(0) === 0) return dm.div;\n    var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;\n    var half = num.shrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n  BN.prototype.modn = function modn(num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + this.words[i]) % num;\n    }\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn(num) {\n    assert(num <= 0x3ffffff);\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = this.words[i] + carry * 0x4000000;\n      this.words[i] = w / num | 0;\n      carry = w % num;\n    }\n    return this.strip();\n  };\n  BN.prototype.divn = function divn(num) {\n    return this.clone().idivn(num);\n  };\n  BN.prototype.egcd = function egcd(p) {\n    assert(!p.sign);\n    assert(p.cmpn(0) !== 0);\n    var x = this;\n    var y = p.clone();\n    if (x.sign) x = x.mod(p);else x = x.clone();\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n    var g = 0;\n    while (x.isEven() && y.isEven()) {\n      x.ishrn(1);\n      y.ishrn(1);\n      ++g;\n    }\n    var yp = y.clone();\n    var xp = x.clone();\n    while (x.cmpn(0) !== 0) {\n      while (x.isEven()) {\n        x.ishrn(1);\n        if (A.isEven() && B.isEven()) {\n          A.ishrn(1);\n          B.ishrn(1);\n        } else {\n          A.iadd(yp).ishrn(1);\n          B.isub(xp).ishrn(1);\n        }\n      }\n      while (y.isEven()) {\n        y.ishrn(1);\n        if (C.isEven() && D.isEven()) {\n          C.ishrn(1);\n          D.ishrn(1);\n        } else {\n          C.iadd(yp).ishrn(1);\n          D.isub(xp).ishrn(1);\n        }\n      }\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n    return {\n      a: C,\n      b: D,\n      gcd: y.ishln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp(p) {\n    assert(!p.sign);\n    assert(p.cmpn(0) !== 0);\n    var a = this;\n    var b = p.clone();\n    if (a.sign) a = a.mod(p);else a = a.clone();\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n    var delta = b.clone();\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      while (a.isEven()) {\n        a.ishrn(1);\n        if (x1.isEven()) x1.ishrn(1);else x1.iadd(delta).ishrn(1);\n      }\n      while (b.isEven()) {\n        b.ishrn(1);\n        if (x2.isEven()) x2.ishrn(1);else x2.iadd(delta).ishrn(1);\n      }\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n    if (a.cmpn(1) === 0) return x1;else return x2;\n  };\n  BN.prototype.gcd = function gcd(num) {\n    if (this.cmpn(0) === 0) return num.clone();\n    if (num.cmpn(0) === 0) return this.clone();\n    var a = this.clone();\n    var b = num.clone();\n    a.sign = false;\n    b.sign = false;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.ishrn(1);\n      b.ishrn(1);\n    }\n    do {\n      while (a.isEven()) {\n        a.ishrn(1);\n      }\n      while (b.isEven()) {\n        b.ishrn(1);\n      }\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n      a.isub(b);\n    } while (true);\n    return b.ishln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm(num) {\n    return this.egcd(num).a.mod(num);\n  };\n  BN.prototype.isEven = function isEven() {\n    return (this.words[0] & 1) === 0;\n  };\n  BN.prototype.isOdd = function isOdd() {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln(num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn(bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      for (var i = this.length; i < s + 1; i++) {\n        this.words[i] = 0;\n      }\n      this.words[s] |= q;\n      this.length = s + 1;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i];\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n  BN.prototype.cmpn = function cmpn(num) {\n    var sign = num < 0;\n    if (sign) num = -num;\n    if (this.sign && !sign) return -1;else if (!this.sign && sign) return 1;\n    num &= 0x3ffffff;\n    this.strip();\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      var w = this.words[0];\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.sign) res = -res;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp(num) {\n    if (this.sign && !num.sign) return -1;else if (!this.sign && num.sign) return 1;\n    var res = this.ucmp(num);\n    if (this.sign) return -res;else return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp(num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;else if (this.length < num.length) return -1;\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i];\n      var b = num.words[i];\n      if (a === b) continue;\n      if (a < b) res = -1;else if (a > b) res = 1;\n      break;\n    }\n    return res;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red(num) {\n    return new Red(num);\n  };\n  BN.prototype.toRed = function toRed(ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(!this.sign, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n  BN.prototype.fromRed = function fromRed() {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n  BN.prototype._forceRed = function _forceRed(ctx) {\n    this.red = ctx;\n    return this;\n  };\n  BN.prototype.forceRed = function forceRed(ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n  BN.prototype.redAdd = function redAdd(num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n  BN.prototype.redIAdd = function redIAdd(num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n  BN.prototype.redSub = function redSub(num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n  BN.prototype.redISub = function redISub(num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n  BN.prototype.redShl = function redShl(num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n  BN.prototype.redMul = function redMul(num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n  BN.prototype.redIMul = function redIMul(num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n  BN.prototype.redSqr = function redSqr() {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n  BN.prototype.redISqr = function redISqr() {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt() {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n  BN.prototype.redInvm = function redInvm() {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg() {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n  BN.prototype.redPow = function redPow(num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime(name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).ishln(this.n).isub(this.p);\n    this.tmp = this._tmp();\n  }\n  MPrime.prototype._tmp = function _tmp() {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n  MPrime.prototype.ireduce = function ireduce(num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n    return r;\n  };\n  MPrime.prototype.split = function split(input, out) {\n    input.ishrn(this.n, 0, out);\n  };\n  MPrime.prototype.imulK = function imulK(num) {\n    return num.imul(this.k);\n  };\n  function K256() {\n    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n  K256.prototype.split = function split(input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n    for (var i = 10; i < input.length; i++) {\n      var next = input.words[i];\n      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n      prev = next;\n    }\n    input.words[i - 10] = prev >>> 22;\n    input.length -= 9;\n  };\n  K256.prototype.imulK = function imulK(num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var hi;\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i];\n      hi = w * 0x40;\n      lo += w * 0x3d1;\n      hi += lo / 0x4000000 | 0;\n      lo &= 0x3ffffff;\n      num.words[i] = lo;\n      lo = hi;\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) num.length--;\n    }\n    return num;\n  };\n  function P224() {\n    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n  function P192() {\n    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n  function P25519() {\n    // 2 ^ 255 - 19\n    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n  P25519.prototype.imulK = function imulK(num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = num.words[i] * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) num.words[num.length++] = carry;\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime(name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n    var prime;\n    if (name === 'k256') prime = new K256();else if (name === 'p224') prime = new P224();else if (name === 'p192') prime = new P192();else if (name === 'p25519') prime = new P25519();else throw new Error('Unknown prime ' + name);\n    primes[name] = prime;\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red(m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      this.m = m;\n      this.prime = null;\n    }\n  }\n  Red.prototype._verify1 = function _verify1(a) {\n    assert(!a.sign, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n  Red.prototype._verify2 = function _verify2(a, b) {\n    assert(!a.sign && !b.sign, 'red works only with positives');\n    assert(a.red && a.red === b.red, 'red works only with red numbers');\n  };\n  Red.prototype.imod = function imod(a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.mod(this.m)._forceRed(this);\n  };\n  Red.prototype.neg = function neg(a) {\n    var r = a.clone();\n    r.sign = !r.sign;\n    return r.iadd(this.m)._forceRed(this);\n  };\n  Red.prototype.add = function add(a, b) {\n    this._verify2(a, b);\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) res.isub(this.m);\n    return res._forceRed(this);\n  };\n  Red.prototype.iadd = function iadd(a, b) {\n    this._verify2(a, b);\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) res.isub(this.m);\n    return res;\n  };\n  Red.prototype.sub = function sub(a, b) {\n    this._verify2(a, b);\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) res.iadd(this.m);\n    return res._forceRed(this);\n  };\n  Red.prototype.isub = function isub(a, b) {\n    this._verify2(a, b);\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) res.iadd(this.m);\n    return res;\n  };\n  Red.prototype.shl = function shl(a, num) {\n    this._verify1(a);\n    return this.imod(a.shln(num));\n  };\n  Red.prototype.imul = function imul(a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n  Red.prototype.mul = function mul(a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n  Red.prototype.isqr = function isqr(a) {\n    return this.imul(a, a);\n  };\n  Red.prototype.sqr = function sqr(a) {\n    return this.mul(a, a);\n  };\n  Red.prototype.sqrt = function sqrt(a) {\n    if (a.cmpn(0) === 0) return a.clone();\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).ishrn(2);\n      var r = this.pow(a, pow);\n      return r;\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (q.cmpn(0) !== 0 && q.andln(1) === 0) {\n      s++;\n      q.ishrn(1);\n    }\n    assert(q.cmpn(0) !== 0);\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).ishrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).ishrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).ishln(m - i - 1));\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n    return r;\n  };\n  Red.prototype.invm = function invm(a) {\n    var inv = a._invmp(this.m);\n    if (inv.sign) {\n      inv.sign = false;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n  Red.prototype.pow = function pow(a, num) {\n    var w = [];\n    if (num.cmpn(0) === 0) return new BN(1);\n    var q = num.clone();\n    while (q.cmpn(0) !== 0) {\n      w.push(q.andln(1));\n      q.ishrn(1);\n    }\n\n    // Skip leading zeroes\n    var res = a;\n    for (var i = 0; i < w.length; i++, res = this.sqr(res)) {\n      if (w[i] !== 0) break;\n    }\n    if (++i < w.length) {\n      for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {\n        if (w[i] === 0) continue;\n        res = this.mul(res, q);\n      }\n    }\n    return res;\n  };\n  Red.prototype.convertTo = function convertTo(num) {\n    return num.clone();\n  };\n  Red.prototype.convertFrom = function convertFrom(num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont(num) {\n    return new Mont(num);\n  };\n  function Mont(m) {\n    Red.call(this, m);\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;\n    this.r = new BN(1).ishln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv.sign = true;\n    this.minv = this.minv.mod(this.r);\n  }\n  inherits(Mont, Red);\n  Mont.prototype.convertTo = function convertTo(num) {\n    return this.imod(num.shln(this.shift));\n  };\n  Mont.prototype.convertFrom = function convertFrom(num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n  Mont.prototype.imul = function imul(a, b) {\n    if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).ishrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) res = u.isub(this.m);else if (u.cmpn(0) < 0) res = u.iadd(this.m);\n    return res._forceRed(this);\n  };\n  Mont.prototype.mul = function mul(a, b) {\n    if (a.cmpn(0) === 0 || b.cmpn(0) === 0) return new BN(0)._forceRed(this);\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).ishrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) res = u.isub(this.m);else if (u.cmpn(0) < 0) res = u.iadd(this.m);\n    return res._forceRed(this);\n  };\n  Mont.prototype.invm = function invm(a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);","map":{"version":3,"names":["module","exports","assert","val","msg","Error","inherits","ctor","superCtor","super_","TempCtor","prototype","constructor","BN","number","base","endian","Array","isArray","words","sign","length","red","_init","wordSize","init","_initArray","toString","replace","start","_parseHex","_parseBase","strip","Math","ceil","i","off","j","w","parseHex","str","end","r","len","min","c","charCodeAt","parseBase","mul","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_normSign","inspect","zeros","groupSizes","groupBases","padding","out","carry","groupSize","groupBase","cmpn","modn","idivn","toJSON","toArray","res","byteLength","q","b","andln","ishrn","clz32","_countBits","t","_zeroBits","bitLength","hi","zeroBits","neg","ior","num","or","iand","and","ixor","a","xor","setn","bit","wbit","iadd","isub","add","sub","cmp","max","_smallMulTo","k","ncarry","rword","maxJ","lo","_bigMulTo","hncarry","mulTo","imul","tlen","nlen","sqr","isqr","ishln","bits","s","carryMask","newCarry","hint","extended","h","mask","maskedWords","shln","shrn","testn","imaskn","maskn","iaddn","isubn","addn","subn","iabs","abs","_ishlnsubmul","shift","right","_wordDiv","mode","bhi","bhiBits","m","diff","qj","div","divmod","divn","divRound","dm","half","r2","p","acc","egcd","x","y","A","B","C","D","g","isEven","yp","xp","gcd","_invmp","x1","x2","delta","invm","isOdd","bincn","ucmp","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","name","n","tmp","_tmp","ireduce","rlen","split","imulK","input","K256","call","output","outLen","prev","next","P224","P192","P25519","_prime","prime","imod","mod3","one","nOne","lpow","z","inv","push","mont","Mont","rinv","minv","u"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/node_modules/bn.js/lib/bn.js"],"sourcesContent":["(function (module, exports) {\n\n'use strict';\n\n// Utils\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\n// Could use `inherits` module, but don't want to move from single file\n// architecture yet.\nfunction inherits(ctor, superCtor) {\n  ctor.super_ = superCtor;\n  var TempCtor = function () {};\n  TempCtor.prototype = superCtor.prototype;\n  ctor.prototype = new TempCtor();\n  ctor.prototype.constructor = ctor;\n}\n\n// BN\n\nfunction BN(number, base, endian) {\n  // May be `new BN(bn)` ?\n  if (number !== null &&\n      typeof number === 'object' &&\n      Array.isArray(number.words)) {\n    return number;\n  }\n\n  this.sign = false;\n  this.words = null;\n  this.length = 0;\n\n  // Reduction context\n  this.red = null;\n\n  if (base === 'le' || base === 'be') {\n    endian = base;\n    base = 10;\n  }\n\n  if (number !== null)\n    this._init(number || 0, base || 10, endian || 'be');\n}\nif (typeof module === 'object')\n  module.exports = BN;\nelse\n  exports.BN = BN;\n\nBN.BN = BN;\nBN.wordSize = 26;\n\nBN.prototype._init = function init(number, base, endian) {\n  if (typeof number === 'number') {\n    if (number < 0) {\n      this.sign = true;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n    return;\n  } else if (typeof number === 'object') {\n    return this._initArray(number, base, endian);\n  }\n  if (base === 'hex')\n    base = 16;\n  assert(base === (base | 0) && base >= 2 && base <= 36);\n\n  number = number.toString().replace(/\\s+/g, '');\n  var start = 0;\n  if (number[0] === '-')\n    start++;\n\n  if (base === 16)\n    this._parseHex(number, start);\n  else\n    this._parseBase(number, base, start);\n\n  if (number[0] === '-')\n    this.sign = true;\n\n  this.strip();\n};\n\nBN.prototype._initArray = function _initArray(number, base, endian) {\n  // Perhaps a Uint8Array\n  assert(typeof number.length === 'number');\n  if (number.length <= 0) {\n    this.words = [ 0 ];\n    this.length = 1;\n    return this;\n  }\n\n  this.length = Math.ceil(number.length / 3);\n  this.words = new Array(this.length);\n  for (var i = 0; i < this.length; i++)\n    this.words[i] = 0;\n\n  var off = 0;\n  if (endian === 'be') {\n    for (var i = number.length - 1, j = 0; i >= 0; i -= 3) {\n      var w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n  } else if (endian === 'le') {\n    for (var i = 0, j = 0; i < number.length; i += 3) {\n      var w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n  }\n  return this.strip();\n};\n\nfunction parseHex(str, start, end) {\n  var r = 0;\n  var len = Math.min(str.length, end);\n  for (var i = start; i < len; i++) {\n    var c = str.charCodeAt(i) - 48;\n\n    r <<= 4;\n\n    // 'a' - 'f'\n    if (c >= 49 && c <= 54)\n      r |= c - 49 + 0xa;\n\n    // 'A' - 'F'\n    else if (c >= 17 && c <= 22)\n      r |= c - 17 + 0xa;\n\n    // '0' - '9'\n    else\n      r |= c & 0xf;\n  }\n  return r;\n}\n\nBN.prototype._parseHex = function _parseHex(number, start) {\n  // Create possibly bigger array to ensure that it fits the number\n  this.length = Math.ceil((number.length - start) / 6);\n  this.words = new Array(this.length);\n  for (var i = 0; i < this.length; i++)\n    this.words[i] = 0;\n\n  // Scan 24-bit chunks and add them to the number\n  var off = 0;\n  for (var i = number.length - 6, j = 0; i >= start; i -= 6) {\n    var w = parseHex(number, i, i + 6);\n    this.words[j] |= (w << off) & 0x3ffffff;\n    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    off += 24;\n    if (off >= 26) {\n      off -= 26;\n      j++;\n    }\n  }\n  if (i + 6 !== start) {\n    var w = parseHex(number, start, i + 6);\n    this.words[j] |= (w << off) & 0x3ffffff;\n    this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n  }\n  this.strip();\n};\n\nfunction parseBase(str, start, end, mul) {\n  var r = 0;\n  var len = Math.min(str.length, end);\n  for (var i = start; i < len; i++) {\n    var c = str.charCodeAt(i) - 48;\n\n    r *= mul;\n\n    // 'a'\n    if (c >= 49)\n      r += c - 49 + 0xa;\n\n    // 'A'\n    else if (c >= 17)\n      r += c - 17 + 0xa;\n\n    // '0' - '9'\n    else\n      r += c;\n  }\n  return r;\n}\n\nBN.prototype._parseBase = function _parseBase(number, base, start) {\n  // Initialize as zero\n  this.words = [ 0 ];\n  this.length = 1;\n\n  // Find length of limb in base\n  for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)\n    limbLen++;\n  limbLen--;\n  limbPow = (limbPow / base) | 0;\n\n  var total = number.length - start;\n  var mod = total % limbLen;\n  var end = Math.min(total, total - mod) + start;\n\n  var word = 0;\n  for (var i = start; i < end; i += limbLen) {\n    word = parseBase(number, i, i + limbLen, base);\n\n    this.imuln(limbPow);\n    if (this.words[0] + word < 0x4000000)\n      this.words[0] += word;\n    else\n      this._iaddn(word);\n  }\n\n  if (mod !== 0) {\n    var pow = 1;\n    var word = parseBase(number, i, number.length, base);\n\n    for (var i = 0; i < mod; i++)\n      pow *= base;\n    this.imuln(pow);\n    if (this.words[0] + word < 0x4000000)\n      this.words[0] += word;\n    else\n      this._iaddn(word);\n  }\n};\n\nBN.prototype.copy = function copy(dest) {\n  dest.words = new Array(this.length);\n  for (var i = 0; i < this.length; i++)\n    dest.words[i] = this.words[i];\n  dest.length = this.length;\n  dest.sign = this.sign;\n  dest.red = this.red;\n};\n\nBN.prototype.clone = function clone() {\n  var r = new BN(null);\n  this.copy(r);\n  return r;\n};\n\n// Remove leading `0` from `this`\nBN.prototype.strip = function strip() {\n  while (this.length > 1 && this.words[this.length - 1] === 0)\n    this.length--;\n  return this._normSign();\n};\n\nBN.prototype._normSign = function _normSign() {\n  // -0 = 0\n  if (this.length === 1 && this.words[0] === 0)\n    this.sign = false;\n  return this;\n};\n\nBN.prototype.inspect = function inspect() {\n  return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n};\n\n/*\n\nvar zeros = [];\nvar groupSizes = [];\nvar groupBases = [];\n\nvar s = '';\nvar i = -1;\nwhile (++i < BN.wordSize) {\n  zeros[i] = s;\n  s += '0';\n}\ngroupSizes[0] = 0;\ngroupSizes[1] = 0;\ngroupBases[0] = 0;\ngroupBases[1] = 0;\nvar base = 2 - 1;\nwhile (++base < 36 + 1) {\n  var groupSize = 0;\n  var groupBase = 1;\n  while (groupBase < (1 << BN.wordSize) / base) {\n    groupBase *= base;\n    groupSize += 1;\n  }\n  groupSizes[base] = groupSize;\n  groupBases[base] = groupBase;\n}\n\n*/\n\nvar zeros = [\n  '',\n  '0',\n  '00',\n  '000',\n  '0000',\n  '00000',\n  '000000',\n  '0000000',\n  '00000000',\n  '000000000',\n  '0000000000',\n  '00000000000',\n  '000000000000',\n  '0000000000000',\n  '00000000000000',\n  '000000000000000',\n  '0000000000000000',\n  '00000000000000000',\n  '000000000000000000',\n  '0000000000000000000',\n  '00000000000000000000',\n  '000000000000000000000',\n  '0000000000000000000000',\n  '00000000000000000000000',\n  '000000000000000000000000',\n  '0000000000000000000000000'\n];\n\nvar groupSizes = [\n  0, 0,\n  25, 16, 12, 11, 10, 9, 8,\n  8, 7, 7, 7, 7, 6, 6,\n  6, 6, 6, 6, 6, 5, 5,\n  5, 5, 5, 5, 5, 5, 5,\n  5, 5, 5, 5, 5, 5, 5\n];\n\nvar groupBases = [\n  0, 0,\n  33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n  43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n  16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n  6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n  24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n];\n\nBN.prototype.toString = function toString(base, padding) {\n  base = base || 10;\n  if (base === 16 || base === 'hex') {\n    var out = '';\n    var off = 0;\n    var padding = padding | 0 || 1;\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = this.words[i];\n      var word = (((w << off) | carry) & 0xffffff).toString(16);\n      carry = (w >>> (24 - off)) & 0xffffff;\n      if (carry !== 0 || i !== this.length - 1)\n        out = zeros[6 - word.length] + word + out;\n      else\n        out = word + out;\n      off += 2;\n      if (off >= 26) {\n        off -= 26;\n        i--;\n      }\n    }\n    if (carry !== 0)\n      out = carry.toString(16) + out;\n    while (out.length % padding !== 0)\n      out = '0' + out;\n    if (this.sign)\n      out = '-' + out;\n    return out;\n  } else if (base === (base | 0) && base >= 2 && base <= 36) {\n    // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n    var groupSize = groupSizes[base];\n    // var groupBase = Math.pow(base, groupSize);\n    var groupBase = groupBases[base];\n    var out = '';\n    var c = this.clone();\n    c.sign = false;\n    while (c.cmpn(0) !== 0) {\n      var r = c.modn(groupBase).toString(base);\n      c = c.idivn(groupBase);\n\n      if (c.cmpn(0) !== 0)\n        out = zeros[groupSize - r.length] + r + out;\n      else\n        out = r + out;\n    }\n    if (this.cmpn(0) === 0)\n      out = '0' + out;\n    if (this.sign)\n      out = '-' + out;\n    return out;\n  } else {\n    assert(false, 'Base should be between 2 and 36');\n  }\n};\n\nBN.prototype.toJSON = function toJSON() {\n  return this.toString(16);\n};\n\nBN.prototype.toArray = function toArray() {\n  this.strip();\n  var res = new Array(this.byteLength());\n  res[0] = 0;\n\n  var q = this.clone();\n  for (var i = 0; q.cmpn(0) !== 0; i++) {\n    var b = q.andln(0xff);\n    q.ishrn(8);\n\n    // Assume big-endian\n    res[res.length - i - 1] = b;\n  }\n\n  return res;\n};\n\nif (Math.clz32) {\n  BN.prototype._countBits = function _countBits(w) {\n    return 32 - Math.clz32(w);\n  };\n} else {\n  BN.prototype._countBits = function _countBits(w) {\n    var t = w;\n    var r = 0;\n    if (t >= 0x1000) {\n      r += 13;\n      t >>>= 13;\n    }\n    if (t >= 0x40) {\n      r += 7;\n      t >>>= 7;\n    }\n    if (t >= 0x8) {\n      r += 4;\n      t >>>= 4;\n    }\n    if (t >= 0x02) {\n      r += 2;\n      t >>>= 2;\n    }\n    return r + t;\n  };\n}\n\nBN.prototype._zeroBits = function _zeroBits(w) {\n  // Short-cut\n  if (w === 0)\n    return 26;\n\n  var t = w;\n  var r = 0;\n  if ((t & 0x1fff) === 0) {\n    r += 13;\n    t >>>= 13;\n  }\n  if ((t & 0x7f) === 0) {\n    r += 7;\n    t >>>= 7;\n  }\n  if ((t & 0xf) === 0) {\n    r += 4;\n    t >>>= 4;\n  }\n  if ((t & 0x3) === 0) {\n    r += 2;\n    t >>>= 2;\n  }\n  if ((t & 0x1) === 0)\n    r++;\n  return r;\n};\n\n// Return number of used bits in a BN\nBN.prototype.bitLength = function bitLength() {\n  var hi = 0;\n  var w = this.words[this.length - 1];\n  var hi = this._countBits(w);\n  return (this.length - 1) * 26 + hi;\n};\n\n// Number of trailing zero bits\nBN.prototype.zeroBits = function zeroBits() {\n  if (this.cmpn(0) === 0)\n    return 0;\n\n  var r = 0;\n  for (var i = 0; i < this.length; i++) {\n    var b = this._zeroBits(this.words[i]);\n    r += b;\n    if (b !== 26)\n      break;\n  }\n  return r;\n};\n\nBN.prototype.byteLength = function byteLength() {\n  return Math.ceil(this.bitLength() / 8);\n};\n\n// Return negative clone of `this`\nBN.prototype.neg = function neg() {\n  if (this.cmpn(0) === 0)\n    return this.clone();\n\n  var r = this.clone();\n  r.sign = !this.sign;\n  return r;\n};\n\n\n// Or `num` with `this` in-place\nBN.prototype.ior = function ior(num) {\n  this.sign = this.sign || num.sign;\n\n  while (this.length < num.length)\n    this.words[this.length++] = 0;\n\n  for (var i = 0; i < num.length; i++)\n    this.words[i] = this.words[i] | num.words[i];\n\n  return this.strip();\n};\n\n\n// Or `num` with `this`\nBN.prototype.or = function or(num) {\n  if (this.length > num.length)\n    return this.clone().ior(num);\n  else\n    return num.clone().ior(this);\n};\n\n\n// And `num` with `this` in-place\nBN.prototype.iand = function iand(num) {\n  this.sign = this.sign && num.sign;\n\n  // b = min-length(num, this)\n  var b;\n  if (this.length > num.length)\n    b = num;\n  else\n    b = this;\n\n  for (var i = 0; i < b.length; i++)\n    this.words[i] = this.words[i] & num.words[i];\n\n  this.length = b.length;\n\n  return this.strip();\n};\n\n\n// And `num` with `this`\nBN.prototype.and = function and(num) {\n  if (this.length > num.length)\n    return this.clone().iand(num);\n  else\n    return num.clone().iand(this);\n};\n\n\n// Xor `num` with `this` in-place\nBN.prototype.ixor = function ixor(num) {\n  this.sign = this.sign || num.sign;\n\n  // a.length > b.length\n  var a;\n  var b;\n  if (this.length > num.length) {\n    a = this;\n    b = num;\n  } else {\n    a = num;\n    b = this;\n  }\n\n  for (var i = 0; i < b.length; i++)\n    this.words[i] = a.words[i] ^ b.words[i];\n\n  if (this !== a)\n    for (; i < a.length; i++)\n      this.words[i] = a.words[i];\n\n  this.length = a.length;\n\n  return this.strip();\n};\n\n\n// Xor `num` with `this`\nBN.prototype.xor = function xor(num) {\n  if (this.length > num.length)\n    return this.clone().ixor(num);\n  else\n    return num.clone().ixor(this);\n};\n\n\n// Set `bit` of `this`\nBN.prototype.setn = function setn(bit, val) {\n  assert(typeof bit === 'number' && bit >= 0);\n\n  var off = (bit / 26) | 0;\n  var wbit = bit % 26;\n\n  while (this.length <= off)\n    this.words[this.length++] = 0;\n\n  if (val)\n    this.words[off] = this.words[off] | (1 << wbit);\n  else\n    this.words[off] = this.words[off] & ~(1 << wbit);\n\n  return this.strip();\n};\n\n\n// Add `num` to `this` in-place\nBN.prototype.iadd = function iadd(num) {\n  // negative + positive\n  if (this.sign && !num.sign) {\n    this.sign = false;\n    var r = this.isub(num);\n    this.sign = !this.sign;\n    return this._normSign();\n\n  // positive + negative\n  } else if (!this.sign && num.sign) {\n    num.sign = false;\n    var r = this.isub(num);\n    num.sign = true;\n    return r._normSign();\n  }\n\n  // a.length > b.length\n  var a;\n  var b;\n  if (this.length > num.length) {\n    a = this;\n    b = num;\n  } else {\n    a = num;\n    b = this;\n  }\n\n  var carry = 0;\n  for (var i = 0; i < b.length; i++) {\n    var r = a.words[i] + b.words[i] + carry;\n    this.words[i] = r & 0x3ffffff;\n    carry = r >>> 26;\n  }\n  for (; carry !== 0 && i < a.length; i++) {\n    var r = a.words[i] + carry;\n    this.words[i] = r & 0x3ffffff;\n    carry = r >>> 26;\n  }\n\n  this.length = a.length;\n  if (carry !== 0) {\n    this.words[this.length] = carry;\n    this.length++;\n  // Copy the rest of the words\n  } else if (a !== this) {\n    for (; i < a.length; i++)\n      this.words[i] = a.words[i];\n  }\n\n  return this;\n};\n\n// Add `num` to `this`\nBN.prototype.add = function add(num) {\n  if (num.sign && !this.sign) {\n    num.sign = false;\n    var res = this.sub(num);\n    num.sign = true;\n    return res;\n  } else if (!num.sign && this.sign) {\n    this.sign = false;\n    var res = num.sub(this);\n    this.sign = true;\n    return res;\n  }\n\n  if (this.length > num.length)\n    return this.clone().iadd(num);\n  else\n    return num.clone().iadd(this);\n};\n\n// Subtract `num` from `this` in-place\nBN.prototype.isub = function isub(num) {\n  // this - (-num) = this + num\n  if (num.sign) {\n    num.sign = false;\n    var r = this.iadd(num);\n    num.sign = true;\n    return r._normSign();\n\n  // -this - num = -(this + num)\n  } else if (this.sign) {\n    this.sign = false;\n    this.iadd(num);\n    this.sign = true;\n    return this._normSign();\n  }\n\n  // At this point both numbers are positive\n  var cmp = this.cmp(num);\n\n  // Optimization - zeroify\n  if (cmp === 0) {\n    this.sign = false;\n    this.length = 1;\n    this.words[0] = 0;\n    return this;\n  }\n\n  // a > b\n  var a;\n  var b;\n  if (cmp > 0) {\n    a = this;\n    b = num;\n  } else {\n    a = num;\n    b = this;\n  }\n\n  var carry = 0;\n  for (var i = 0; i < b.length; i++) {\n    var r = a.words[i] - b.words[i] + carry;\n    carry = r >> 26;\n    this.words[i] = r & 0x3ffffff;\n  }\n  for (; carry !== 0 && i < a.length; i++) {\n    var r = a.words[i] + carry;\n    carry = r >> 26;\n    this.words[i] = r & 0x3ffffff;\n  }\n\n  // Copy rest of the words\n  if (carry === 0 && i < a.length && a !== this)\n    for (; i < a.length; i++)\n      this.words[i] = a.words[i];\n  this.length = Math.max(this.length, i);\n\n  if (a !== this)\n    this.sign = true;\n\n  return this.strip();\n};\n\n// Subtract `num` from `this`\nBN.prototype.sub = function sub(num) {\n  return this.clone().isub(num);\n};\n\n/*\n// NOTE: This could be potentionally used to generate loop-less multiplications\nfunction _genCombMulTo(alen, blen) {\n  var len = alen + blen - 1;\n  var src = [\n    'var a = this.words, b = num.words, o = out.words, c = 0, w, ' +\n        'mask = 0x3ffffff, shift = 0x4000000;',\n    'out.length = ' + len + ';'\n  ];\n  for (var k = 0; k < len; k++) {\n    var minJ = Math.max(0, k - alen + 1);\n    var maxJ = Math.min(k, blen - 1);\n\n    for (var j = minJ; j <= maxJ; j++) {\n      var i = k - j;\n      var mul = 'a[' + i + '] * b[' + j + ']';\n\n      if (j === minJ) {\n        src.push('w = ' + mul + ' + c;');\n        src.push('c = (w / shift) | 0;');\n      } else {\n        src.push('w += ' + mul + ';');\n        src.push('c += (w / shift) | 0;');\n      }\n      src.push('w &= mask;');\n    }\n    src.push('o[' + k + '] = w;');\n  }\n  src.push('if (c !== 0) {',\n           '  o[' + k + '] = c;',\n           '  out.length++;',\n           '}',\n           'return out;');\n\n  return src.join('\\n');\n}\n*/\n\nBN.prototype._smallMulTo = function _smallMulTo(num, out) {\n  out.sign = num.sign !== this.sign;\n  out.length = this.length + num.length;\n\n  var carry = 0;\n  for (var k = 0; k < out.length - 1; k++) {\n    // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n    // note that ncarry could be >= 0x3ffffff\n    var ncarry = carry >>> 26;\n    var rword = carry & 0x3ffffff;\n    var maxJ = Math.min(k, num.length - 1);\n    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {\n      var i = k - j;\n      var a = this.words[i] | 0;\n      var b = num.words[j] | 0;\n      var r = a * b;\n\n      var lo = r & 0x3ffffff;\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n      lo = (lo + rword) | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = (ncarry + (lo >>> 26)) | 0;\n    }\n    out.words[k] = rword;\n    carry = ncarry;\n  }\n  if (carry !== 0) {\n    out.words[k] = carry;\n  } else {\n    out.length--;\n  }\n\n  return out.strip();\n};\n\nBN.prototype._bigMulTo = function _bigMulTo(num, out) {\n  out.sign = num.sign !== this.sign;\n  out.length = this.length + num.length;\n\n  var carry = 0;\n  var hncarry = 0;\n  for (var k = 0; k < out.length - 1; k++) {\n    // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n    // note that ncarry could be >= 0x3ffffff\n    var ncarry = hncarry;\n    hncarry = 0;\n    var rword = carry & 0x3ffffff;\n    var maxJ = Math.min(k, num.length - 1);\n    for (var j = Math.max(0, k - this.length + 1); j <= maxJ; j++) {\n      var i = k - j;\n      var a = this.words[i] | 0;\n      var b = num.words[j] | 0;\n      var r = a * b;\n\n      var lo = r & 0x3ffffff;\n      ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n      lo = (lo + rword) | 0;\n      rword = lo & 0x3ffffff;\n      ncarry = (ncarry + (lo >>> 26)) | 0;\n\n      hncarry += ncarry >>> 26;\n      ncarry &= 0x3ffffff;\n    }\n    out.words[k] = rword;\n    carry = ncarry;\n    ncarry = hncarry;\n  }\n  if (carry !== 0) {\n    out.words[k] = carry;\n  } else {\n    out.length--;\n  }\n\n  return out.strip();\n};\n\nBN.prototype.mulTo = function mulTo(num, out) {\n  var res;\n  if (this.length + num.length < 63)\n    res = this._smallMulTo(num, out);\n  else\n    res = this._bigMulTo(num, out);\n  return res;\n};\n\n// Multiply `this` by `num`\nBN.prototype.mul = function mul(num) {\n  var out = new BN(null);\n  out.words = new Array(this.length + num.length);\n  return this.mulTo(num, out);\n};\n\n// In-place Multiplication\nBN.prototype.imul = function imul(num) {\n  if (this.cmpn(0) === 0 || num.cmpn(0) === 0) {\n    this.words[0] = 0;\n    this.length = 1;\n    return this;\n  }\n\n  var tlen = this.length;\n  var nlen = num.length;\n\n  this.sign = num.sign !== this.sign;\n  this.length = this.length + num.length;\n  this.words[this.length - 1] = 0;\n\n  for (var k = this.length - 2; k >= 0; k--) {\n    // Sum all words with the same `i + j = k` and accumulate `carry`,\n    // note that carry could be >= 0x3ffffff\n    var carry = 0;\n    var rword = 0;\n    var maxJ = Math.min(k, nlen - 1);\n    for (var j = Math.max(0, k - tlen + 1); j <= maxJ; j++) {\n      var i = k - j;\n      var a = this.words[i];\n      var b = num.words[j];\n      var r = a * b;\n\n      var lo = r & 0x3ffffff;\n      carry += (r / 0x4000000) | 0;\n      lo += rword;\n      rword = lo & 0x3ffffff;\n      carry += lo >>> 26;\n    }\n    this.words[k] = rword;\n    this.words[k + 1] += carry;\n    carry = 0;\n  }\n\n  // Propagate overflows\n  var carry = 0;\n  for (var i = 1; i < this.length; i++) {\n    var w = this.words[i] + carry;\n    this.words[i] = w & 0x3ffffff;\n    carry = w >>> 26;\n  }\n\n  return this.strip();\n};\n\nBN.prototype.imuln = function imuln(num) {\n  assert(typeof num === 'number');\n\n  // Carry\n  var carry = 0;\n  for (var i = 0; i < this.length; i++) {\n    var w = this.words[i] * num;\n    var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n    carry >>= 26;\n    carry += (w / 0x4000000) | 0;\n    // NOTE: lo is 27bit maximum\n    carry += lo >>> 26;\n    this.words[i] = lo & 0x3ffffff;\n  }\n\n  if (carry !== 0) {\n    this.words[i] = carry;\n    this.length++;\n  }\n\n  return this;\n};\n\n// `this` * `this`\nBN.prototype.sqr = function sqr() {\n  return this.mul(this);\n};\n\n// `this` * `this` in-place\nBN.prototype.isqr = function isqr() {\n  return this.mul(this);\n};\n\n// Shift-left in-place\nBN.prototype.ishln = function ishln(bits) {\n  assert(typeof bits === 'number' && bits >= 0);\n  var r = bits % 26;\n  var s = (bits - r) / 26;\n  var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n\n  if (r !== 0) {\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var newCarry = this.words[i] & carryMask;\n      var c = (this.words[i] - newCarry) << r;\n      this.words[i] = c | carry;\n      carry = newCarry >>> (26 - r);\n    }\n    if (carry) {\n      this.words[i] = carry;\n      this.length++;\n    }\n  }\n\n  if (s !== 0) {\n    for (var i = this.length - 1; i >= 0; i--)\n      this.words[i + s] = this.words[i];\n    for (var i = 0; i < s; i++)\n      this.words[i] = 0;\n    this.length += s;\n  }\n\n  return this.strip();\n};\n\n// Shift-right in-place\n// NOTE: `hint` is a lowest bit before trailing zeroes\n// NOTE: if `extended` is present - it will be filled with destroyed bits\nBN.prototype.ishrn = function ishrn(bits, hint, extended) {\n  assert(typeof bits === 'number' && bits >= 0);\n  var h;\n  if (hint)\n    h = (hint - (hint % 26)) / 26;\n  else\n    h = 0;\n\n  var r = bits % 26;\n  var s = Math.min((bits - r) / 26, this.length);\n  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n  var maskedWords = extended;\n\n  h -= s;\n  h = Math.max(0, h);\n\n  // Extended mode, copy masked part\n  if (maskedWords) {\n    for (var i = 0; i < s; i++)\n      maskedWords.words[i] = this.words[i];\n    maskedWords.length = s;\n  }\n\n  if (s === 0) {\n    // No-op, we should not move anything at all\n  } else if (this.length > s) {\n    this.length -= s;\n    for (var i = 0; i < this.length; i++)\n      this.words[i] = this.words[i + s];\n  } else {\n    this.words[0] = 0;\n    this.length = 1;\n  }\n\n  var carry = 0;\n  for (var i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n    var word = this.words[i];\n    this.words[i] = (carry << (26 - r)) | (word >>> r);\n    carry = word & mask;\n  }\n\n  // Push carried bits as a mask\n  if (maskedWords && carry !== 0)\n    maskedWords.words[maskedWords.length++] = carry;\n\n  if (this.length === 0) {\n    this.words[0] = 0;\n    this.length = 1;\n  }\n\n  this.strip();\n\n  return this;\n};\n\n// Shift-left\nBN.prototype.shln = function shln(bits) {\n  return this.clone().ishln(bits);\n};\n\n// Shift-right\nBN.prototype.shrn = function shrn(bits) {\n  return this.clone().ishrn(bits);\n};\n\n// Test if n bit is set\nBN.prototype.testn = function testn(bit) {\n  assert(typeof bit === 'number' && bit >= 0);\n  var r = bit % 26;\n  var s = (bit - r) / 26;\n  var q = 1 << r;\n\n  // Fast case: bit is much higher than all existing words\n  if (this.length <= s) {\n    return false;\n  }\n\n  // Check bit and return\n  var w = this.words[s];\n\n  return !!(w & q);\n};\n\n// Return only lowers bits of number (in-place)\nBN.prototype.imaskn = function imaskn(bits) {\n  assert(typeof bits === 'number' && bits >= 0);\n  var r = bits % 26;\n  var s = (bits - r) / 26;\n\n  assert(!this.sign, 'imaskn works only with positive numbers');\n\n  if (r !== 0)\n    s++;\n  this.length = Math.min(s, this.length);\n\n  if (r !== 0) {\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    this.words[this.length - 1] &= mask;\n  }\n\n  return this.strip();\n};\n\n// Return only lowers bits of number\nBN.prototype.maskn = function maskn(bits) {\n  return this.clone().imaskn(bits);\n};\n\n// Add plain number `num` to `this`\nBN.prototype.iaddn = function iaddn(num) {\n  assert(typeof num === 'number');\n  if (num < 0)\n    return this.isubn(-num);\n\n  // Possible sign change\n  if (this.sign) {\n    if (this.length === 1 && this.words[0] < num) {\n      this.words[0] = num - this.words[0];\n      this.sign = false;\n      return this;\n    }\n\n    this.sign = false;\n    this.isubn(num);\n    this.sign = true;\n    return this;\n  }\n\n  // Add without checks\n  return this._iaddn(num);\n};\n\nBN.prototype._iaddn = function _iaddn(num) {\n  this.words[0] += num;\n\n  // Carry\n  for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n    this.words[i] -= 0x4000000;\n    if (i === this.length - 1)\n      this.words[i + 1] = 1;\n    else\n      this.words[i + 1]++;\n  }\n  this.length = Math.max(this.length, i + 1);\n\n  return this;\n};\n\n// Subtract plain number `num` from `this`\nBN.prototype.isubn = function isubn(num) {\n  assert(typeof num === 'number');\n  if (num < 0)\n    return this.iaddn(-num);\n\n  if (this.sign) {\n    this.sign = false;\n    this.iaddn(num);\n    this.sign = true;\n    return this;\n  }\n\n  this.words[0] -= num;\n\n  // Carry\n  for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n    this.words[i] += 0x4000000;\n    this.words[i + 1] -= 1;\n  }\n\n  return this.strip();\n};\n\nBN.prototype.addn = function addn(num) {\n  return this.clone().iaddn(num);\n};\n\nBN.prototype.subn = function subn(num) {\n  return this.clone().isubn(num);\n};\n\nBN.prototype.iabs = function iabs() {\n  this.sign = false;\n\n  return this;\n};\n\nBN.prototype.abs = function abs() {\n  return this.clone().iabs();\n};\n\nBN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n  // Bigger storage is needed\n  var len = num.length + shift;\n  var i;\n  if (this.words.length < len) {\n    var t = new Array(len);\n    for (var i = 0; i < this.length; i++)\n      t[i] = this.words[i];\n    this.words = t;\n  } else {\n    i = this.length;\n  }\n\n  // Zeroify rest\n  this.length = Math.max(this.length, len);\n  for (; i < this.length; i++)\n    this.words[i] = 0;\n\n  var carry = 0;\n  for (var i = 0; i < num.length; i++) {\n    var w = this.words[i + shift] + carry;\n    var right = num.words[i] * mul;\n    w -= right & 0x3ffffff;\n    carry = (w >> 26) - ((right / 0x4000000) | 0);\n    this.words[i + shift] = w & 0x3ffffff;\n  }\n  for (; i < this.length - shift; i++) {\n    var w = this.words[i + shift] + carry;\n    carry = w >> 26;\n    this.words[i + shift] = w & 0x3ffffff;\n  }\n\n  if (carry === 0)\n    return this.strip();\n\n  // Subtraction overflow\n  assert(carry === -1);\n  carry = 0;\n  for (var i = 0; i < this.length; i++) {\n    var w = -this.words[i] + carry;\n    carry = w >> 26;\n    this.words[i] = w & 0x3ffffff;\n  }\n  this.sign = true;\n\n  return this.strip();\n};\n\nBN.prototype._wordDiv = function _wordDiv(num, mode) {\n  var shift = this.length - num.length;\n\n  var a = this.clone();\n  var b = num;\n\n  // Normalize\n  var bhi = b.words[b.length - 1];\n  var bhiBits = this._countBits(bhi);\n  shift = 26 - bhiBits;\n  if (shift !== 0) {\n    b = b.shln(shift);\n    a.ishln(shift);\n    bhi = b.words[b.length - 1];\n  }\n\n  // Initialize quotient\n  var m = a.length - b.length;\n  var q;\n\n  if (mode !== 'mod') {\n    q = new BN(null);\n    q.length = m + 1;\n    q.words = new Array(q.length);\n    for (var i = 0; i < q.length; i++)\n      q.words[i] = 0;\n  }\n\n  var diff = a.clone()._ishlnsubmul(b, 1, m);\n  if (!diff.sign) {\n    a = diff;\n    if (q)\n      q.words[m] = 1;\n  }\n\n  for (var j = m - 1; j >= 0; j--) {\n    var qj = a.words[b.length + j] * 0x4000000 + a.words[b.length + j - 1];\n\n    // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n    // (0x7ffffff)\n    qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n    a._ishlnsubmul(b, qj, j);\n    while (a.sign) {\n      qj--;\n      a.sign = false;\n      a._ishlnsubmul(b, 1, j);\n      if (a.cmpn(0) !== 0)\n        a.sign = !a.sign;\n    }\n    if (q)\n      q.words[j] = qj;\n  }\n  if (q)\n    q.strip();\n  a.strip();\n\n  // Denormalize\n  if (mode !== 'div' && shift !== 0)\n    a.ishrn(shift);\n  return { div: q ? q : null, mod: a };\n};\n\nBN.prototype.divmod = function divmod(num, mode) {\n  assert(num.cmpn(0) !== 0);\n\n  if (this.sign && !num.sign) {\n    var res = this.neg().divmod(num, mode);\n    var div;\n    var mod;\n    if (mode !== 'mod')\n      div = res.div.neg();\n    if (mode !== 'div')\n      mod = res.mod.cmpn(0) === 0 ? res.mod : num.sub(res.mod);\n    return {\n      div: div,\n      mod: mod\n    };\n  } else if (!this.sign && num.sign) {\n    var res = this.divmod(num.neg(), mode);\n    var div;\n    if (mode !== 'mod')\n      div = res.div.neg();\n    return { div: div, mod: res.mod };\n  } else if (this.sign && num.sign) {\n    return this.neg().divmod(num.neg(), mode);\n  }\n\n  // Both numbers are positive at this point\n\n  // Strip both numbers to approximate shift value\n  if (num.length > this.length || this.cmp(num) < 0)\n    return { div: new BN(0), mod: this };\n\n  // Very short reduction\n  if (num.length === 1) {\n    if (mode === 'div')\n      return { div: this.divn(num.words[0]), mod: null };\n    else if (mode === 'mod')\n      return { div: null, mod: new BN(this.modn(num.words[0])) };\n    return {\n      div: this.divn(num.words[0]),\n      mod: new BN(this.modn(num.words[0]))\n    };\n  }\n\n  return this._wordDiv(num, mode);\n};\n\n// Find `this` / `num`\nBN.prototype.div = function div(num) {\n  return this.divmod(num, 'div').div;\n};\n\n// Find `this` % `num`\nBN.prototype.mod = function mod(num) {\n  return this.divmod(num, 'mod').mod;\n};\n\n// Find Round(`this` / `num`)\nBN.prototype.divRound = function divRound(num) {\n  var dm = this.divmod(num);\n\n  // Fast case - exact division\n  if (dm.mod.cmpn(0) === 0)\n    return dm.div;\n\n  var mod = dm.div.sign ? dm.mod.isub(num) : dm.mod;\n\n  var half = num.shrn(1);\n  var r2 = num.andln(1);\n  var cmp = mod.cmp(half);\n\n  // Round down\n  if (cmp < 0 || r2 === 1 && cmp === 0)\n    return dm.div;\n\n  // Round up\n  return dm.div.sign ? dm.div.isubn(1) : dm.div.iaddn(1);\n};\n\nBN.prototype.modn = function modn(num) {\n  assert(num <= 0x3ffffff);\n  var p = (1 << 26) % num;\n\n  var acc = 0;\n  for (var i = this.length - 1; i >= 0; i--)\n    acc = (p * acc + this.words[i]) % num;\n\n  return acc;\n};\n\n// In-place division by number\nBN.prototype.idivn = function idivn(num) {\n  assert(num <= 0x3ffffff);\n\n  var carry = 0;\n  for (var i = this.length - 1; i >= 0; i--) {\n    var w = this.words[i] + carry * 0x4000000;\n    this.words[i] = (w / num) | 0;\n    carry = w % num;\n  }\n\n  return this.strip();\n};\n\nBN.prototype.divn = function divn(num) {\n  return this.clone().idivn(num);\n};\n\nBN.prototype.egcd = function egcd(p) {\n  assert(!p.sign);\n  assert(p.cmpn(0) !== 0);\n\n  var x = this;\n  var y = p.clone();\n\n  if (x.sign)\n    x = x.mod(p);\n  else\n    x = x.clone();\n\n  // A * x + B * y = x\n  var A = new BN(1);\n  var B = new BN(0);\n\n  // C * x + D * y = y\n  var C = new BN(0);\n  var D = new BN(1);\n\n  var g = 0;\n\n  while (x.isEven() && y.isEven()) {\n    x.ishrn(1);\n    y.ishrn(1);\n    ++g;\n  }\n\n  var yp = y.clone();\n  var xp = x.clone();\n\n  while (x.cmpn(0) !== 0) {\n    while (x.isEven()) {\n      x.ishrn(1);\n      if (A.isEven() && B.isEven()) {\n        A.ishrn(1);\n        B.ishrn(1);\n      } else {\n        A.iadd(yp).ishrn(1);\n        B.isub(xp).ishrn(1);\n      }\n    }\n\n    while (y.isEven()) {\n      y.ishrn(1);\n      if (C.isEven() && D.isEven()) {\n        C.ishrn(1);\n        D.ishrn(1);\n      } else {\n        C.iadd(yp).ishrn(1);\n        D.isub(xp).ishrn(1);\n      }\n    }\n\n    if (x.cmp(y) >= 0) {\n      x.isub(y);\n      A.isub(C);\n      B.isub(D);\n    } else {\n      y.isub(x);\n      C.isub(A);\n      D.isub(B);\n    }\n  }\n\n  return {\n    a: C,\n    b: D,\n    gcd: y.ishln(g)\n  };\n};\n\n// This is reduced incarnation of the binary EEA\n// above, designated to invert members of the\n// _prime_ fields F(p) at a maximal speed\nBN.prototype._invmp = function _invmp(p) {\n  assert(!p.sign);\n  assert(p.cmpn(0) !== 0);\n\n  var a = this;\n  var b = p.clone();\n\n  if (a.sign)\n    a = a.mod(p);\n  else\n    a = a.clone();\n\n  var x1 = new BN(1);\n  var x2 = new BN(0);\n\n  var delta = b.clone();\n\n  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n    while (a.isEven()) {\n      a.ishrn(1);\n      if (x1.isEven())\n        x1.ishrn(1);\n      else\n        x1.iadd(delta).ishrn(1);\n    }\n    while (b.isEven()) {\n      b.ishrn(1);\n      if (x2.isEven())\n        x2.ishrn(1);\n      else\n        x2.iadd(delta).ishrn(1);\n    }\n    if (a.cmp(b) >= 0) {\n      a.isub(b);\n      x1.isub(x2);\n    } else {\n      b.isub(a);\n      x2.isub(x1);\n    }\n  }\n  if (a.cmpn(1) === 0)\n    return x1;\n  else\n    return x2;\n};\n\nBN.prototype.gcd = function gcd(num) {\n  if (this.cmpn(0) === 0)\n    return num.clone();\n  if (num.cmpn(0) === 0)\n    return this.clone();\n\n  var a = this.clone();\n  var b = num.clone();\n  a.sign = false;\n  b.sign = false;\n\n  // Remove common factor of two\n  for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n    a.ishrn(1);\n    b.ishrn(1);\n  }\n\n  do {\n    while (a.isEven())\n      a.ishrn(1);\n    while (b.isEven())\n      b.ishrn(1);\n\n    var r = a.cmp(b);\n    if (r < 0) {\n      // Swap `a` and `b` to make `a` always bigger than `b`\n      var t = a;\n      a = b;\n      b = t;\n    } else if (r === 0 || b.cmpn(1) === 0) {\n      break;\n    }\n\n    a.isub(b);\n  } while (true);\n\n  return b.ishln(shift);\n};\n\n// Invert number in the field F(num)\nBN.prototype.invm = function invm(num) {\n  return this.egcd(num).a.mod(num);\n};\n\nBN.prototype.isEven = function isEven() {\n  return (this.words[0] & 1) === 0;\n};\n\nBN.prototype.isOdd = function isOdd() {\n  return (this.words[0] & 1) === 1;\n};\n\n// And first word and num\nBN.prototype.andln = function andln(num) {\n  return this.words[0] & num;\n};\n\n// Increment at the bit position in-line\nBN.prototype.bincn = function bincn(bit) {\n  assert(typeof bit === 'number');\n  var r = bit % 26;\n  var s = (bit - r) / 26;\n  var q = 1 << r;\n\n  // Fast case: bit is much higher than all existing words\n  if (this.length <= s) {\n    for (var i = this.length; i < s + 1; i++)\n      this.words[i] = 0;\n    this.words[s] |= q;\n    this.length = s + 1;\n    return this;\n  }\n\n  // Add bit and propagate, if needed\n  var carry = q;\n  for (var i = s; carry !== 0 && i < this.length; i++) {\n    var w = this.words[i];\n    w += carry;\n    carry = w >>> 26;\n    w &= 0x3ffffff;\n    this.words[i] = w;\n  }\n  if (carry !== 0) {\n    this.words[i] = carry;\n    this.length++;\n  }\n  return this;\n};\n\nBN.prototype.cmpn = function cmpn(num) {\n  var sign = num < 0;\n  if (sign)\n    num = -num;\n\n  if (this.sign && !sign)\n    return -1;\n  else if (!this.sign && sign)\n    return 1;\n\n  num &= 0x3ffffff;\n  this.strip();\n\n  var res;\n  if (this.length > 1) {\n    res = 1;\n  } else {\n    var w = this.words[0];\n    res = w === num ? 0 : w < num ? -1 : 1;\n  }\n  if (this.sign)\n    res = -res;\n  return res;\n};\n\n// Compare two numbers and return:\n// 1 - if `this` > `num`\n// 0 - if `this` == `num`\n// -1 - if `this` < `num`\nBN.prototype.cmp = function cmp(num) {\n  if (this.sign && !num.sign)\n    return -1;\n  else if (!this.sign && num.sign)\n    return 1;\n\n  var res = this.ucmp(num);\n  if (this.sign)\n    return -res;\n  else\n    return res;\n};\n\n// Unsigned comparison\nBN.prototype.ucmp = function ucmp(num) {\n  // At this point both numbers have the same sign\n  if (this.length > num.length)\n    return 1;\n  else if (this.length < num.length)\n    return -1;\n\n  var res = 0;\n  for (var i = this.length - 1; i >= 0; i--) {\n    var a = this.words[i];\n    var b = num.words[i];\n\n    if (a === b)\n      continue;\n    if (a < b)\n      res = -1;\n    else if (a > b)\n      res = 1;\n    break;\n  }\n  return res;\n};\n\n//\n// A reduce context, could be using montgomery or something better, depending\n// on the `m` itself.\n//\nBN.red = function red(num) {\n  return new Red(num);\n};\n\nBN.prototype.toRed = function toRed(ctx) {\n  assert(!this.red, 'Already a number in reduction context');\n  assert(!this.sign, 'red works only with positives');\n  return ctx.convertTo(this)._forceRed(ctx);\n};\n\nBN.prototype.fromRed = function fromRed() {\n  assert(this.red, 'fromRed works only with numbers in reduction context');\n  return this.red.convertFrom(this);\n};\n\nBN.prototype._forceRed = function _forceRed(ctx) {\n  this.red = ctx;\n  return this;\n};\n\nBN.prototype.forceRed = function forceRed(ctx) {\n  assert(!this.red, 'Already a number in reduction context');\n  return this._forceRed(ctx);\n};\n\nBN.prototype.redAdd = function redAdd(num) {\n  assert(this.red, 'redAdd works only with red numbers');\n  return this.red.add(this, num);\n};\n\nBN.prototype.redIAdd = function redIAdd(num) {\n  assert(this.red, 'redIAdd works only with red numbers');\n  return this.red.iadd(this, num);\n};\n\nBN.prototype.redSub = function redSub(num) {\n  assert(this.red, 'redSub works only with red numbers');\n  return this.red.sub(this, num);\n};\n\nBN.prototype.redISub = function redISub(num) {\n  assert(this.red, 'redISub works only with red numbers');\n  return this.red.isub(this, num);\n};\n\nBN.prototype.redShl = function redShl(num) {\n  assert(this.red, 'redShl works only with red numbers');\n  return this.red.shl(this, num);\n};\n\nBN.prototype.redMul = function redMul(num) {\n  assert(this.red, 'redMul works only with red numbers');\n  this.red._verify2(this, num);\n  return this.red.mul(this, num);\n};\n\nBN.prototype.redIMul = function redIMul(num) {\n  assert(this.red, 'redMul works only with red numbers');\n  this.red._verify2(this, num);\n  return this.red.imul(this, num);\n};\n\nBN.prototype.redSqr = function redSqr() {\n  assert(this.red, 'redSqr works only with red numbers');\n  this.red._verify1(this);\n  return this.red.sqr(this);\n};\n\nBN.prototype.redISqr = function redISqr() {\n  assert(this.red, 'redISqr works only with red numbers');\n  this.red._verify1(this);\n  return this.red.isqr(this);\n};\n\n// Square root over p\nBN.prototype.redSqrt = function redSqrt() {\n  assert(this.red, 'redSqrt works only with red numbers');\n  this.red._verify1(this);\n  return this.red.sqrt(this);\n};\n\nBN.prototype.redInvm = function redInvm() {\n  assert(this.red, 'redInvm works only with red numbers');\n  this.red._verify1(this);\n  return this.red.invm(this);\n};\n\n// Return negative clone of `this` % `red modulo`\nBN.prototype.redNeg = function redNeg() {\n  assert(this.red, 'redNeg works only with red numbers');\n  this.red._verify1(this);\n  return this.red.neg(this);\n};\n\nBN.prototype.redPow = function redPow(num) {\n  assert(this.red && !num.red, 'redPow(normalNum)');\n  this.red._verify1(this);\n  return this.red.pow(this, num);\n};\n\n// Prime numbers with efficient reduction\nvar primes = {\n  k256: null,\n  p224: null,\n  p192: null,\n  p25519: null\n};\n\n// Pseudo-Mersenne prime\nfunction MPrime(name, p) {\n  // P = 2 ^ N - K\n  this.name = name;\n  this.p = new BN(p, 16);\n  this.n = this.p.bitLength();\n  this.k = new BN(1).ishln(this.n).isub(this.p);\n\n  this.tmp = this._tmp();\n}\n\nMPrime.prototype._tmp = function _tmp() {\n  var tmp = new BN(null);\n  tmp.words = new Array(Math.ceil(this.n / 13));\n  return tmp;\n};\n\nMPrime.prototype.ireduce = function ireduce(num) {\n  // Assumes that `num` is less than `P^2`\n  // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n  var r = num;\n  var rlen;\n\n  do {\n    this.split(r, this.tmp);\n    r = this.imulK(r);\n    r = r.iadd(this.tmp);\n    rlen = r.bitLength();\n  } while (rlen > this.n);\n\n  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n  if (cmp === 0) {\n    r.words[0] = 0;\n    r.length = 1;\n  } else if (cmp > 0) {\n    r.isub(this.p);\n  } else {\n    r.strip();\n  }\n\n  return r;\n};\n\nMPrime.prototype.split = function split(input, out) {\n  input.ishrn(this.n, 0, out);\n};\n\nMPrime.prototype.imulK = function imulK(num) {\n  return num.imul(this.k);\n};\n\nfunction K256() {\n  MPrime.call(\n    this,\n    'k256',\n    'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n}\ninherits(K256, MPrime);\n\nK256.prototype.split = function split(input, output) {\n  // 256 = 9 * 26 + 22\n  var mask = 0x3fffff;\n\n  var outLen = Math.min(input.length, 9);\n  for (var i = 0; i < outLen; i++)\n    output.words[i] = input.words[i];\n  output.length = outLen;\n\n  if (input.length <= 9) {\n    input.words[0] = 0;\n    input.length = 1;\n    return;\n  }\n\n  // Shift by 9 limbs\n  var prev = input.words[9];\n  output.words[output.length++] = prev & mask;\n\n  for (var i = 10; i < input.length; i++) {\n    var next = input.words[i];\n    input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n    prev = next;\n  }\n  input.words[i - 10] = prev >>> 22;\n  input.length -= 9;\n};\n\nK256.prototype.imulK = function imulK(num) {\n  // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n  num.words[num.length] = 0;\n  num.words[num.length + 1] = 0;\n  num.length += 2;\n\n  // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n  var hi;\n  var lo = 0;\n  for (var i = 0; i < num.length; i++) {\n    var w = num.words[i];\n    hi = w * 0x40;\n    lo += w * 0x3d1;\n    hi += (lo / 0x4000000) | 0;\n    lo &= 0x3ffffff;\n\n    num.words[i] = lo;\n\n    lo = hi;\n  }\n\n  // Fast length reduction\n  if (num.words[num.length - 1] === 0) {\n    num.length--;\n    if (num.words[num.length - 1] === 0)\n      num.length--;\n  }\n  return num;\n};\n\nfunction P224() {\n  MPrime.call(\n    this,\n    'p224',\n    'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n}\ninherits(P224, MPrime);\n\nfunction P192() {\n  MPrime.call(\n    this,\n    'p192',\n    'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n}\ninherits(P192, MPrime);\n\nfunction P25519() {\n  // 2 ^ 255 - 19\n  MPrime.call(\n    this,\n    '25519',\n    '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n}\ninherits(P25519, MPrime);\n\nP25519.prototype.imulK = function imulK(num) {\n  // K = 0x13\n  var carry = 0;\n  for (var i = 0; i < num.length; i++) {\n    var hi = num.words[i] * 0x13 + carry;\n    var lo = hi & 0x3ffffff;\n    hi >>>= 26;\n\n    num.words[i] = lo;\n    carry = hi;\n  }\n  if (carry !== 0)\n    num.words[num.length++] = carry;\n  return num;\n};\n\n// Exported mostly for testing purposes, use plain name instead\nBN._prime = function prime(name) {\n  // Cached version of prime\n  if (primes[name])\n    return primes[name];\n\n  var prime;\n  if (name === 'k256')\n    prime = new K256();\n  else if (name === 'p224')\n    prime = new P224();\n  else if (name === 'p192')\n    prime = new P192();\n  else if (name === 'p25519')\n    prime = new P25519();\n  else\n    throw new Error('Unknown prime ' + name);\n  primes[name] = prime;\n\n  return prime;\n};\n\n//\n// Base reduction engine\n//\nfunction Red(m) {\n  if (typeof m === 'string') {\n    var prime = BN._prime(m);\n    this.m = prime.p;\n    this.prime = prime;\n  } else {\n    this.m = m;\n    this.prime = null;\n  }\n}\n\nRed.prototype._verify1 = function _verify1(a) {\n  assert(!a.sign, 'red works only with positives');\n  assert(a.red, 'red works only with red numbers');\n};\n\nRed.prototype._verify2 = function _verify2(a, b) {\n  assert(!a.sign && !b.sign, 'red works only with positives');\n  assert(a.red && a.red === b.red,\n         'red works only with red numbers');\n};\n\nRed.prototype.imod = function imod(a) {\n  if (this.prime)\n    return this.prime.ireduce(a)._forceRed(this);\n  return a.mod(this.m)._forceRed(this);\n};\n\nRed.prototype.neg = function neg(a) {\n  var r = a.clone();\n  r.sign = !r.sign;\n  return r.iadd(this.m)._forceRed(this);\n};\n\nRed.prototype.add = function add(a, b) {\n  this._verify2(a, b);\n\n  var res = a.add(b);\n  if (res.cmp(this.m) >= 0)\n    res.isub(this.m);\n  return res._forceRed(this);\n};\n\nRed.prototype.iadd = function iadd(a, b) {\n  this._verify2(a, b);\n\n  var res = a.iadd(b);\n  if (res.cmp(this.m) >= 0)\n    res.isub(this.m);\n  return res;\n};\n\nRed.prototype.sub = function sub(a, b) {\n  this._verify2(a, b);\n\n  var res = a.sub(b);\n  if (res.cmpn(0) < 0)\n    res.iadd(this.m);\n  return res._forceRed(this);\n};\n\nRed.prototype.isub = function isub(a, b) {\n  this._verify2(a, b);\n\n  var res = a.isub(b);\n  if (res.cmpn(0) < 0)\n    res.iadd(this.m);\n  return res;\n};\n\nRed.prototype.shl = function shl(a, num) {\n  this._verify1(a);\n  return this.imod(a.shln(num));\n};\n\nRed.prototype.imul = function imul(a, b) {\n  this._verify2(a, b);\n  return this.imod(a.imul(b));\n};\n\nRed.prototype.mul = function mul(a, b) {\n  this._verify2(a, b);\n  return this.imod(a.mul(b));\n};\n\nRed.prototype.isqr = function isqr(a) {\n  return this.imul(a, a);\n};\n\nRed.prototype.sqr = function sqr(a) {\n  return this.mul(a, a);\n};\n\nRed.prototype.sqrt = function sqrt(a) {\n  if (a.cmpn(0) === 0)\n    return a.clone();\n\n  var mod3 = this.m.andln(3);\n  assert(mod3 % 2 === 1);\n\n  // Fast case\n  if (mod3 === 3) {\n    var pow = this.m.add(new BN(1)).ishrn(2);\n    var r = this.pow(a, pow);\n    return r;\n  }\n\n  // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n  //\n  // Find Q and S, that Q * 2 ^ S = (P - 1)\n  var q = this.m.subn(1);\n  var s = 0;\n  while (q.cmpn(0) !== 0 && q.andln(1) === 0) {\n    s++;\n    q.ishrn(1);\n  }\n  assert(q.cmpn(0) !== 0);\n\n  var one = new BN(1).toRed(this);\n  var nOne = one.redNeg();\n\n  // Find quadratic non-residue\n  // NOTE: Max is such because of generalized Riemann hypothesis.\n  var lpow = this.m.subn(1).ishrn(1);\n  var z = this.m.bitLength();\n  z = new BN(2 * z * z).toRed(this);\n  while (this.pow(z, lpow).cmp(nOne) !== 0)\n    z.redIAdd(nOne);\n\n  var c = this.pow(z, q);\n  var r = this.pow(a, q.addn(1).ishrn(1));\n  var t = this.pow(a, q);\n  var m = s;\n  while (t.cmp(one) !== 0) {\n    var tmp = t;\n    for (var i = 0; tmp.cmp(one) !== 0; i++)\n      tmp = tmp.redSqr();\n    assert(i < m);\n    var b = this.pow(c, new BN(1).ishln(m - i - 1));\n\n    r = r.redMul(b);\n    c = b.redSqr();\n    t = t.redMul(c);\n    m = i;\n  }\n\n  return r;\n};\n\nRed.prototype.invm = function invm(a) {\n  var inv = a._invmp(this.m);\n  if (inv.sign) {\n    inv.sign = false;\n    return this.imod(inv).redNeg();\n  } else {\n    return this.imod(inv);\n  }\n};\n\nRed.prototype.pow = function pow(a, num) {\n  var w = [];\n\n  if (num.cmpn(0) === 0)\n    return new BN(1);\n\n  var q = num.clone();\n\n  while (q.cmpn(0) !== 0) {\n    w.push(q.andln(1));\n    q.ishrn(1);\n  }\n\n  // Skip leading zeroes\n  var res = a;\n  for (var i = 0; i < w.length; i++, res = this.sqr(res))\n    if (w[i] !== 0)\n      break;\n\n  if (++i < w.length) {\n    for (var q = this.sqr(res); i < w.length; i++, q = this.sqr(q)) {\n      if (w[i] === 0)\n        continue;\n      res = this.mul(res, q);\n    }\n  }\n\n  return res;\n};\n\nRed.prototype.convertTo = function convertTo(num) {\n  return num.clone();\n};\n\nRed.prototype.convertFrom = function convertFrom(num) {\n  var res = num.clone();\n  res.red = null;\n  return res;\n};\n\n//\n// Montgomery method engine\n//\n\nBN.mont = function mont(num) {\n  return new Mont(num);\n};\n\nfunction Mont(m) {\n  Red.call(this, m);\n\n  this.shift = this.m.bitLength();\n  if (this.shift % 26 !== 0)\n    this.shift += 26 - (this.shift % 26);\n  this.r = new BN(1).ishln(this.shift);\n  this.r2 = this.imod(this.r.sqr());\n  this.rinv = this.r._invmp(this.m);\n\n  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n  this.minv.sign = true;\n  this.minv = this.minv.mod(this.r);\n}\ninherits(Mont, Red);\n\nMont.prototype.convertTo = function convertTo(num) {\n  return this.imod(num.shln(this.shift));\n};\n\nMont.prototype.convertFrom = function convertFrom(num) {\n  var r = this.imod(num.mul(this.rinv));\n  r.red = null;\n  return r;\n};\n\nMont.prototype.imul = function imul(a, b) {\n  if (a.cmpn(0) === 0 || b.cmpn(0) === 0) {\n    a.words[0] = 0;\n    a.length = 1;\n    return a;\n  }\n\n  var t = a.imul(b);\n  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n  var u = t.isub(c).ishrn(this.shift);\n  var res = u;\n  if (u.cmp(this.m) >= 0)\n    res = u.isub(this.m);\n  else if (u.cmpn(0) < 0)\n    res = u.iadd(this.m);\n\n  return res._forceRed(this);\n};\n\nMont.prototype.mul = function mul(a, b) {\n  if (a.cmpn(0) === 0 || b.cmpn(0) === 0)\n    return new BN(0)._forceRed(this);\n\n  var t = a.mul(b);\n  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n  var u = t.isub(c).ishrn(this.shift);\n  var res = u;\n  if (u.cmp(this.m) >= 0)\n    res = u.isub(this.m);\n  else if (u.cmpn(0) < 0)\n    res = u.iadd(this.m);\n\n  return res._forceRed(this);\n};\n\nMont.prototype.invm = function invm(a) {\n  // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n  var res = this.imod(a._invmp(this.m).mul(this.r2));\n  return res._forceRed(this);\n};\n\n})(typeof module === 'undefined' || module, this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}