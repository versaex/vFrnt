{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { parse } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToString, formatToParts, formatHTMLMessage } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n  if (!c2) {\n    return c1;\n  }\n  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {\n    all[k] = __assign(__assign({}, c1[k]), c2[k] || {});\n    return all;\n  }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n  if (!configs) {\n    return defaultConfig;\n  }\n  return Object.keys(defaultConfig).reduce(function (all, k) {\n    all[k] = mergeConfig(defaultConfig[k], configs[k]);\n    return all;\n  }, __assign({}, defaultConfig));\n}\nexport function createDefaultFormatters(cache) {\n  if (cache === void 0) {\n    cache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n  }\n  return {\n    getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n    getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n    getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules)\n  };\n}\nvar IntlMessageFormat = /** @class */function () {\n  function IntlMessageFormat(message, locales, overrideFormats, opts) {\n    var _this = this;\n    if (locales === void 0) {\n      locales = IntlMessageFormat.defaultLocale;\n    }\n    this.formatterCache = {\n      number: {},\n      dateTime: {},\n      pluralRules: {}\n    };\n    this.format = function (values) {\n      return formatToString(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\n    };\n    this.formatToParts = function (values) {\n      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n    };\n    this.formatHTMLMessage = function (values) {\n      return formatHTMLMessage(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\n    };\n    this.resolvedOptions = function () {\n      return {\n        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n      };\n    };\n    this.getAst = function () {\n      return _this.ast;\n    };\n    if (typeof message === 'string') {\n      this.message = message;\n      if (!IntlMessageFormat.__parse) {\n        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n      }\n      // Parse string messages into an AST.\n      this.ast = IntlMessageFormat.__parse(message, {\n        normalizeHashtagInPlural: false\n      });\n    } else {\n      this.ast = message;\n    }\n    if (!Array.isArray(this.ast)) {\n      throw new TypeError('A message must be provided as a String or AST.');\n    }\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n    // Defined first because it's used to build the format pattern.\n    this.locales = locales;\n    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n  }\n  IntlMessageFormat.defaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n  IntlMessageFormat.__parse = parse;\n  // Default format options used as the prototype of the `formats` provided to the\n  // constructor. These are used when constructing the internal Intl.NumberFormat\n  // and Intl.DateTimeFormat instances.\n  IntlMessageFormat.formats = {\n    number: {\n      currency: {\n        style: 'currency'\n      },\n      percent: {\n        style: 'percent'\n      }\n    },\n    date: {\n      short: {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      medium: {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      long: {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      full: {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      short: {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      medium: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      long: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      full: {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  };\n  return IntlMessageFormat;\n}();\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","parse","memoizeIntlConstructor","formatToString","formatToParts","formatHTMLMessage","mergeConfig","c1","c2","keys","reduce","all","k","mergeConfigs","defaultConfig","configs","createDefaultFormatters","cache","number","dateTime","pluralRules","getNumberFormat","Intl","NumberFormat","getDateTimeFormat","DateTimeFormat","getPluralRules","PluralRules","IntlMessageFormat","message","locales","overrideFormats","opts","_this","defaultLocale","formatterCache","format","values","ast","formatters","formats","undefined","resolvedOptions","locale","supportedLocalesOf","getAst","__parse","TypeError","normalizeHashtagInPlural","Array","isArray","currency","style","percent","date","short","month","day","year","medium","long","full","weekday","time","hour","minute","second","timeZoneName"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/intl-messageformat/lib/core.js"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { parse } from 'intl-messageformat-parser';\nimport memoizeIntlConstructor from 'intl-format-cache';\nimport { formatToString, formatToParts, formatHTMLMessage, } from './formatters';\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return __assign(__assign(__assign({}, (c1 || {})), (c2 || {})), Object.keys(c1).reduce(function (all, k) {\n        all[k] = __assign(__assign({}, c1[k]), (c2[k] || {}));\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function (all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, __assign({}, defaultConfig));\n}\nexport function createDefaultFormatters(cache) {\n    if (cache === void 0) { cache = {\n        number: {},\n        dateTime: {},\n        pluralRules: {},\n    }; }\n    return {\n        getNumberFormat: memoizeIntlConstructor(Intl.NumberFormat, cache.number),\n        getDateTimeFormat: memoizeIntlConstructor(Intl.DateTimeFormat, cache.dateTime),\n        getPluralRules: memoizeIntlConstructor(Intl.PluralRules, cache.pluralRules),\n    };\n}\nvar IntlMessageFormat = /** @class */ (function () {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        var _this = this;\n        if (locales === void 0) { locales = IntlMessageFormat.defaultLocale; }\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {},\n        };\n        this.format = function (values) {\n            return formatToString(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.formatToParts = function (values) {\n            return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.formatHTMLMessage = function (values) {\n            return formatHTMLMessage(_this.ast, _this.locales, _this.formatters, _this.formats, values, _this.message);\n        };\n        this.resolvedOptions = function () { return ({\n            locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0],\n        }); };\n        this.getAst = function () { return _this.ast; };\n        if (typeof message === 'string') {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');\n            }\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, {\n                normalizeHashtagInPlural: false,\n            });\n        }\n        else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError('A message must be provided as a String or AST.');\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.formatters =\n            (opts && opts.formatters) || createDefaultFormatters(this.formatterCache);\n    }\n    IntlMessageFormat.defaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n    IntlMessageFormat.__parse = parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            currency: {\n                style: 'currency',\n            },\n            percent: {\n                style: 'percent',\n            },\n        },\n        date: {\n            short: {\n                month: 'numeric',\n                day: 'numeric',\n                year: '2-digit',\n            },\n            medium: {\n                month: 'short',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            long: {\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n            full: {\n                weekday: 'long',\n                month: 'long',\n                day: 'numeric',\n                year: 'numeric',\n            },\n        },\n        time: {\n            short: {\n                hour: 'numeric',\n                minute: 'numeric',\n            },\n            medium: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n            },\n            long: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n            full: {\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZoneName: 'short',\n            },\n        },\n    };\n    return IntlMessageFormat;\n}());\nexport { IntlMessageFormat };\nexport default IntlMessageFormat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}