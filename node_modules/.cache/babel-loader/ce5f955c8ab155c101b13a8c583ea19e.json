{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\components\\\\OrderForm\\\\index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { validatePriceStep } from '../../filters';\nimport { cleanPositiveFloatInput, precisionRegExp } from '../../helpers';\nimport { OrderInput as OrderInputMobile } from '../../mobile/components';\nimport { Decimal } from '../Decimal';\nimport { DropdownComponent } from '../Dropdown';\nimport { OrderInput } from '../OrderInput';\nimport { PercentageButton } from '../PercentageButton';\nvar handleSetValue = function handleSetValue(value, defaultValue) {\n  return value || defaultValue;\n};\nexport var OrderForm = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(OrderForm, _React$PureComponent);\n  var _super = _createSuper(OrderForm);\n  function OrderForm(props) {\n    var _this;\n    _classCallCheck(this, OrderForm);\n    _this = _super.call(this, props);\n    _this.handleOrderTypeChange = function (index) {\n      var orderTypesIndex = _this.props.orderTypesIndex;\n      _this.setState({\n        orderType: orderTypesIndex[index]\n      });\n    };\n    _this.handleFieldFocus = function (field) {\n      var priceText = _this.props.translate('page.body.trade.header.newOrder.content.price');\n      var amountText = _this.props.translate('page.body.trade.header.newOrder.content.amount');\n      switch (field) {\n        case priceText:\n          _this.setState(function (prev) {\n            return {\n              priceFocused: !prev.priceFocused\n            };\n          });\n          _this.props.listenInputPrice && _this.props.listenInputPrice();\n          break;\n        case amountText:\n          _this.setState(function (prev) {\n            return {\n              amountFocused: !prev.amountFocused\n            };\n          });\n          break;\n        default:\n          break;\n      }\n    };\n    _this.handlePriceChange = function (value) {\n      var _this$props = _this.props,\n        currentMarketBidPrecision = _this$props.currentMarketBidPrecision,\n        currentMarketFilters = _this$props.currentMarketFilters;\n      var convertedValue = cleanPositiveFloatInput(String(value));\n      if (convertedValue.match(precisionRegExp(currentMarketBidPrecision))) {\n        _this.setState({\n          price: convertedValue,\n          isPriceValid: validatePriceStep(convertedValue, currentMarketFilters)\n        });\n      }\n      _this.props.listenInputPrice && _this.props.listenInputPrice();\n    };\n    _this.handleAmountChange = function (value) {\n      var currentMarketAskPrecision = _this.props.currentMarketAskPrecision;\n      var convertedValue = cleanPositiveFloatInput(String(value));\n      if (convertedValue.match(precisionRegExp(currentMarketAskPrecision))) {\n        _this.props.handleAmountChange(convertedValue, _this.props.type);\n      }\n    };\n    _this.handleChangeAmountByButton = function (value) {\n      var _this$state = _this.state,\n        orderType = _this$state.orderType,\n        price = _this$state.price;\n      _this.props.handleChangeAmountByButton(value, orderType, price, _this.props.type);\n    };\n    _this.handleSubmit = function () {\n      var _this$props2 = _this.props,\n        available = _this$props2.available,\n        type = _this$props2.type,\n        amount = _this$props2.amount;\n      var _this$state2 = _this.state,\n        price = _this$state2.price,\n        priceMarket = _this$state2.priceMarket,\n        orderType = _this$state2.orderType;\n      var order = {\n        type: type,\n        orderType: orderType,\n        amount: amount,\n        price: orderType === 'Market' ? priceMarket : price,\n        available: available || 0\n      };\n      _this.props.onSubmit(order);\n      _this.handlePriceChange('');\n      _this.props.handleAmountChange('', _this.props.type);\n    };\n    _this.checkButtonIsDisabled = function () {\n      var _this$props3 = _this.props,\n        disabled = _this$props3.disabled,\n        available = _this$props3.available,\n        amount = _this$props3.amount,\n        totalPrice = _this$props3.totalPrice;\n      var _this$state3 = _this.state,\n        isPriceValid = _this$state3.isPriceValid,\n        orderType = _this$state3.orderType,\n        priceMarket = _this$state3.priceMarket,\n        price = _this$state3.price;\n      var safePrice = totalPrice / Number(amount) || priceMarket;\n      var invalidAmount = Number(amount) <= 0;\n      var invalidLimitPrice = orderType === 'Limit' && (Number(price) <= 0 || !isPriceValid.valid);\n      var invalidMarketPrice = safePrice <= 0 && orderType === 'Market';\n      return disabled || !available || invalidAmount || invalidLimitPrice || invalidMarketPrice;\n    };\n    _this.handleEnterPress = function (event) {\n      if (event.key === 'Enter') {\n        event.preventDefault();\n        _this.handleSubmit();\n      }\n    };\n    _this.state = {\n      orderType: 'Limit',\n      price: '',\n      priceMarket: _this.props.priceMarket,\n      isPriceValid: {\n        valid: true,\n        priceStep: 0\n      },\n      priceFocused: false,\n      amountFocused: false\n    };\n    return _this;\n  }\n  _createClass(OrderForm, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      var nextPriceLimitTruncated = Decimal.format(next.priceLimit, this.props.currentMarketBidPrecision);\n      if (this.state.orderType === 'Limit' && next.priceLimit && nextPriceLimitTruncated !== this.state.price) {\n        this.handlePriceChange(nextPriceLimitTruncated);\n      }\n      if (this.state.priceMarket !== next.priceMarket) {\n        this.setState({\n          priceMarket: next.priceMarket\n        });\n      }\n      if (this.props.to !== next.to || this.props.from !== next.from) {\n        this.setState({\n          price: ''\n        });\n        this.props.handleAmountChange('', next.type);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        type = _this$props4.type,\n        orderTypes = _this$props4.orderTypes,\n        className = _this$props4.className,\n        from = _this$props4.from,\n        to = _this$props4.to,\n        available = _this$props4.available,\n        currentMarketAskPrecision = _this$props4.currentMarketAskPrecision,\n        currentMarketBidPrecision = _this$props4.currentMarketBidPrecision,\n        totalPrice = _this$props4.totalPrice,\n        amount = _this$props4.amount,\n        isMobileDevice = _this$props4.isMobileDevice,\n        translate = _this$props4.translate;\n      var _this$state4 = this.state,\n        orderType = _this$state4.orderType,\n        price = _this$state4.price,\n        priceMarket = _this$state4.priceMarket,\n        isPriceValid = _this$state4.isPriceValid,\n        priceFocused = _this$state4.priceFocused,\n        amountFocused = _this$state4.amountFocused;\n      var safeAmount = Number(amount) || 0;\n      var safePrice = totalPrice / Number(amount) || priceMarket;\n      var total = orderType === 'Market' ? totalPrice : safeAmount * (Number(price) || 0);\n      var amountPercentageArray = [0.25, 0.5, 0.75, 1];\n      var availablePrecision = type === 'buy' ? currentMarketBidPrecision : currentMarketAskPrecision;\n      var availableCurrency = type === 'buy' ? from : to;\n      var priceErrorClass = classnames('error-message', {\n        'error-message--visible': (priceFocused || isMobileDevice) && !isPriceValid.valid\n      });\n      var priceText = this.props.translate('page.body.trade.header.newOrder.content.price');\n      var amountText = this.props.translate('page.body.trade.header.newOrder.content.amount');\n      var submitButtonText = translate(\"page.body.trade.header.newOrder.content.tabs.\".concat(type));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames('cr-order-form', className),\n        onKeyPress: this.handleEnterPress,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__dropdown__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }\n      }, translate('page.body.trade.header.newOrder.content.orderType')), /*#__PURE__*/React.createElement(DropdownComponent, {\n        list: orderTypes,\n        onSelect: this.handleOrderTypeChange,\n        placeholder: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }\n      })), orderType === 'Limit' ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }\n      }, isMobileDevice ? /*#__PURE__*/React.createElement(OrderInputMobile, {\n        label: priceText,\n        placeholder: translate('page.mobile.order.price.placeholder', {\n          currency: from ? from.toUpperCase() : ''\n        }),\n        value: price || '',\n        isFocused: priceFocused,\n        precision: currentMarketBidPrecision,\n        handleChangeValue: this.handlePriceChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(OrderInput, {\n        currency: from,\n        label: priceText,\n        placeholder: priceText,\n        value: price || '',\n        isFocused: priceFocused,\n        isWrong: !isPriceValid.valid,\n        handleChangeValue: this.handlePriceChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: priceErrorClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 25\n        }\n      }, translate('page.body.trade.header.newOrder.content.filterPrice', {\n        priceStep: isPriceValid.priceStep\n      }))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: \"cr-order-input__fieldset\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"legend\", {\n        className: 'cr-order-input__fieldset__label',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 33\n        }\n      }, priceText), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-input__fieldset__input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 33\n        }\n      }, \"\\u2248\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-input__fieldset__input__price\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 44\n        }\n      }, handleSetValue(Decimal.format(safePrice, currentMarketBidPrecision, ','), '0')))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-input__crypto-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }\n      }, from.toUpperCase()))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 17\n        }\n      }, isMobileDevice ? /*#__PURE__*/React.createElement(OrderInputMobile, {\n        label: amountText,\n        placeholder: translate('page.mobile.order.amount.placeholder', {\n          currency: to ? to.toUpperCase() : ''\n        }),\n        value: amount || '',\n        isFocused: amountFocused,\n        precision: currentMarketAskPrecision,\n        handleChangeValue: this.handleAmountChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(OrderInput, {\n        currency: to,\n        label: amountText,\n        placeholder: amountText,\n        value: amount || '',\n        isFocused: amountFocused,\n        handleChangeValue: this.handleAmountChange,\n        handleFocusInput: this.handleFieldFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__percentage-buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }\n      }, amountPercentageArray.map(function (value, index) {\n        return /*#__PURE__*/React.createElement(PercentageButton, {\n          value: value,\n          key: index,\n          onClick: _this2.handleChangeAmountByButton,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 73\n          }\n        });\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__total\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"cr-order-item__total__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }\n      }, translate('page.body.trade.header.newOrder.content.total')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__total__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 29\n        }\n      }, orderType === 'Market' ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 59\n        }\n      }, \"\\u2248\") : null, Decimal.format(total, currentMarketAskPrecision + currentMarketBidPrecision, ',')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__total__content__currency\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 29\n        }\n      }, from.toUpperCase())))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__available\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"cr-order-item__available__label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }\n      }, translate('page.body.trade.header.newOrder.content.available')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item__available__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__available__content__amount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }\n      }, available ? Decimal.format(available, availablePrecision, ',') : ''), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-order-item__available__content__currency\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 29\n        }\n      }, available ? availableCurrency.toUpperCase() : '')))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-order-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        className: \"btn-block mr-1 mt-1 btn-lg\",\n        disabled: this.checkButtonIsDisabled(),\n        onClick: this.handleSubmit,\n        size: \"lg\",\n        variant: type === 'buy' ? 'success' : 'danger',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }\n      }, submitButtonText || type)));\n    }\n  }]);\n  return OrderForm;\n}(React.PureComponent);","map":{"version":3,"names":["classnames","React","Button","validatePriceStep","cleanPositiveFloatInput","precisionRegExp","OrderInput","OrderInputMobile","Decimal","DropdownComponent","PercentageButton","handleSetValue","value","defaultValue","OrderForm","props","handleOrderTypeChange","index","orderTypesIndex","setState","orderType","handleFieldFocus","field","priceText","translate","amountText","prev","priceFocused","listenInputPrice","amountFocused","handlePriceChange","currentMarketBidPrecision","currentMarketFilters","convertedValue","String","match","price","isPriceValid","handleAmountChange","currentMarketAskPrecision","type","handleChangeAmountByButton","state","handleSubmit","available","amount","priceMarket","order","onSubmit","checkButtonIsDisabled","disabled","totalPrice","safePrice","Number","invalidAmount","invalidLimitPrice","valid","invalidMarketPrice","handleEnterPress","event","key","preventDefault","priceStep","next","nextPriceLimitTruncated","format","priceLimit","to","from","orderTypes","className","isMobileDevice","safeAmount","total","amountPercentageArray","availablePrecision","availableCurrency","priceErrorClass","submitButtonText","currency","toUpperCase","map","PureComponent"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/components/OrderForm/index.tsx"],"sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n    FilterPrice,\n    PriceValidation,\n    validatePriceStep,\n} from '../../filters';\nimport { cleanPositiveFloatInput, precisionRegExp } from '../../helpers';\nimport { OrderInput as OrderInputMobile } from '../../mobile/components';\nimport { Decimal } from '../Decimal';\nimport { DropdownComponent } from '../Dropdown';\nimport { OrderProps } from '../Order';\nimport { OrderInput } from '../OrderInput';\nimport { PercentageButton } from '../PercentageButton';\n\ntype OnSubmitCallback = (order: OrderProps) => void;\ntype DropdownElem = number | string | React.ReactNode;\ntype FormType = 'buy' | 'sell';\n\nexport interface OrderFormProps {\n    /**\n     * Price that is applied during total order amount calculation when type is Market\n     */\n    priceMarket: number;\n    /**\n     * Price that is applied during total order amount calculation when type is Market\n     */\n    priceLimit?: number;\n    /**\n     * Type of form, can be 'buy' or 'cell'\n     */\n    type: FormType;\n    /**\n     * Available types of order\n     */\n    orderTypes: DropdownElem[];\n    /**\n     * Available types of order without translations\n     */\n    orderTypesIndex: DropdownElem[];\n    /**\n     * Additional class name. By default element receives `cr-order` class\n     * @default empty\n     */\n    className?: string;\n    /**\n     * Name of currency for price field\n     */\n    from: string;\n    /**\n     * Name of currency for amount field\n     */\n    to: string;\n    /**\n     * Amount of money in a wallet\n     */\n    available?: number;\n    /**\n     * Precision of amount, total, available, fee value\n     */\n    currentMarketAskPrecision: number;\n    /**\n     * Precision of price value\n     */\n    currentMarketBidPrecision: number;\n    /**\n     * Whether order is disabled to execute\n     */\n    disabled?: boolean;\n    /**\n     * Callback that is called when form is submitted\n     */\n    onSubmit: OnSubmitCallback;\n    /**\n     * start handling change price\n     */\n    listenInputPrice?: () => void;\n    totalPrice: number;\n    amount: string;\n    isMobileDevice?: boolean;\n    currentMarketFilters: FilterPrice[];\n    handleAmountChange: (amount: string, type: FormType) => void;\n    handleChangeAmountByButton: (value: number, orderType: string | React.ReactNode, price: string, type: string) => void;\n    translate: (id: string, value?: any) => string;\n}\n\ninterface OrderFormState {\n    orderType: string | React.ReactNode;\n    price: string;\n    priceMarket: number;\n    isPriceValid: PriceValidation;\n    amountFocused: boolean;\n    priceFocused: boolean;\n}\n\nconst handleSetValue = (value: string | number | undefined, defaultValue: string) => (\n    value || defaultValue\n);\n\nexport class OrderForm extends React.PureComponent<OrderFormProps, OrderFormState> {\n    constructor(props: OrderFormProps) {\n        super(props);\n        this.state = {\n            orderType: 'Limit',\n            price: '',\n            priceMarket: this.props.priceMarket,\n            isPriceValid: {\n                valid: true,\n                priceStep: 0,\n            },\n            priceFocused: false,\n            amountFocused: false,\n        };\n    }\n\n    public componentWillReceiveProps(next: OrderFormProps) {\n        const nextPriceLimitTruncated = Decimal.format(next.priceLimit, this.props.currentMarketBidPrecision);\n\n        if (this.state.orderType === 'Limit' && next.priceLimit && nextPriceLimitTruncated !== this.state.price) {\n            this.handlePriceChange(nextPriceLimitTruncated);\n        }\n\n        if (this.state.priceMarket !== next.priceMarket) {\n            this.setState({\n                priceMarket: next.priceMarket,\n            });\n        }\n\n        if (this.props.to !== next.to || this.props.from !== next.from) {\n            this.setState({ price: '' });\n            this.props.handleAmountChange('', next.type);\n        }\n    }\n\n    public render() {\n        const {\n            type,\n            orderTypes,\n            className,\n            from,\n            to,\n            available,\n            currentMarketAskPrecision,\n            currentMarketBidPrecision,\n            totalPrice,\n            amount,\n            isMobileDevice,\n            translate,\n        } = this.props;\n        const {\n            orderType,\n            price,\n            priceMarket,\n            isPriceValid,\n            priceFocused,\n            amountFocused,\n        } = this.state;\n        const safeAmount = Number(amount) || 0;\n        const safePrice = totalPrice / Number(amount) || priceMarket;\n\n        const total = orderType === 'Market'\n            ? totalPrice : safeAmount * (Number(price) || 0);\n        const amountPercentageArray = [0.25, 0.5, 0.75, 1];\n\n        const availablePrecision = type === 'buy' ? currentMarketBidPrecision : currentMarketAskPrecision;\n        const availableCurrency = type === 'buy' ? from : to;\n\n        const priceErrorClass = classnames('error-message', {\n            'error-message--visible': (priceFocused || isMobileDevice) && !isPriceValid.valid,\n        });\n\n        const priceText = this.props.translate('page.body.trade.header.newOrder.content.price');\n        const amountText = this.props.translate('page.body.trade.header.newOrder.content.amount');\n        const submitButtonText = translate(`page.body.trade.header.newOrder.content.tabs.${type}`);\n\n        return (\n            <div className={classnames('cr-order-form', className)} onKeyPress={this.handleEnterPress}>\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__dropdown__label\">\n                        {translate('page.body.trade.header.newOrder.content.orderType')}\n                    </div>\n                    <DropdownComponent list={orderTypes} onSelect={this.handleOrderTypeChange} placeholder=\"\"/>\n                </div>\n                {orderType === 'Limit' ? (\n                    <div className=\"cr-order-item\">\n                        {isMobileDevice ? (\n                            <OrderInputMobile\n                                label={priceText}\n                                placeholder={translate('page.mobile.order.price.placeholder', { currency: from ? from.toUpperCase() : '' })}\n                                value={price || ''}\n                                isFocused={priceFocused}\n                                precision={currentMarketBidPrecision}\n                                handleChangeValue={this.handlePriceChange}\n                                handleFocusInput={this.handleFieldFocus}\n                            />\n                        ) : (\n                            <OrderInput\n                                currency={from}\n                                label={priceText}\n                                placeholder={priceText}\n                                value={price || ''}\n                                isFocused={priceFocused}\n                                isWrong={!isPriceValid.valid}\n                                handleChangeValue={this.handlePriceChange}\n                                handleFocusInput={this.handleFieldFocus}\n                            />\n                        )}\n                        <div className={priceErrorClass}>\n                            {translate('page.body.trade.header.newOrder.content.filterPrice', { priceStep: isPriceValid.priceStep })}\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"cr-order-item\">\n                        <div className=\"cr-order-input\">\n                            <fieldset className=\"cr-order-input__fieldset\">\n                                <legend className={'cr-order-input__fieldset__label'}>\n                                    {priceText}\n                                </legend>\n                                <div className=\"cr-order-input__fieldset__input\">\n                                    &asymp;<span className=\"cr-order-input__fieldset__input__price\">\n                                        {handleSetValue(Decimal.format(safePrice, currentMarketBidPrecision, ','), '0')}\n                                    </span>\n                                </div>\n                            </fieldset>\n                            <div className=\"cr-order-input__crypto-icon\">\n                                {from.toUpperCase()}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"cr-order-item\">\n                    {isMobileDevice ? (\n                        <OrderInputMobile\n                            label={amountText}\n                            placeholder={translate('page.mobile.order.amount.placeholder', { currency: to ? to.toUpperCase() : '' })}\n                            value={amount || ''}\n                            isFocused={amountFocused}\n                            precision={currentMarketAskPrecision}\n                            handleChangeValue={this.handleAmountChange}\n                            handleFocusInput={this.handleFieldFocus}\n                        />\n                    ) : (\n                        <OrderInput\n                            currency={to}\n                            label={amountText}\n                            placeholder={amountText}\n                            value={amount || ''}\n                            isFocused={amountFocused}\n                            handleChangeValue={this.handleAmountChange}\n                            handleFocusInput={this.handleFieldFocus}\n                        />\n                    )}\n                </div>\n\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__percentage-buttons\">\n                        {\n                            amountPercentageArray.map((value, index) => <PercentageButton\n                                value={value}\n                                key={index}\n                                onClick={this.handleChangeAmountByButton}\n                            />)\n                        }\n                    </div>\n                </div>\n\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__total\">\n                        <label className=\"cr-order-item__total__label\">\n                            {translate('page.body.trade.header.newOrder.content.total')}\n                        </label>\n                        <div className=\"cr-order-item__total__content\">\n                            <span className=\"cr-order-item__total__content__amount\">\n                                {orderType === 'Market' ? <span>&asymp;</span> : null}\n                                {Decimal.format(total, currentMarketAskPrecision + currentMarketBidPrecision, ',')}\n                            </span>\n                            <span className=\"cr-order-item__total__content__currency\">\n                                {from.toUpperCase()}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cr-order-item\">\n                    <div className=\"cr-order-item__available\">\n                        <label className=\"cr-order-item__available__label\">\n                            {translate('page.body.trade.header.newOrder.content.available')}\n                        </label>\n                        <div className=\"cr-order-item__available__content\">\n                            <span className=\"cr-order-item__available__content__amount\">\n                                {available ? Decimal.format(available, availablePrecision, ',') : ''}\n                            </span>\n                            <span className=\"cr-order-item__available__content__currency\">\n                                {available ? availableCurrency.toUpperCase() : ''}\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"cr-order-item\">\n                    <Button\n                        block={true}\n                        className=\"btn-block mr-1 mt-1 btn-lg\"\n                        disabled={this.checkButtonIsDisabled()}\n                        onClick={this.handleSubmit}\n                        size=\"lg\"\n                        variant={type === 'buy' ? 'success' : 'danger'}\n                    >\n                        {submitButtonText || type}\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    private handleOrderTypeChange = (index: number) => {\n        const { orderTypesIndex } = this.props;\n        this.setState({\n            orderType: orderTypesIndex[index],\n        });\n    };\n\n    private handleFieldFocus = (field: string | undefined) => {\n        const priceText = this.props.translate('page.body.trade.header.newOrder.content.price');\n        const amountText = this.props.translate('page.body.trade.header.newOrder.content.amount');\n\n        switch (field) {\n            case priceText:\n                this.setState(prev => ({\n                    priceFocused: !prev.priceFocused,\n                }));\n                this.props.listenInputPrice && this.props.listenInputPrice();\n                break;\n            case amountText:\n                this.setState(prev => ({\n                    amountFocused: !prev.amountFocused,\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handlePriceChange = (value: string) => {\n        const { currentMarketBidPrecision, currentMarketFilters } = this.props;\n        const convertedValue = cleanPositiveFloatInput(String(value));\n\n        if (convertedValue.match(precisionRegExp(currentMarketBidPrecision))) {\n            this.setState({\n                price: convertedValue,\n                isPriceValid: validatePriceStep(convertedValue, currentMarketFilters),\n            });\n        }\n\n        this.props.listenInputPrice && this.props.listenInputPrice();\n    };\n\n    private handleAmountChange = (value: string) => {\n        const { currentMarketAskPrecision } = this.props;\n        const convertedValue = cleanPositiveFloatInput(String(value));\n\n        if (convertedValue.match(precisionRegExp(currentMarketAskPrecision))) {\n            this.props.handleAmountChange(convertedValue, this.props.type);\n        }\n    };\n\n    private handleChangeAmountByButton = (value: number) => {\n        const { orderType, price } = this.state;\n\n        this.props.handleChangeAmountByButton(value, orderType, price, this.props.type);\n    };\n\n    private handleSubmit = () => {\n        const { available, type, amount } = this.props;\n        const { price, priceMarket, orderType } = this.state;\n\n        const order = {\n            type,\n            orderType,\n            amount,\n            price: orderType === 'Market' ? priceMarket : price,\n            available: available || 0,\n        };\n\n        this.props.onSubmit(order);\n        this.handlePriceChange('');\n        this.props.handleAmountChange('', this.props.type);\n    };\n\n    private checkButtonIsDisabled = (): boolean => {\n        const { disabled, available, amount, totalPrice } = this.props;\n        const { isPriceValid, orderType, priceMarket, price } = this.state;\n        const safePrice = totalPrice / Number(amount) || priceMarket;\n\n        const invalidAmount = Number(amount) <= 0;\n        const invalidLimitPrice = orderType === 'Limit' && (Number(price) <= 0 || !isPriceValid.valid);\n        const invalidMarketPrice = safePrice <= 0 && orderType === 'Market';\n\n        return disabled || !available || invalidAmount || invalidLimitPrice || invalidMarketPrice;\n    };\n\n    private handleEnterPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n\n            this.handleSubmit();\n        }\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}