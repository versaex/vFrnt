{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Transaction = require('../transaction');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar PublicKey = require('../../publickey');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\n * @constructor\n */\nfunction MultiSigInput(input, pubkeys, threshold, signatures) {\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.publicKeys = _.sortBy(pubkeys, function (publicKey) {\n    return publicKey.toString('hex');\n  });\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script), 'Provided public keys don\\'t match to the provided output script');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function (publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigInput, Input);\nMultiSigInput.prototype.toObject = function () {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function (publicKey) {\n    return publicKey.toString();\n  });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\nMultiSigInput.prototype._deserializeSignatures = function (signatures) {\n  return _.map(signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\nMultiSigInput.prototype._serializeSignatures = function () {\n  return _.map(this.signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\nMultiSigInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL | Signature.SIGHASH_FORKID;\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function (publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script, self.output.satoshisBN),\n        sigtype: sigtype\n      }));\n    }\n  });\n  return results;\n};\nMultiSigInput.prototype.addSignature = function (transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), 'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\nMultiSigInput.prototype._updateScript = function () {\n  this.setScript(Script.buildMultisigIn(this.publicKeys, this.threshold, this._createSignatures()));\n  return this;\n};\nMultiSigInput.prototype._createSignatures = function () {\n  return _.map(_.filter(this.signatures, function (signature) {\n    return !_.isUndefined(signature);\n  }), function (signature) {\n    return BufferUtil.concat([signature.signature.toDER(), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]);\n  });\n};\nMultiSigInput.prototype.clearSignatures = function () {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\nMultiSigInput.prototype.isFullySigned = function () {\n  return this.countSignatures() === this.threshold;\n};\nMultiSigInput.prototype.countMissingSignatures = function () {\n  return this.threshold - this.countSignatures();\n};\nMultiSigInput.prototype.countSignatures = function () {\n  return _.reduce(this.signatures, function (sum, signature) {\n    return sum + !!signature;\n  }, 0);\n};\nMultiSigInput.prototype.publicKeysWithoutSignature = function () {\n  var self = this;\n  return _.filter(this.publicKeys, function (publicKey) {\n    return !self.signatures[self.publicKeyIndex[publicKey.toString()]];\n  });\n};\nMultiSigInput.prototype.isValidSignature = function (transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, this.output.satoshisBN);\n};\n\n/**\n *\n * @param {Buffer[]} signatures\n * @param {PublicKey[]} publicKeys\n * @param {Transaction} transaction\n * @param {Integer} inputIndex\n * @param {Input} input\n * @returns {TransactionSignature[]}\n */\nMultiSigInput.normalizeSignatures = function (transaction, input, inputIndex, signatures, publicKeys) {\n  return publicKeys.map(function (pubKey) {\n    var signatureMatch = null;\n    signatures = signatures.filter(function (signatureBuffer) {\n      if (signatureMatch) {\n        return true;\n      }\n      var signature = new TransactionSignature({\n        signature: Signature.fromTxFormat(signatureBuffer),\n        publicKey: pubKey,\n        prevTxId: input.prevTxId,\n        outputIndex: input.outputIndex,\n        inputIndex: inputIndex,\n        sigtype: Signature.SIGHASH_ALL\n      });\n      signature.signature.nhashtype = signature.sigtype;\n      var isMatch = Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, input.output.script);\n      if (isMatch) {\n        signatureMatch = signature;\n        return false;\n      }\n      return true;\n    });\n    return signatureMatch ? signatureMatch : null;\n  });\n};\nMultiSigInput.OPCODES_SIZE = 1; // 0\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\n\nMultiSigInput.prototype._estimateSize = function () {\n  return MultiSigInput.OPCODES_SIZE + this.threshold * MultiSigInput.SIGNATURE_SIZE;\n};\nmodule.exports = MultiSigInput;","map":{"version":3,"names":["_","require","inherits","Transaction","Input","Output","$","Script","Signature","Sighash","PublicKey","BufferUtil","TransactionSignature","MultiSigInput","input","pubkeys","threshold","signatures","apply","arguments","self","publicKeys","sortBy","publicKey","toString","checkState","buildMultisigOut","equals","output","script","publicKeyIndex","each","index","_deserializeSignatures","Array","length","prototype","toObject","obj","map","_serializeSignatures","signature","undefined","getSignatures","transaction","privateKey","sigtype","SIGHASH_ALL","SIGHASH_FORKID","results","push","prevTxId","outputIndex","inputIndex","sign","satoshisBN","addSignature","isFullySigned","checkArgument","isUndefined","isValidSignature","_updateScript","setScript","buildMultisigIn","_createSignatures","filter","concat","toDER","integerAsSingleByteBuffer","clearSignatures","countSignatures","countMissingSignatures","reduce","sum","publicKeysWithoutSignature","nhashtype","verify","normalizeSignatures","pubKey","signatureMatch","signatureBuffer","fromTxFormat","isMatch","OPCODES_SIZE","SIGNATURE_SIZE","_estimateSize","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/transaction/input/multisig.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Transaction = require('../transaction');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar PublicKey = require('../../publickey');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\n * @constructor\n */\nfunction MultiSigInput(input, pubkeys, threshold, signatures) {\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  $.checkState(Script.buildMultisigOut(this.publicKeys, threshold).equals(this.output.script),\n    'Provided public keys don\\'t match to the provided output script');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function(publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigInput, Input);\n\nMultiSigInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigInput.prototype._deserializeSignatures = function(signatures) {\n  return _.map(signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigInput.prototype._serializeSignatures = function() {\n  return _.map(this.signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\nMultiSigInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || (Signature.SIGHASH_ALL |  Signature.SIGHASH_FORKID);\n\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function(publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.output.script, self.output.satoshisBN),\n        sigtype: sigtype\n      }));\n    }\n  });\n\n  return results;\n};\n\nMultiSigInput.prototype.addSignature = function(transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]),\n    'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\n\nMultiSigInput.prototype._updateScript = function() {\n  this.setScript(Script.buildMultisigIn(\n    this.publicKeys,\n    this.threshold,\n    this._createSignatures()\n  ));\n  return this;\n};\n\nMultiSigInput.prototype._createSignatures = function() {\n  return _.map(\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\n    function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    }\n  );\n};\n\nMultiSigInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigInput.prototype.countSignatures = function() {\n  return _.reduce(this.signatures, function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigInput.prototype.publicKeysWithoutSignature = function() {\n  var self = this;\n  return _.filter(this.publicKeys, function(publicKey) {\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigInput.prototype.isValidSignature = function(transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script,\n    this.output.satoshisBN\n  );\n};\n\n/**\n *\n * @param {Buffer[]} signatures\n * @param {PublicKey[]} publicKeys\n * @param {Transaction} transaction\n * @param {Integer} inputIndex\n * @param {Input} input\n * @returns {TransactionSignature[]}\n */\nMultiSigInput.normalizeSignatures = function(transaction, input, inputIndex, signatures, publicKeys) {\n  return publicKeys.map(function (pubKey) {\n    var signatureMatch = null;\n    signatures = signatures.filter(function (signatureBuffer) {\n      if (signatureMatch) {\n        return true;\n      }\n\n      var signature = new TransactionSignature({\n        signature: Signature.fromTxFormat(signatureBuffer),\n        publicKey: pubKey,\n        prevTxId: input.prevTxId,\n        outputIndex: input.outputIndex,\n        inputIndex: inputIndex,\n        sigtype: Signature.SIGHASH_ALL\n      });\n\n      signature.signature.nhashtype = signature.sigtype;\n      var isMatch = Sighash.verify(\n          transaction,\n          signature.signature,\n          signature.publicKey,\n          signature.inputIndex,\n          input.output.script\n      );\n\n      if (isMatch) {\n        signatureMatch = signature;\n        return false;\n      }\n\n      return true;\n    });\n\n    return signatureMatch ? signatureMatch : null;\n  });\n};\n\nMultiSigInput.OPCODES_SIZE = 1; // 0\nMultiSigInput.SIGNATURE_SIZE = 73; // size (1) + DER (<=72)\n\nMultiSigInput.prototype._estimateSize = function() {\n  return MultiSigInput.OPCODES_SIZE +\n    this.threshold * MultiSigInput.SIGNATURE_SIZE;\n};\n\nmodule.exports = MultiSigInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}