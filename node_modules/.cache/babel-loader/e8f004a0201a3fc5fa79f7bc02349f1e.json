{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\screens\\\\MagicLinkScreen\\\\index.tsx\";\nimport * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport { compose } from 'redux';\nimport { selectBlocklistAccessLoading, selectBlocklistAccessSuccess, sendAccessToken as _sendAccessToken } from '../../modules';\nvar MagicLinkScreen = /*#__PURE__*/function (_React$Component) {\n  _inherits(MagicLinkScreen, _React$Component);\n  var _super = _createSuper(MagicLinkScreen);\n  function MagicLinkScreen(props) {\n    var _this;\n    _classCallCheck(this, MagicLinkScreen);\n    _this = _super.call(this, props);\n    _this.state = {\n      token: ''\n    };\n    return _this;\n  }\n  _createClass(MagicLinkScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var urlParams = new URLSearchParams(this.props.location.search);\n      var token = urlParams.get('token');\n      if (token) {\n        this.props.sendAccessToken({\n          whitelink_token: token\n        });\n      } else {\n        this.props.history.replace('/');\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (!this.props.success && nextProps.success) {\n        this.props.history.replace('/');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.props.loading;\n      if (loading) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"pg-loader-container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Spinner, {\n          animation: \"border\",\n          variant: \"primary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }\n        }));\n      }\n      return null;\n    }\n  }]);\n  return MagicLinkScreen;\n}(React.Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    success: selectBlocklistAccessLoading(state),\n    loading: selectBlocklistAccessSuccess(state)\n  };\n};\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return {\n    sendAccessToken: function sendAccessToken(payload) {\n      return dispatch(_sendAccessToken(payload));\n    }\n  };\n};\nexport var MagicLink = compose(withRouter, connect(mapStateToProps, mapDispatchProps))(MagicLinkScreen);","map":{"version":3,"names":["React","Spinner","connect","withRouter","compose","selectBlocklistAccessLoading","selectBlocklistAccessSuccess","sendAccessToken","MagicLinkScreen","props","state","token","urlParams","URLSearchParams","location","search","get","whitelink_token","history","replace","nextProps","success","loading","Component","mapStateToProps","mapDispatchProps","dispatch","payload","MagicLink"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/screens/MagicLinkScreen/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { RouterProps, withRouter } from 'react-router';\nimport { compose } from 'redux';\nimport {\n    RootState,\n    selectBlocklistAccessLoading,\n    selectBlocklistAccessSuccess,\n    sendAccessToken,\n} from '../../modules';\n\ninterface LocationProps extends RouterProps {\n    location: {\n        search: string;\n    };\n}\n\ninterface MagicLinkState {\n    token: string;\n}\n\ninterface ReduxProps {\n    success: boolean;\n    loading: boolean;\n}\n\ninterface DispatchProps {\n    sendAccessToken: typeof sendAccessToken;\n}\n\nexport type MagicLinkProps = LocationProps & ReduxProps & DispatchProps;\n\nclass MagicLinkScreen extends React.Component<MagicLinkProps, MagicLinkState> {\n    constructor(props: MagicLinkProps) {\n        super(props);\n\n        this.state = {\n            token: '',\n        };\n    }\n\n    public componentDidMount() {\n        const urlParams = new URLSearchParams(this.props.location.search);\n        const token = urlParams.get('token') as string;\n\n        if (token) {\n            this.props.sendAccessToken({ whitelink_token: token });\n        } else {\n            this.props.history.replace('/');\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: MagicLinkProps) {\n        if (!this.props.success && nextProps.success) {\n            this.props.history.replace('/');\n        }\n    }\n\n    public render() {\n        const { loading } = this.props;\n\n        if (loading) {\n            return (\n                <div className=\"pg-loader-container\">\n                    <Spinner animation=\"border\" variant=\"primary\" />\n                </div>\n            );\n        }\n\n        return null;\n    }\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    success: selectBlocklistAccessLoading(state),\n    loading: selectBlocklistAccessSuccess(state),\n});\n\nconst mapDispatchProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    sendAccessToken: payload => dispatch(sendAccessToken(payload)),\n});\n\nexport const MagicLink = compose(\n    withRouter,\n    connect(mapStateToProps, mapDispatchProps),\n)(MagicLinkScreen) as React.ComponentClass;\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SACIC,OAAO,QAGJ,aAAa;AACpB,SAAsBC,UAAU,QAAQ,cAAc;AACtD,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAEIC,4BAA4B,EAC5BC,4BAA4B,EAC5BC,eAAe,IAAfA,gBAAe,QACZ,eAAe;AAAC,IAuBjBC,eAAe;EAAA;EAAA;EACjB,yBAAYC,KAAqB,EAAE;IAAA;IAAA;IAC/B,0BAAMA,KAAK;IAEX,MAAKC,KAAK,GAAG;MACTC,KAAK,EAAE;IACX,CAAC;IAAC;EACN;EAAC;IAAA;IAAA,OAED,6BAA2B;MACvB,IAAMC,SAAS,GAAG,IAAIC,eAAe,CAAC,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,MAAM,CAAC;MACjE,IAAMJ,KAAK,GAAGC,SAAS,CAACI,GAAG,CAAC,OAAO,CAAW;MAE9C,IAAIL,KAAK,EAAE;QACP,IAAI,CAACF,KAAK,CAACF,eAAe,CAAC;UAAEU,eAAe,EAAEN;QAAM,CAAC,CAAC;MAC1D,CAAC,MAAM;QACH,IAAI,CAACF,KAAK,CAACS,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;MACnC;IACJ;EAAC;IAAA;IAAA,OAED,mCAAiCC,SAAyB,EAAE;MACxD,IAAI,CAAC,IAAI,CAACX,KAAK,CAACY,OAAO,IAAID,SAAS,CAACC,OAAO,EAAE;QAC1C,IAAI,CAACZ,KAAK,CAACS,OAAO,CAACC,OAAO,CAAC,GAAG,CAAC;MACnC;IACJ;EAAC;IAAA;IAAA,OAED,kBAAgB;MACZ,IAAQG,OAAO,GAAK,IAAI,CAACb,KAAK,CAAtBa,OAAO;MAEf,IAAIA,OAAO,EAAE;QACT,oBACI;UAAK,SAAS,EAAC,qBAAqB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,gBAChC,oBAAC,OAAO;UAAC,SAAS,EAAC,QAAQ;UAAC,OAAO,EAAC,SAAS;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CAC9C;MAEd;MAEA,OAAO,IAAI;IACf;EAAC;EAAA;AAAA,EAtCyBtB,KAAK,CAACuB,SAAS;AAyC7C,IAAMC,eAA2D,GAAG,SAA9DA,eAA2D,CAAGd,KAAK;EAAA,OAAK;IAC1EW,OAAO,EAAEhB,4BAA4B,CAACK,KAAK,CAAC;IAC5CY,OAAO,EAAEhB,4BAA4B,CAACI,KAAK;EAC/C,CAAC;AAAA,CAAC;AAEF,IAAMe,gBAA+D,GAAG,SAAlEA,gBAA+D,CAAGC,QAAQ;EAAA,OAAK;IACjFnB,eAAe,EAAE,yBAAAoB,OAAO;MAAA,OAAID,QAAQ,CAACnB,gBAAe,CAACoB,OAAO,CAAC,CAAC;IAAA;EAClE,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,SAAS,GAAGxB,OAAO,CAC5BD,UAAU,EACVD,OAAO,CAACsB,eAAe,EAAEC,gBAAgB,CAAC,CAC7C,CAACjB,eAAe,CAAyB"},"metadata":{},"sourceType":"module"}