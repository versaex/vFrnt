{"ast":null,"code":"import { getNamedFormat, filterProps, createError } from '../utils';\nvar RELATIVE_TIME_FORMAT_OPTIONS = ['numeric', 'style'];\nfunction getFormatter(_ref, getRelativeTimeFormat) {\n  var locale = _ref.locale,\n    formats = _ref.formats,\n    onError = _ref.onError;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var format = options.format;\n  var defaults = !!format && getNamedFormat(formats, 'relative', format, onError) || {};\n  var filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n  return getRelativeTimeFormat(locale, filteredOptions);\n}\nexport function formatRelativeTime(config, getRelativeTimeFormat, value, unit) {\n  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  if (!unit) {\n    unit = 'second';\n  }\n  var RelativeTimeFormat = Intl.RelativeTimeFormat;\n  if (!RelativeTimeFormat) {\n    config.onError(createError(\"Intl.RelativeTimeFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-relativetimeformat\\\"\\n\"));\n  }\n  try {\n    return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);\n  } catch (e) {\n    config.onError(createError('Error formatting relative time.', e));\n  }\n  return String(value);\n}","map":{"version":3,"names":["getNamedFormat","filterProps","createError","RELATIVE_TIME_FORMAT_OPTIONS","getFormatter","getRelativeTimeFormat","locale","formats","onError","options","format","defaults","filteredOptions","formatRelativeTime","config","value","unit","RelativeTimeFormat","Intl","e","String"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/react-intl/lib/formatters/relativeTime.js"],"sourcesContent":["import { getNamedFormat, filterProps, createError } from '../utils';\nconst RELATIVE_TIME_FORMAT_OPTIONS = [\n    'numeric',\n    'style',\n];\nfunction getFormatter({ locale, formats, onError, }, getRelativeTimeFormat, options = {}) {\n    const { format } = options;\n    const defaults = (!!format && getNamedFormat(formats, 'relative', format, onError)) || {};\n    const filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n    return getRelativeTimeFormat(locale, filteredOptions);\n}\nexport function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options = {}) {\n    if (!unit) {\n        unit = 'second';\n    }\n    const RelativeTimeFormat = Intl.RelativeTimeFormat;\n    if (!RelativeTimeFormat) {\n        config.onError(createError(`Intl.RelativeTimeFormat is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-relativetimeformat\"\n`));\n    }\n    try {\n        return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);\n    }\n    catch (e) {\n        config.onError(createError('Error formatting relative time.', e));\n    }\n    return String(value);\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,WAAW,EAAEC,WAAW,QAAQ,UAAU;AACnE,IAAMC,4BAA4B,GAAG,CACjC,SAAS,EACT,OAAO,CACV;AACD,SAASC,YAAY,OAAgCC,qBAAqB,EAAgB;EAAA,IAAlEC,MAAM,QAANA,MAAM;IAAEC,OAAO,QAAPA,OAAO;IAAEC,OAAO,QAAPA,OAAO;EAAA,IAA4BC,OAAO,uEAAG,CAAC,CAAC;EACpF,IAAQC,MAAM,GAAKD,OAAO,CAAlBC,MAAM;EACd,IAAMC,QAAQ,GAAI,CAAC,CAACD,MAAM,IAAIV,cAAc,CAACO,OAAO,EAAE,UAAU,EAAEG,MAAM,EAAEF,OAAO,CAAC,IAAK,CAAC,CAAC;EACzF,IAAMI,eAAe,GAAGX,WAAW,CAACQ,OAAO,EAAEN,4BAA4B,EAAEQ,QAAQ,CAAC;EACpF,OAAON,qBAAqB,CAACC,MAAM,EAAEM,eAAe,CAAC;AACzD;AACA,OAAO,SAASC,kBAAkB,CAACC,MAAM,EAAET,qBAAqB,EAAEU,KAAK,EAAEC,IAAI,EAAgB;EAAA,IAAdP,OAAO,uEAAG,CAAC,CAAC;EACvF,IAAI,CAACO,IAAI,EAAE;IACPA,IAAI,GAAG,QAAQ;EACnB;EACA,IAAMC,kBAAkB,GAAGC,IAAI,CAACD,kBAAkB;EAClD,IAAI,CAACA,kBAAkB,EAAE;IACrBH,MAAM,CAACN,OAAO,CAACN,WAAW,mIAEhC,CAAC;EACC;EACA,IAAI;IACA,OAAOE,YAAY,CAACU,MAAM,EAAET,qBAAqB,EAAEI,OAAO,CAAC,CAACC,MAAM,CAACK,KAAK,EAAEC,IAAI,CAAC;EACnF,CAAC,CACD,OAAOG,CAAC,EAAE;IACNL,MAAM,CAACN,OAAO,CAACN,WAAW,CAAC,iCAAiC,EAAEiB,CAAC,CAAC,CAAC;EACrE;EACA,OAAOC,MAAM,CAACL,KAAK,CAAC;AACxB"},"metadata":{},"sourceType":"module"}