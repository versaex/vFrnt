{"ast":null,"code":"import { GEETEST_CAPTCHA_SUCCESS_DATA, GET_GEETEST_CAPTCHA_DATA, GET_GEETEST_CAPTCHA_ERROR, GET_GEETEST_CAPTCHA_FETCH, RECAPTCHA_SUCCESS_DATA, RESET_CAPTCHA_STATE, SHOULD_GEETEST_RESET_FETCH } from './constants';\nexport var geetestCaptchaData = function geetestCaptchaData(keys) {\n  return {\n    type: GET_GEETEST_CAPTCHA_DATA,\n    keys: keys\n  };\n};\nexport var geetestCaptchaError = function geetestCaptchaError(error) {\n  return {\n    type: GET_GEETEST_CAPTCHA_ERROR,\n    error: error\n  };\n};\nexport var geetestCaptchaFetch = function geetestCaptchaFetch() {\n  return {\n    type: GET_GEETEST_CAPTCHA_FETCH\n  };\n};\nexport var setGeetestCaptchaSuccess = function setGeetestCaptchaSuccess(payload) {\n  return {\n    type: GEETEST_CAPTCHA_SUCCESS_DATA,\n    payload: payload\n  };\n};\nexport var setShouldGeetestReset = function setShouldGeetestReset(payload) {\n  return {\n    type: SHOULD_GEETEST_RESET_FETCH,\n    payload: payload\n  };\n};\nexport var setRecaptchaSuccess = function setRecaptchaSuccess(payload) {\n  return {\n    type: RECAPTCHA_SUCCESS_DATA,\n    payload: payload\n  };\n};\nexport var resetCaptchaState = function resetCaptchaState() {\n  return {\n    type: RESET_CAPTCHA_STATE\n  };\n};","map":{"version":3,"names":["GEETEST_CAPTCHA_SUCCESS_DATA","GET_GEETEST_CAPTCHA_DATA","GET_GEETEST_CAPTCHA_ERROR","GET_GEETEST_CAPTCHA_FETCH","RECAPTCHA_SUCCESS_DATA","RESET_CAPTCHA_STATE","SHOULD_GEETEST_RESET_FETCH","geetestCaptchaData","keys","type","geetestCaptchaError","error","geetestCaptchaFetch","setGeetestCaptchaSuccess","payload","setShouldGeetestReset","setRecaptchaSuccess","resetCaptchaState"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/modules/user/captcha/actions.ts"],"sourcesContent":["import { GeetestCaptchaResponse } from '../..';\nimport { CommonError } from '../../types';\nimport {\n    GEETEST_CAPTCHA_SUCCESS_DATA,\n    GET_GEETEST_CAPTCHA_DATA,\n    GET_GEETEST_CAPTCHA_ERROR,\n    GET_GEETEST_CAPTCHA_FETCH,\n    RECAPTCHA_SUCCESS_DATA,\n    RESET_CAPTCHA_STATE,\n    SHOULD_GEETEST_RESET_FETCH,\n} from './constants';\n\nexport interface GeetestCaptchaKeys {\n    gt: string;\n    challenge: string;\n}\n\nexport interface GeetestCaptchaData {\n    type: typeof GET_GEETEST_CAPTCHA_DATA;\n    keys: GeetestCaptchaKeys;\n}\n\nexport interface GeetestCaptchaError {\n    type: typeof GET_GEETEST_CAPTCHA_ERROR;\n    error: CommonError;\n}\n\nexport interface GeetestCaptchaFetch {\n    type: typeof GET_GEETEST_CAPTCHA_FETCH;\n}\n\nexport interface GeetestCaptchaSuccess {\n    type: typeof GEETEST_CAPTCHA_SUCCESS_DATA;\n    payload: {\n        captcha_response?: GeetestCaptchaResponse;\n    };\n}\n\nexport interface SetGeetestShouldReset {\n    type: typeof SHOULD_GEETEST_RESET_FETCH;\n    payload: {\n        shouldGeetestReset: boolean;\n    };\n}\n\nexport interface RecaptchaSuccess {\n    type: typeof RECAPTCHA_SUCCESS_DATA;\n    payload: {\n        captcha_response?: string;\n    };\n}\n\nexport interface ResetCaptchaState {\n    type: typeof RESET_CAPTCHA_STATE;\n}\n\nexport type GeetestCaptchaAction =\n    GeetestCaptchaData\n    | GeetestCaptchaError\n    | GeetestCaptchaFetch\n    | GeetestCaptchaSuccess\n    | SetGeetestShouldReset\n    | RecaptchaSuccess\n    | ResetCaptchaState;\n\nexport const geetestCaptchaData = (keys: GeetestCaptchaKeys): GeetestCaptchaData => ({\n    type: GET_GEETEST_CAPTCHA_DATA,\n    keys,\n});\n\nexport const geetestCaptchaError = (error: CommonError): GeetestCaptchaError => ({\n    type: GET_GEETEST_CAPTCHA_ERROR,\n    error,\n});\n\nexport const geetestCaptchaFetch = (): GeetestCaptchaFetch => ({\n    type: GET_GEETEST_CAPTCHA_FETCH,\n});\n\nexport const setGeetestCaptchaSuccess = (payload: GeetestCaptchaSuccess['payload']): GeetestCaptchaSuccess => ({\n    type: GEETEST_CAPTCHA_SUCCESS_DATA,\n    payload,\n});\n\nexport const setShouldGeetestReset = (payload: SetGeetestShouldReset['payload']): SetGeetestShouldReset => ({\n    type: SHOULD_GEETEST_RESET_FETCH,\n    payload,\n});\n\nexport const setRecaptchaSuccess = (payload: RecaptchaSuccess['payload']): RecaptchaSuccess => ({\n    type: RECAPTCHA_SUCCESS_DATA,\n    payload,\n});\n\nexport const resetCaptchaState = (): ResetCaptchaState => ({\n    type: RESET_CAPTCHA_STATE,\n});\n"],"mappings":"AAEA,SACIA,4BAA4B,EAC5BC,wBAAwB,EACxBC,yBAAyB,EACzBC,yBAAyB,EACzBC,sBAAsB,EACtBC,mBAAmB,EACnBC,0BAA0B,QACvB,aAAa;AAuDpB,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,IAAwB;EAAA,OAA0B;IACjFC,IAAI,EAAER,wBAAwB;IAC9BO,IAAI,EAAJA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,KAAkB;EAAA,OAA2B;IAC7EF,IAAI,EAAEP,yBAAyB;IAC/BS,KAAK,EAALA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB;EAAA,OAA+B;IAC3DH,IAAI,EAAEN;EACV,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMU,wBAAwB,GAAG,SAA3BA,wBAAwB,CAAIC,OAAyC;EAAA,OAA6B;IAC3GL,IAAI,EAAET,4BAA4B;IAClCc,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAID,OAAyC;EAAA,OAA6B;IACxGL,IAAI,EAAEH,0BAA0B;IAChCQ,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIF,OAAoC;EAAA,OAAwB;IAC5FL,IAAI,EAAEL,sBAAsB;IAC5BU,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMG,iBAAiB,GAAG,SAApBA,iBAAiB;EAAA,OAA6B;IACvDR,IAAI,EAAEJ;EACV,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module"}