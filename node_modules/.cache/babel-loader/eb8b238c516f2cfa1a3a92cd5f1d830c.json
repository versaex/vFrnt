{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\n/** `XHR` based transport */\nvar XHRTransport = /** @class */function (_super) {\n  __extends(XHRTransport, _super);\n  function XHRTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  XHRTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n  XHRTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  XHRTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      var request = new XMLHttpRequest();\n      request.onreadystatechange = function () {\n        if (request.readyState === 4) {\n          var headers = {\n            'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n            'retry-after': request.getResponseHeader('Retry-After')\n          };\n          _this._handleResponse({\n            requestType: sentryRequest.type,\n            response: request,\n            headers: headers,\n            resolve: resolve,\n            reject: reject\n          });\n        }\n      };\n      request.open('POST', sentryRequest.url);\n      for (var header in _this.options.headers) {\n        if (_this.options.headers.hasOwnProperty(header)) {\n          request.setRequestHeader(header, _this.options.headers[header]);\n        }\n      }\n      request.send(sentryRequest.body);\n    }));\n  };\n  return XHRTransport;\n}(BaseTransport);\nexport { XHRTransport };","map":{"version":3,"sources":["../../src/transports/xhr.ts"],"names":[],"mappings":";AAAA,SAAS,oBAAoB,EAAE,sBAAsB,QAAQ,cAAc;AAE3E,SAAS,WAAW,QAAQ,eAAe;AAE3C,SAAS,aAAa,QAAQ,QAAQ;AAEtC;AACA,IAAA,YAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkC,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;EAAlC,SAAA,YAAA,GAAA;;EAqDA;EApDE;;AAEG;EACI,YAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,UAAiB,KAAY,EAAA;IAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC;EACzE,CAAC;EAED;;AAEG;EACI,YAAA,CAAA,SAAA,CAAA,WAAW,GAAlB,UAAmB,OAAgB,EAAA;IACjC,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC;EAC/E,CAAC;EAED;;;AAGG;EACK,YAAA,CAAA,SAAA,CAAA,YAAY,GAApB,UAAqB,aAA4B,EAAE,eAAgC,EAAA;IAAnF,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;MAC3C,OAAO,OAAO,CAAC,MAAM,CAAC;QACpB,KAAK,EAAE,eAAe;QACtB,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,MAAM,EAAE,wBAAA,GAAyB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,GAAA,4BAA4B;QACpG,MAAM,EAAE;OACT,CAAC;IACH;IAED,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CACrB,IAAI,WAAW,CAAW,UAAC,OAAO,EAAE,MAAM,EAAA;MACxC,IAAM,OAAO,GAAG,IAAI,cAAc,EAAE;MAEpC,OAAO,CAAC,kBAAkB,GAAG,YAAA;QAC3B,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;UAC5B,IAAM,OAAO,GAAG;YACd,sBAAsB,EAAE,OAAO,CAAC,iBAAiB,CAAC,sBAAsB,CAAC;YACzE,aAAa,EAAE,OAAO,CAAC,iBAAiB,CAAC,aAAa;WACvD;UACD,KAAI,CAAC,eAAe,CAAC;YAAE,WAAW,EAAE,aAAa,CAAC,IAAI;YAAE,QAAQ,EAAE,OAAO;YAAE,OAAO,EAAA,OAAA;YAAE,OAAO,EAAA,OAAA;YAAE,MAAM,EAAA;UAAA,CAAE,CAAC;QACvG;MACH,CAAC;MAED,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC;MACvC,KAAK,IAAM,MAAM,IAAI,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE;QACzC,IAAI,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;UAC/C,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC/D;MACF;MACD,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;IAClC,CAAC,CAAC,CACH;EACH,CAAC;EACH,OAAA,YAAC;AAAD,CAAC,CArDiC,aAAa,CAAA","sourcesContent":["import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session } from '@sentry/types';\nimport { SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = (): void => {\n          if (request.readyState === 4) {\n            const headers = {\n              'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': request.getResponseHeader('Retry-After'),\n            };\n            this._handleResponse({ requestType: sentryRequest.type, response: request, headers, resolve, reject });\n          }\n        };\n\n        request.open('POST', sentryRequest.url);\n        for (const header in this.options.headers) {\n          if (this.options.headers.hasOwnProperty(header)) {\n            request.setRequestHeader(header, this.options.headers[header]);\n          }\n        }\n        request.send(sentryRequest.body);\n      }),\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}