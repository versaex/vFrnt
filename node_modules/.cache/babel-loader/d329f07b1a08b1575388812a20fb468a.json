{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\nexport var installedIntegrations = [];\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations && __spread(options.defaultIntegrations) || [];\n  var userIntegrations = options.integrations;\n  var integrations = [];\n  if (Array.isArray(userIntegrations)) {\n    var userIntegrationsNames_1 = userIntegrations.map(function (i) {\n      return i.name;\n    });\n    var pickedIntegrationsNames_1 = [];\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(function (defaultIntegration) {\n      if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 && pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames_1.push(defaultIntegration.name);\n      }\n    });\n    // Don't add same user integration twice\n    userIntegrations.forEach(function (userIntegration) {\n      if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames_1.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = __spread(defaultIntegrations);\n  }\n  // Make sure that if present, `Debug` integration will always run last\n  var integrationsNames = integrations.map(function (i) {\n    return i.name;\n  });\n  var alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push.apply(integrations, __spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n  }\n  return integrations;\n}\n/** Setup given integration */\nexport function setupIntegration(integration) {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(\"Integration installed: \" + integration.name);\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(options) {\n  var integrations = {};\n  getIntegrationsToSetup(options).forEach(function (integration) {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}","map":{"version":3,"sources":["../src/integration.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}