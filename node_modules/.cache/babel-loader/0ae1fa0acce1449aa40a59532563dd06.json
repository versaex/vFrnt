{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\components\\\\Decimal\\\\index.tsx\";\nimport * as React from 'react';\nvar handleRemoveExponent = function handleRemoveExponent(value) {\n  var data = String(value).split(/[eE]/);\n  if (data.length === 1) {\n    return data[0];\n  }\n  var sign = Number(value) < 0 ? '-' : '';\n  var str = data[0].replace('.', '');\n  var result = '';\n  var power = Number(data[1]) + 1;\n  if (power < 0) {\n    result = \"\".concat(sign, \"0.\");\n    while (power++) {\n      result += '0';\n    }\n\n    // eslint-disable-next-line\n    return result + str.replace(/^\\-/, '');\n  }\n  power -= str.length;\n  while (power--) {\n    result += '0';\n  }\n  return \"\".concat(str).concat(result);\n};\nvar formatWithSeparators = function formatWithSeparators(value, thousSep, floatSep) {\n  var fmtNum = value;\n  if (thousSep !== floatSep) {\n    if (floatSep) {\n      fmtNum = fmtNum.replace('.', floatSep);\n    }\n    if (thousSep && floatSep || thousSep && !floatSep && thousSep !== '.') {\n      var fmtNumParts = fmtNum.toString().split(floatSep || '.');\n      fmtNumParts[0] = fmtNumParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousSep);\n      fmtNum = fmtNumParts.join(floatSep || '.');\n    }\n  }\n  return fmtNum;\n};\nvar Decimal = /*#__PURE__*/function (_React$Component) {\n  _inherits(Decimal, _React$Component);\n  var _super = _createSuper(Decimal);\n  function Decimal() {\n    var _this;\n    _classCallCheck(this, Decimal);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.highlightNumbers = function (value, prevValue, fixed, thousSep, floatSep) {\n      var val = Decimal.format(value, fixed, thousSep, floatSep);\n      var prev = Decimal.format(prevValue, fixed, thousSep, floatSep);\n      var highlighted = '';\n      while (val !== prev && val.length > 0) {\n        highlighted = val[val.length - 1] + highlighted;\n        val = val.slice(0, -1);\n        prev = prev.slice(0, -1);\n      }\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"cr-decimal__opacity\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }\n      }, val), /*#__PURE__*/React.createElement(\"span\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }\n      }, highlighted));\n    };\n    return _this;\n  }\n  _createClass(Decimal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        children = _this$props.children,\n        fixed = _this$props.fixed,\n        prevValue = _this$props.prevValue,\n        thousSep = _this$props.thousSep,\n        floatSep = _this$props.floatSep;\n      if (prevValue) {\n        return this.highlightNumbers(children, prevValue, fixed, thousSep, floatSep);\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 21\n          }\n        }, Decimal.getNumberBeforeDot(children, fixed, thousSep, floatSep)), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"cr-decimal__opacity\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }\n        }, Decimal.getNumberAfterDot(children, fixed)));\n      }\n    }\n  }], [{\n    key: \"format\",\n    value: function format(value, precision, thousSep, floatSep) {\n      if (typeof value === 'undefined') {\n        return '0';\n      }\n      var result = '0';\n      if (value !== '' && value !== 0) {\n        result = handleRemoveExponent(Number(\"\".concat(Math.floor(Number(\"\".concat(handleRemoveExponent(value), \"e\").concat(precision))), \"e-\").concat(precision)));\n      }\n      if (result.indexOf('.') === -1 && precision > 0) {\n        result += '.';\n      }\n      while (result.slice(result.indexOf('.')).length <= precision) {\n        result += '0';\n      }\n      result = formatWithSeparators(result, thousSep, floatSep);\n      return result;\n    }\n  }, {\n    key: \"getNumberBeforeDot\",\n    value: function getNumberBeforeDot(value, fixed, thousSep, floatSep) {\n      return Decimal.format(value, 0, thousSep, floatSep);\n    }\n  }, {\n    key: \"getNumberAfterDot\",\n    value: function getNumberAfterDot(value, fixed, thousSep, floatSep) {\n      if (fixed === 0) {\n        return;\n      }\n      var str = Decimal.format(value, fixed);\n      var floatNum = str.slice(str.indexOf('.'));\n      if (floatSep) {\n        floatNum = floatNum.replace('.', floatSep);\n      }\n      return floatNum;\n    }\n  }]);\n  return Decimal;\n}(React.Component);\nexport { Decimal, formatWithSeparators };","map":{"version":3,"names":["React","handleRemoveExponent","value","data","String","split","length","sign","Number","str","replace","result","power","formatWithSeparators","thousSep","floatSep","fmtNum","fmtNumParts","toString","join","Decimal","highlightNumbers","prevValue","fixed","val","format","prev","highlighted","slice","props","children","getNumberBeforeDot","getNumberAfterDot","precision","Math","floor","indexOf","floatNum","Component"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/components/Decimal/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport interface DecimalProps {\n    /**\n     * Number of digits after dot\n     */\n    fixed: number;\n    /**\n     * thousands separator\n     */\n    thousSep?: string;\n    /**\n     * float separator\n     */\n    floatSep?: string;\n    /**\n     * Number to format\n     */\n    children?: string | number;\n    /**\n     * Children's previous value.\n     * If undefined, only integer part of the number is highlighted\n     */\n    prevValue?: string | number;\n}\n\nconst handleRemoveExponent = (value: DecimalProps['children']) => {\n    const data = String(value).split(/[eE]/);\n\n    if (data.length === 1) {\n        return data[0];\n    }\n\n    const sign = Number(value) < 0 ? '-' : '';\n    const str = data[0].replace('.', '');\n    let result = '';\n    let power = Number(data[1]) + 1;\n\n    if (power < 0) {\n        result = `${sign}0.`;\n\n        while (power++) {\n            result += '0';\n        }\n\n        // eslint-disable-next-line\n        return result + str.replace(/^\\-/,'');\n    }\n\n    power -= str.length;\n\n    while (power--) {\n        result += '0';\n    }\n\n    return `${str}${result}`;\n};\n\nconst formatWithSeparators = (value: string, thousSep?: string, floatSep?: string) => {\n    let fmtNum = value;\n\n    if (thousSep !== floatSep) {\n        if (floatSep) {\n            fmtNum = fmtNum.replace('.', floatSep);\n        }\n\n        if ((thousSep && floatSep) || (thousSep && !floatSep && thousSep !== '.')) {\n            const fmtNumParts = fmtNum.toString().split(floatSep || '.');\n            fmtNumParts[0] = fmtNumParts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousSep);\n            fmtNum = fmtNumParts.join(floatSep || '.');\n        }\n    }\n\n    return fmtNum;\n};\n\nclass Decimal extends React.Component<DecimalProps> {\n    public static format(value: DecimalProps['children'], precision: number, thousSep?: string, floatSep?: string) {\n        if (typeof value === 'undefined') {\n            return '0';\n        }\n\n        let result = '0';\n\n        if (value !== '' && value !== 0) {\n            result = handleRemoveExponent(Number(`${Math.floor(Number(`${handleRemoveExponent(value)}e${precision}`))}e-${precision}`));\n        }\n\n        if (result.indexOf('.') === -1 && precision > 0) {\n            result += '.';\n        }\n\n        while (result.slice(result.indexOf('.')).length <= precision) {\n            result += '0';\n        }\n\n        result = formatWithSeparators(result, thousSep, floatSep);\n\n        return result;\n    }\n\n    public static getNumberBeforeDot(value: DecimalProps['children'], fixed: number, thousSep?: string, floatSep?: string) {\n        return Decimal.format(value, 0, thousSep, floatSep);\n    }\n\n    public static getNumberAfterDot(value: DecimalProps['children'], fixed: number, thousSep?: string, floatSep?: string) {\n        if (fixed === 0) {\n            return;\n        }\n\n        const str = Decimal.format(value, fixed);\n        let floatNum = str.slice(str.indexOf('.'));\n\n        if (floatSep) {\n            floatNum = floatNum.replace('.', floatSep);\n        }\n\n        return floatNum;\n    }\n\n    public render() {\n        const {\n            children,\n            fixed,\n            prevValue,\n            thousSep,\n            floatSep,\n        } = this.props;\n\n        if (prevValue) {\n            return this.highlightNumbers(children, prevValue, fixed, thousSep, floatSep);\n        } else {\n            return (\n                <React.Fragment>\n                    <span>{Decimal.getNumberBeforeDot(children, fixed, thousSep, floatSep)}</span>\n                    <span className=\"cr-decimal__opacity\">{Decimal.getNumberAfterDot(children, fixed)}</span>\n                </React.Fragment>\n            );\n        }\n    }\n\n    private highlightNumbers = (value: DecimalProps['children'], prevValue: DecimalProps['children'], fixed: number, thousSep?: string, floatSep?: string) => {\n        let val = Decimal.format(value, fixed, thousSep, floatSep);\n        let prev = Decimal.format(prevValue, fixed, thousSep, floatSep);\n        let highlighted = '';\n\n        while (val !== prev && val.length > 0) {\n            highlighted = val[val.length - 1] + highlighted;\n            val = val.slice(0, -1);\n            prev = prev.slice(0, -1);\n        }\n\n        return (\n            <React.Fragment>\n                <span className=\"cr-decimal__opacity\">{val}</span>\n                <span>{highlighted}</span>\n            </React.Fragment>\n        );\n    };\n}\n\nexport {\n    Decimal,\n    formatWithSeparators,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}