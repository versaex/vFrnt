{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\containers\\\\Confirm\\\\Address\\\\index.tsx\";\nimport cr from 'classnames';\nimport * as countries from 'i18n-iso-countries';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { languages } from '../../../api/config';\nimport { CustomInput, SearchDropdown, UploadFile } from '../../../components';\nimport { alertPush, selectCurrentLanguage, selectMobileDeviceState, selectSendAddressesSuccess, sendAddresses as _sendAddresses } from '../../../modules';\nvar AddressComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(AddressComponent, _React$Component);\n  var _super = _createSuper(AddressComponent);\n  function AddressComponent() {\n    var _this;\n    _classCallCheck(this, AddressComponent);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      address: '',\n      addressFocused: false,\n      city: '',\n      cityFocused: false,\n      country: '',\n      postcode: '',\n      postcodeFocused: false,\n      fileScan: []\n    };\n    _this.handleChange = function (value, key) {\n      // @ts-ignore\n      _this.setState(_defineProperty({}, key, value));\n    };\n    _this.handleFieldFocus = function (field) {\n      return function () {\n        switch (field) {\n          case 'address':\n            _this.setState({\n              addressFocused: !_this.state.addressFocused\n            });\n            break;\n          case 'city':\n            _this.setState({\n              cityFocused: !_this.state.cityFocused\n            });\n            break;\n          case 'postcode':\n            _this.setState({\n              postcodeFocused: !_this.state.postcodeFocused\n            });\n            break;\n          default:\n            break;\n        }\n      };\n    };\n    _this.handleUploadScan = function (uploadEvent, id) {\n      var allFiles = uploadEvent.target.files;\n      var maxDocsCount = 1;\n      var additionalFileList = Array.from(allFiles).length > maxDocsCount ? Array.from(allFiles).slice(0, maxDocsCount) : Array.from(allFiles);\n      switch (id) {\n        case 'fileScan':\n          _this.setState({\n            fileScan: additionalFileList\n          });\n          break;\n        default:\n          break;\n      }\n    };\n    _this.handleValidateInput = function (field, value) {\n      switch (field) {\n        case 'address':\n          var residentialAddressRegex = new RegExp(\"^[a-zA-Z0-9,.;/\\\\s]+$\");\n          return value.match(residentialAddressRegex) ? true : false;\n        case 'city':\n          var cityRegex = new RegExp(\"^[a-zA-Z]+$\");\n          return value.match(cityRegex) ? true : false;\n        case 'postcode':\n          var postcodeRegex = new RegExp(\"^[a-zA-Z0-9]{1,12}$\");\n          return value.match(postcodeRegex) ? true : false;\n        default:\n          return true;\n      }\n    };\n    _this.selectCountry = function (option) {\n      _this.setState({\n        country: countries.getAlpha2Code(option.value, _this.props.lang)\n      });\n    };\n    _this.handleCheckButtonDisabled = function () {\n      var _this$state = _this.state,\n        address = _this$state.address,\n        city = _this$state.city,\n        country = _this$state.country,\n        fileScan = _this$state.fileScan,\n        postcode = _this$state.postcode;\n      var addressValid = _this.handleValidateInput('address', address);\n      var cityValid = _this.handleValidateInput('city', city);\n      var postcodeValid = _this.handleValidateInput('postcode', postcode);\n      return !addressValid || !cityValid || !country.length || !postcodeValid || !fileScan.length;\n    };\n    _this.sendAddress = function () {\n      var _this$state2 = _this.state,\n        address = _this$state2.address,\n        city = _this$state2.city,\n        country = _this$state2.country,\n        fileScan = _this$state2.fileScan,\n        postcode = _this$state2.postcode;\n      var request = new FormData();\n      request.append('upload[]', fileScan[0]);\n      request.append('address', address);\n      request.append('city', city);\n      request.append('country', country);\n      request.append('postcode', postcode);\n      _this.props.sendAddresses(request);\n    };\n    _this.translate = function (key) {\n      return _this.props.intl.formatMessage({\n        id: key\n      });\n    };\n    return _this;\n  }\n  _createClass(AddressComponent, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(next) {\n      if (next.success && !this.props.success) {\n        this.props.history.push('/profile');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        lang = _this$props.lang,\n        isMobileDevice = _this$props.isMobileDevice;\n      var _this$state3 = this.state,\n        address = _this$state3.address,\n        addressFocused = _this$state3.addressFocused,\n        city = _this$state3.city,\n        cityFocused = _this$state3.cityFocused,\n        postcode = _this$state3.postcode,\n        postcodeFocused = _this$state3.postcodeFocused,\n        fileScan = _this$state3.fileScan;\n\n      /* tslint:disable */\n      languages.map(function (l) {\n        return countries.registerLocale(require(\"i18n-iso-countries/langs/\".concat(l, \".json\")));\n      });\n      /* tslint:enable */\n\n      var addressFocusedClass = cr('pg-confirm__content-address__row__content', {\n        'pg-confirm__content-address__row__content--focused': addressFocused,\n        'pg-confirm__content-address__row__content--wrong': address && !this.handleValidateInput('address', address)\n      });\n      var cityFocusedClass = cr('pg-confirm__content-address__row__content', {\n        'pg-confirm__content-address__row__content--focused': cityFocused,\n        'pg-confirm__content-address__row__content--wrong': city && !this.handleValidateInput('city', city)\n      });\n      var postcodeFocusedClass = cr('pg-confirm__content-address__row__content', {\n        'pg-confirm__content-address__row__content--focused': postcodeFocused,\n        'pg-confirm__content-address__row__content--wrong': postcode && !this.handleValidateInput('postcode', postcode)\n      });\n      var dataCountries = Object.values(countries.getNames(lang)).map(function (item) {\n        return {\n          label: item,\n          value: item\n        };\n      });\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: addressFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        inputValue: address,\n        placeholder: this.translate('page.body.kyc.address.address.placeholder'),\n        label: this.translate('page.body.kyc.address.address'),\n        defaultLabel: '',\n        labelVisible: true,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'address');\n        },\n        handleFocusInput: this.handleFieldFocus('address'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row input-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: cityFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        label: this.translate('page.body.kyc.address.city'),\n        labelVisible: true,\n        defaultLabel: '',\n        placeholder: this.translate('page.body.kyc.address.city.placeholder'),\n        inputValue: city,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'city');\n        },\n        handleFocusInput: this.handleFieldFocus('city'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"fieldset\", {\n        className: postcodeFocusedClass,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomInput, {\n        type: \"string\",\n        label: this.translate('page.body.kyc.address.postcode'),\n        labelVisible: true,\n        defaultLabel: '',\n        placeholder: this.translate('page.body.kyc.address.postcode.placeholder'),\n        inputValue: postcode,\n        handleChangeInput: function handleChangeInput(e) {\n          return _this2.handleChange(e, 'postcode');\n        },\n        handleFocusInput: this.handleFieldFocus('postcode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row__content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-address__row__content-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }\n      }, this.translate('page.body.kyc.documents.country')), /*#__PURE__*/React.createElement(SearchDropdown, {\n        className: \"pg-confirm__content-address__row__content-number-dropdown\",\n        options: dataCountries,\n        onSelect: this.selectCountry,\n        placeholder: this.translate('page.body.kyc.documents.country.placeholder'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(UploadFile, {\n        id: \"fileScan\",\n        isMobileDevice: isMobileDevice,\n        title: this.translate('page.body.kyc.address.uploadFile.title'),\n        label: this.translate('page.body.kyc.address.uploadFile.label'),\n        buttonText: this.translate('page.body.kyc.address.uploadFile.button'),\n        sizesText: this.translate('page.body.kyc.address.uploadFile.sizes'),\n        formatsText: this.translate('page.body.kyc.address.uploadFile.formats'),\n        tipText: this.translate('page.body.kyc.address.uploadFile.tip'),\n        handleUploadScan: function handleUploadScan(uploadEvent) {\n          return _this2.handleUploadScan(uploadEvent, 'fileScan');\n        },\n        uploadedFile: fileScan[0] && fileScan[0].name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-confirm__content-deep\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.sendAddress,\n        disabled: this.handleCheckButtonDisabled(),\n        size: \"lg\",\n        variant: \"primary\",\n        type: \"button\",\n        block: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }\n      }, this.translate('page.body.kyc.submit')))));\n    }\n  }]);\n  return AddressComponent;\n}(React.Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    lang: selectCurrentLanguage(state),\n    success: selectSendAddressesSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state)\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchAlert: function fetchAlert(payload) {\n      return dispatch(alertPush(payload));\n    },\n    sendAddresses: function sendAddresses(payload) {\n      return dispatch(_sendAddresses(payload));\n    }\n  };\n};\nexport var Address = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(AddressComponent); // tslint:disable-line","map":{"version":3,"names":["cr","countries","React","Button","injectIntl","connect","withRouter","compose","languages","CustomInput","SearchDropdown","UploadFile","alertPush","selectCurrentLanguage","selectMobileDeviceState","selectSendAddressesSuccess","sendAddresses","AddressComponent","state","address","addressFocused","city","cityFocused","country","postcode","postcodeFocused","fileScan","handleChange","value","key","setState","handleFieldFocus","field","handleUploadScan","uploadEvent","id","allFiles","target","files","maxDocsCount","additionalFileList","Array","from","length","slice","handleValidateInput","residentialAddressRegex","RegExp","match","cityRegex","postcodeRegex","selectCountry","option","getAlpha2Code","props","lang","handleCheckButtonDisabled","addressValid","cityValid","postcodeValid","sendAddress","request","FormData","append","translate","intl","formatMessage","next","success","history","push","isMobileDevice","map","l","registerLocale","require","addressFocusedClass","cityFocusedClass","postcodeFocusedClass","dataCountries","Object","values","getNames","item","label","e","name","Component","mapStateToProps","mapDispatchToProps","dispatch","fetchAlert","payload","Address"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/containers/Confirm/Address/index.tsx"],"sourcesContent":["import cr from 'classnames';\nimport * as countries from 'i18n-iso-countries';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../../';\nimport { languages } from '../../../api/config';\nimport { CustomInput, SearchDropdown, UploadFile } from '../../../components';\nimport {\n    alertPush,\n    RootState,\n    selectCurrentLanguage,\n    selectMobileDeviceState,\n    selectSendAddressesSuccess,\n    sendAddresses,\n} from '../../../modules';\n\ninterface ReduxProps {\n    lang: string;\n    success?: string;\n    isMobileDevice: boolean;\n}\n\ninterface DispatchProps {\n    sendAddresses: typeof sendAddresses;\n    fetchAlert: typeof alertPush;\n}\n\ninterface State {\n    address: string;\n    addressFocused: boolean;\n    city: string;\n    cityFocused: boolean;\n    country: string;\n    postcode: string;\n    postcodeFocused: boolean;\n    fileScan: File[];\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps;\n\nclass AddressComponent extends React.Component<Props, State> {\n    public state = {\n        address: '',\n        addressFocused: false,\n        city: '',\n        cityFocused: false,\n        country: '',\n        postcode: '',\n        postcodeFocused: false,\n        fileScan: [],\n    };\n\n    public UNSAFE_componentWillReceiveProps(next: Props) {\n        if (next.success && !this.props.success) {\n            this.props.history.push('/profile');\n        }\n    }\n\n    public render() {\n        const { lang, isMobileDevice } = this.props;\n        const {\n            address,\n            addressFocused,\n            city,\n            cityFocused,\n            postcode,\n            postcodeFocused,\n            fileScan,\n        } = this.state;\n\n        /* tslint:disable */\n        languages.map((l: string) => countries.registerLocale(require(`i18n-iso-countries/langs/${l}.json`)));\n        /* tslint:enable */\n\n        const addressFocusedClass = cr('pg-confirm__content-address__row__content', {\n            'pg-confirm__content-address__row__content--focused': addressFocused,\n            'pg-confirm__content-address__row__content--wrong': address && !this.handleValidateInput('address', address),\n        });\n\n        const cityFocusedClass = cr('pg-confirm__content-address__row__content', {\n            'pg-confirm__content-address__row__content--focused': cityFocused,\n            'pg-confirm__content-address__row__content--wrong': city && !this.handleValidateInput('city', city),\n        });\n\n        const postcodeFocusedClass = cr('pg-confirm__content-address__row__content', {\n            'pg-confirm__content-address__row__content--focused': postcodeFocused,\n            'pg-confirm__content-address__row__content--wrong': postcode && !this.handleValidateInput('postcode', postcode),\n        });\n\n        const dataCountries = Object.values(countries.getNames(lang)).map(item => {\n            return { label: item, value: item };\n        });\n\n        return (\n            <React.Fragment>\n                <div className=\"pg-confirm__content-address\">\n                    <div className=\"pg-confirm__content-address__row\">\n                        <fieldset className={addressFocusedClass}>\n                            <CustomInput\n                                type=\"string\"\n                                inputValue={address}\n                                placeholder={this.translate('page.body.kyc.address.address.placeholder')}\n                                label={this.translate('page.body.kyc.address.address')}\n                                defaultLabel={''}\n                                labelVisible={true}\n                                handleChangeInput={e => this.handleChange(e, 'address')}\n                                handleFocusInput={this.handleFieldFocus('address')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-address__row input-group\">\n                        <fieldset className={cityFocusedClass}>\n                            <CustomInput\n                                type=\"string\"\n                                label={this.translate('page.body.kyc.address.city')}\n                                labelVisible={true}\n                                defaultLabel={''}\n                                placeholder={this.translate('page.body.kyc.address.city.placeholder')}\n                                inputValue={city}\n                                handleChangeInput={e => this.handleChange(e, 'city')}\n                                handleFocusInput={this.handleFieldFocus('city')}\n                            />\n                        </fieldset>\n                        <fieldset className={postcodeFocusedClass}>\n                            <CustomInput\n                                type=\"string\"\n                                label={this.translate('page.body.kyc.address.postcode')}\n                                labelVisible={true}\n                                defaultLabel={''}\n                                placeholder={this.translate('page.body.kyc.address.postcode.placeholder')}\n                                inputValue={postcode}\n                                handleChangeInput={e => this.handleChange(e, 'postcode')}\n                                handleFocusInput={this.handleFieldFocus('postcode')}\n                            />\n                        </fieldset>\n                    </div>\n                    <div className=\"pg-confirm__content-address__row__content\">\n                        <div className=\"pg-confirm__content-address__row__content-label\">\n                            {this.translate('page.body.kyc.documents.country')}\n                        </div>\n                        <SearchDropdown\n                            className=\"pg-confirm__content-address__row__content-number-dropdown\"\n                            options={dataCountries}\n                            onSelect={this.selectCountry}\n                            placeholder={this.translate('page.body.kyc.documents.country.placeholder')}\n                        />\n                    </div>\n                    <UploadFile\n                        id=\"fileScan\"\n                        isMobileDevice={isMobileDevice}\n                        title={this.translate('page.body.kyc.address.uploadFile.title')}\n                        label={this.translate('page.body.kyc.address.uploadFile.label')}\n                        buttonText={this.translate('page.body.kyc.address.uploadFile.button')}\n                        sizesText={this.translate('page.body.kyc.address.uploadFile.sizes')}\n                        formatsText={this.translate('page.body.kyc.address.uploadFile.formats')}\n                        tipText={this.translate('page.body.kyc.address.uploadFile.tip')}\n                        handleUploadScan={uploadEvent => this.handleUploadScan(uploadEvent, 'fileScan')}\n                        uploadedFile={fileScan[0] && (fileScan[0] as File).name}\n                    />\n                    <div className=\"pg-confirm__content-deep\">\n                        <Button\n                            onClick={this.sendAddress}\n                            disabled={this.handleCheckButtonDisabled()}\n                            size=\"lg\"\n                            variant=\"primary\"\n                            type=\"button\"\n                            block={true}\n                        >\n                            {this.translate('page.body.kyc.submit')}\n                        </Button>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private handleChange = (value: string, key: string) => {\n        // @ts-ignore\n        this.setState({\n            [key]: value,\n        });\n    };\n\n    private handleFieldFocus = (field: string) => {\n        return () => {\n            switch (field) {\n                case 'address':\n                    this.setState({\n                        addressFocused: !this.state.addressFocused,\n                    });\n                    break;\n                case 'city':\n                    this.setState({\n                        cityFocused: !this.state.cityFocused,\n                    });\n                    break;\n                case 'postcode':\n                    this.setState({\n                        postcodeFocused: !this.state.postcodeFocused,\n                    });\n                    break;\n                default:\n                    break;\n            }\n        };\n    };\n\n    private handleUploadScan = (uploadEvent, id) => {\n        const allFiles: File[] = uploadEvent.target.files;\n        const maxDocsCount = 1;\n        const additionalFileList = Array.from(allFiles).length > maxDocsCount ?  Array.from(allFiles).slice(0, maxDocsCount) : Array.from(allFiles);\n\n        switch (id) {\n            case 'fileScan':\n                this.setState({ fileScan: additionalFileList });\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handleValidateInput = (field: string, value: string): boolean => {\n        switch (field) {\n            case 'address':\n                const residentialAddressRegex = new RegExp(`^[a-zA-Z0-9,.;/\\\\s]+$`);\n\n                return value.match(residentialAddressRegex) ? true : false;\n            case 'city':\n                const cityRegex = new RegExp(`^[a-zA-Z]+$`);\n\n                return value.match(cityRegex) ? true : false;\n            case 'postcode':\n                const postcodeRegex = new RegExp(`^[a-zA-Z0-9]{1,12}$`);\n\n                return value.match(postcodeRegex) ? true : false;\n            default:\n                return true;\n        }\n    };\n\n    private selectCountry = option => {\n        this.setState({\n            country: countries.getAlpha2Code(option.value, this.props.lang),\n        });\n    };\n\n    private handleCheckButtonDisabled = () => {\n        const {\n            address,\n            city,\n            country,\n            fileScan,\n            postcode,\n        } = this.state;\n\n        const addressValid = this.handleValidateInput('address', address);\n        const cityValid = this.handleValidateInput('city', city);\n        const postcodeValid = this.handleValidateInput('postcode', postcode);\n\n        return (\n            !addressValid ||\n            !cityValid ||\n            !country.length ||\n            !postcodeValid ||\n            !fileScan.length\n        );\n    };\n\n    private sendAddress = () => {\n        const {\n            address,\n            city,\n            country,\n            fileScan,\n            postcode,\n        } = this.state;\n\n        const request = new FormData();\n        request.append('upload[]', fileScan[0]);\n        request.append('address', address);\n        request.append('city', city);\n        request.append('country', country);\n        request.append('postcode', postcode);\n\n        this.props.sendAddresses(request);\n    };\n\n    private translate = (key: string) => this.props.intl.formatMessage({id: key});\n}\n\nconst mapStateToProps = (state: RootState): ReduxProps => ({\n    lang: selectCurrentLanguage(state),\n    success: selectSendAddressesSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        fetchAlert: payload => dispatch(alertPush(payload)),\n        sendAddresses: payload => dispatch(sendAddresses(payload)),\n    });\n\nexport const Address = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(AddressComponent) as any; // tslint:disable-line\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}