{"ast":null,"code":"import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n/** A simple queue that holds promises. */\nvar PromiseBuffer = /** @class */function () {\n  function PromiseBuffer(_limit) {\n    this._limit = _limit;\n    /** Internal set of queued Promises */\n    this._buffer = [];\n  }\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  PromiseBuffer.prototype.isReady = function () {\n    return this._limit === undefined || this.length() < this._limit;\n  };\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  PromiseBuffer.prototype.add = function (task) {\n    var _this = this;\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task.then(function () {\n      return _this.remove(task);\n    }).then(null, function () {\n      return _this.remove(task).then(null, function () {\n        // We have to add this catch here otherwise we have an unhandledPromiseRejection\n        // because it's a new Promise chain.\n      });\n    });\n    return task;\n  };\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  PromiseBuffer.prototype.remove = function (task) {\n    var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  };\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  PromiseBuffer.prototype.length = function () {\n    return this._buffer.length;\n  };\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  PromiseBuffer.prototype.drain = function (timeout) {\n    var _this = this;\n    return new SyncPromise(function (resolve) {\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(_this._buffer).then(function () {\n        clearTimeout(capturedSetTimeout);\n        resolve(true);\n      }).then(null, function () {\n        resolve(true);\n      });\n    });\n  };\n  return PromiseBuffer;\n}();\nexport { PromiseBuffer };","map":{"version":3,"sources":["../src/promisebuffer.ts"],"names":[],"mappings":"AAAA,SAAS,WAAW,QAAQ,SAAS;AACrC,SAAS,WAAW,QAAQ,eAAe;AAE3C;AACA,IAAA,aAAA,GAAA,aAAA,YAAA;EAIE,SAAA,aAAA,CAA6B,MAAe,EAAA;IAAf,IAAA,CAAA,MAAM,GAAN,MAAM;IAHnC;IACiB,IAAA,CAAA,OAAO,GAA0B,EAAE;EAEL;EAE/C;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,OAAO,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM;EACjE,CAAC;EAED;;;;;AAKG;EACI,aAAA,CAAA,SAAA,CAAA,GAAG,GAAV,UAAW,IAAoB,EAAA;IAA/B,IAAA,KAAA,GAAA,IAAA;IACE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;MACnB,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,WAAW,CAAC,iDAAiD,CAAC,CAAC;IAC9F;IACD,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;IACxB;IACD,IAAI,CACD,IAAI,CAAC,YAAA;MAAM,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAAjB,CAAiB,CAAC,CAC7B,IAAI,CAAC,IAAI,EAAE,YAAA;MACV,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,YAAA;QAC3B;QACA;MACF,CAAC,CAAC;IAHF,CAGE,CACH;IACH,OAAO,IAAI;EACb,CAAC;EAED;;;;;AAKG;EACI,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,IAAoB,EAAA;IAChC,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,OAAO,WAAW;EACpB,CAAC;EAED;;AAEG;EACI,aAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM;EAC5B,CAAC;EAED;;;;;AAKG;EACI,aAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,UAAa,OAAgB,EAAA;IAA7B,IAAA,KAAA,GAAA,IAAA;IACE,OAAO,IAAI,WAAW,CAAU,UAAA,OAAO,EAAA;MACrC,IAAM,kBAAkB,GAAG,UAAU,CAAC,YAAA;QACpC,IAAI,OAAO,IAAI,OAAO,GAAG,CAAC,EAAE;UAC1B,OAAO,CAAC,KAAK,CAAC;QACf;MACH,CAAC,EAAE,OAAO,CAAC;MACX,WAAW,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,CAAC,CAC1B,IAAI,CAAC,YAAA;QACJ,YAAY,CAAC,kBAAkB,CAAC;QAChC,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC,CACD,IAAI,CAAC,IAAI,EAAE,YAAA;QACV,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,EAAA","sourcesContent":["import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}