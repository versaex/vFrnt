{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { ConnectorEvent } from '@web3-react/types';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar AbstractConnector = /*#__PURE__*/\nfunction (_EventEmitter) {\n  _inheritsLoose(AbstractConnector, _EventEmitter);\n  function AbstractConnector(_temp) {\n    var _this;\n    var _ref = _temp === void 0 ? {} : _temp,\n      supportedChainIds = _ref.supportedChainIds;\n    _this = _EventEmitter.call(this) || this;\n    _this.supportedChainIds = supportedChainIds;\n    return _this;\n  }\n  var _proto = AbstractConnector.prototype;\n  _proto.emitUpdate = function emitUpdate(update) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Update + \"' with payload\", update);\n    }\n    this.emit(ConnectorEvent.Update, update);\n  };\n  _proto.emitError = function emitError(error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Error + \"' with payload\", error);\n    }\n    this.emit(ConnectorEvent.Error, error);\n  };\n  _proto.emitDeactivate = function emitDeactivate() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Deactivate + \"'\");\n    }\n    this.emit(ConnectorEvent.Deactivate);\n  };\n  return AbstractConnector;\n}(EventEmitter);\nexport { AbstractConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["AbstractConnector","EventEmitter","supportedChainIds","emitUpdate","update","console","log","ConnectorEvent","Update","emit","emitError","error","Error","emitDeactivate","Deactivate"],"mappings":";;;;;;;IAGsBA,iBAAtB,G;AAAA,UAAA,aAAA,EAAA;;;;kCAGkE,CAAA,CAAA,GAAA,KAAA;MAAlDE,iBAAAA,GAAAA,IAAAA,CAAAA,iBAAAA;;UAEPA,iBAAL,GAAyBA,iBAAzB;;;;SASQC,UAdZ,GAcYA,SAAAA,UAAAA,CAAWC,MAAXD,EAAAA;+CACK;MACXE,OAAO,CAACC,GAARD,CAAAA,YAAAA,GAAyBE,cAAc,CAACC,MAAxCH,GAAAA,gBAAAA,EAAgED,MAAhEC,CAAAA;;SAEGI,IAAL,CAAUF,cAAc,CAACC,MAAzB,EAAiCJ,MAAjC,CAAA;GAlBJ;SAqBYM,SArBZ,GAqBYA,SAAAA,SAAAA,CAAUC,KAAVD,EAAAA;+CACK;MACXL,OAAO,CAACC,GAARD,CAAAA,YAAAA,GAAyBE,cAAc,CAACK,KAAxCP,GAAAA,gBAAAA,EAA+DM,KAA/DN,CAAAA;;SAEGI,IAAL,CAAUF,cAAc,CAACK,KAAzB,EAAgCD,KAAhC,CAAA;GAzBJ;SA4BYE,cA5BZ,GA4BYA,SAAAA,cAAAA,GAAAA;+CACK;MACXR,OAAO,CAACC,GAARD,CAAAA,YAAAA,GAAyBE,cAAc,CAACO,UAAxCT,GAAAA,GAAAA,CAAAA;;SAEGI,IAAL,CAAUF,cAAc,CAACO,UAAzB,CAAA;GAhCJ;;EAAgDb,YAAhD,CAAA","sourcesContent":["import { EventEmitter } from 'events'\nimport { AbstractConnectorArguments, ConnectorUpdate, ConnectorEvent } from '@web3-react/types'\n\nexport abstract class AbstractConnector extends EventEmitter {\n  public readonly supportedChainIds?: number[]\n\n  constructor({ supportedChainIds }: AbstractConnectorArguments = {}) {\n    super()\n    this.supportedChainIds = supportedChainIds\n  }\n\n  public abstract async activate(): Promise<ConnectorUpdate>\n  public abstract async getProvider(): Promise<any>\n  public abstract async getChainId(): Promise<number | string>\n  public abstract async getAccount(): Promise<null | string>\n  public abstract deactivate(): void\n\n  protected emitUpdate(update: ConnectorUpdate): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Update}' with payload`, update)\n    }\n    this.emit(ConnectorEvent.Update, update)\n  }\n\n  protected emitError(error: Error): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Error}' with payload`, error)\n    }\n    this.emit(ConnectorEvent.Error, error)\n  }\n\n  protected emitDeactivate(): void {\n    if (__DEV__) {\n      console.log(`Emitting '${ConnectorEvent.Deactivate}'`)\n    }\n    this.emit(ConnectorEvent.Deactivate)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}