{"ast":null,"code":"'use strict';\n\nvar utils = exports;\nutils.assert = function assert(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n};\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++) {\n      res[i] = msg[i] | 0;\n    }\n    return res;\n  }\n  if (!enc) {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi) res.push(hi, lo);else res.push(lo);\n    }\n  } else if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0) msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2) {\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\nutils.zero2 = zero2;\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    res += zero2(msg[i].toString(16));\n  }\n  return res;\n}\nutils.toHex = toHex;\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex') return toHex(arr);else return arr;\n};\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << w + 1;\n  var k = num.clone();\n  while (k.cmpn(1) >= 0) {\n    var z;\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n    naf.push(z);\n\n    // Optimization, shift by word if possible\n    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;\n    for (var i = 1; i < shift; i++) {\n      naf.push(0);\n    }\n    k.ishrn(shift);\n  }\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [[], []];\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = k1.andln(3) + d1 & 3;\n    var m24 = k2.andln(3) + d2 & 3;\n    if (m14 === 3) m14 = -1;\n    if (m24 === 3) m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = k1.andln(7) + d1 & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n    }\n    jsf[0].push(u1);\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = k2.andln(7) + d2 & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1) d1 = 1 - d1;\n    if (2 * d2 === u2 + 1) d2 = 1 - d2;\n    k1.ishrn(1);\n    k2.ishrn(1);\n  }\n  return jsf;\n}\nutils.getJSF = getJSF;","map":{"version":3,"names":["utils","exports","assert","val","msg","Error","toArray","enc","Array","isArray","slice","res","i","length","c","charCodeAt","hi","lo","push","replace","parseInt","zero2","word","toHex","toString","encode","arr","getNAF","num","w","naf","ws","k","clone","cmpn","z","isOdd","mod","andln","isubn","shift","ishrn","getJSF","k1","k2","jsf","d1","d2","m14","m24","u1","m8","u2"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/node_modules/elliptic/lib/elliptic/utils.js"],"sourcesContent":["'use strict';\n\nvar utils = exports;\n\nutils.assert = function assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n};\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (!enc) {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  } else if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n  while (k.cmpn(1) >= 0) {\n    var z;\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n    naf.push(z);\n\n    // Optimization, shift by word if possible\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;\n    for (var i = 1; i < shift; i++)\n      naf.push(0);\n    k.ishrn(shift);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.ishrn(1);\n    k2.ishrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}