{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inputValue;\nvar _charTypesEnum = require('../constants/charTypesEnum.js');\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction inputValue(_ref) {\n  var data = _ref.data,\n    _ref$input = _ref.input,\n    input = _ref$input === undefined ? '' : _ref$input,\n    selection = _ref.selection,\n    mask = _ref.mask,\n    maskChar = _ref.maskChar,\n    maskString = _ref.maskString;\n  var value = [];\n  var maskedValue = '';\n  var maskIndex = 0;\n  var valueIndex = 0;\n  var pastedIndex = 0;\n  var inputValuesApplied = 0;\n  while (mask[maskIndex]) {\n    var item = data.length > valueIndex ? data[valueIndex] : null;\n    var maskPart = mask[maskIndex];\n    var pastedValuesStack = null;\n    if (selection.start <= maskIndex && pastedIndex < input.length) {\n      pastedValuesStack = input.slice(pastedIndex);\n    }\n\n    // Обработка захардкоженных в маску символов. \n    if (maskPart.char) {\n      // Если есть вводимые пользователем значение, в первую очередь проверяем его.\n      // Но не проверяем по всему стеку.\n      if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {\n        pastedIndex++;\n      } else {\n        if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {\n          valueIndex++;\n        }\n      }\n      value.push({\n        char: maskPart.char,\n        type: _charTypesEnum2.default.CHAR\n      });\n      if (pastedValuesStack) {\n        inputValuesApplied++;\n      }\n      maskedValue += maskPart.char;\n    }\n\n    // Кастомный текст\n    if (maskPart.regexp) {\n      var part = null;\n\n      // Если есть вводимое пользователем значение, то проверям его. \n      // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное\n      if (pastedValuesStack) {\n        var i = 0;\n        while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {\n          i++;\n          pastedIndex++;\n        }\n        if (pastedValuesStack.length > i) {\n          pastedIndex++;\n          inputValuesApplied++;\n\n          // Игнорируем предыдущее значение в инпуте\n          valueIndex++;\n          part = pastedValuesStack[i];\n          value.push({\n            char: part,\n            type: _charTypesEnum2.default.USER\n          });\n          maskedValue += part;\n        }\n      }\n\n      // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер\n      if (!part) {\n        // Если произошел сдвиг, пропускаем лишнее значение\n        if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {\n          valueIndex++;\n          continue;\n        }\n        if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {\n          value.push({\n            char: item.char,\n            type: _charTypesEnum2.default.USER\n          });\n          maskedValue += item.char;\n          valueIndex++;\n        } else {\n          part = maskString ? maskString[maskIndex] : maskChar;\n          value.push({\n            char: part,\n            type: _charTypesEnum2.default.MASK\n          });\n          if (data.length > maskIndex) {\n            valueIndex++;\n          }\n          maskedValue += part;\n        }\n      }\n    }\n    maskIndex++;\n  }\n  var selectionPosition = selection.start + inputValuesApplied;\n\n  // Удаляем все ведующие maskChar\n  var bound = value.length - 1;\n  var charsCount = 0;\n  while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {\n    if (value[bound].type === _charTypesEnum2.default.MASK) {\n      charsCount = 0;\n    }\n    if (value[bound].type === _charTypesEnum2.default.CHAR) {\n      charsCount++;\n    }\n    bound--;\n  }\n  bound += charsCount;\n  var visibleValue = '';\n  for (var _i = 0; _i <= bound; _i++) {\n    visibleValue += value[_i].char;\n  }\n  return {\n    value: value,\n    visibleValue: visibleValue,\n    maskedValue: maskedValue,\n    selection: {\n      start: selectionPosition,\n      end: selectionPosition\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","inputValue","_charTypesEnum","require","_charTypesEnum2","_interopRequireDefault","obj","__esModule","_ref","data","_ref$input","input","undefined","selection","mask","maskChar","maskString","maskedValue","maskIndex","valueIndex","pastedIndex","inputValuesApplied","item","length","maskPart","pastedValuesStack","start","slice","char","type","USER","push","CHAR","regexp","part","i","test","MASK","selectionPosition","bound","charsCount","visibleValue","_i","end"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/input-core/lib/functions/inputValue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = inputValue;\n\nvar _charTypesEnum = require('../constants/charTypesEnum.js');\n\nvar _charTypesEnum2 = _interopRequireDefault(_charTypesEnum);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction inputValue(_ref) {\n    var data = _ref.data,\n        _ref$input = _ref.input,\n        input = _ref$input === undefined ? '' : _ref$input,\n        selection = _ref.selection,\n        mask = _ref.mask,\n        maskChar = _ref.maskChar,\n        maskString = _ref.maskString;\n\n    var value = [];\n    var maskedValue = '';\n\n    var maskIndex = 0;\n    var valueIndex = 0;\n    var pastedIndex = 0;\n\n    var inputValuesApplied = 0;\n\n    while (mask[maskIndex]) {\n        var item = data.length > valueIndex ? data[valueIndex] : null;\n        var maskPart = mask[maskIndex];\n\n        var pastedValuesStack = null;\n        if (selection.start <= maskIndex && pastedIndex < input.length) {\n            pastedValuesStack = input.slice(pastedIndex);\n        }\n\n        // Обработка захардкоженных в маску символов. \n        if (maskPart.char) {\n            // Если есть вводимые пользователем значение, в первую очередь проверяем его.\n            // Но не проверяем по всему стеку.\n            if (pastedValuesStack && pastedValuesStack[0] === maskPart.char) {\n                pastedIndex++;\n            } else {\n                if (item && (item.char === maskPart.char || item.type !== _charTypesEnum2.default.USER) || input) {\n                    valueIndex++;\n                }\n            }\n\n            value.push({\n                char: maskPart.char,\n                type: _charTypesEnum2.default.CHAR\n            });\n\n            if (pastedValuesStack) {\n                inputValuesApplied++;\n            }\n\n            maskedValue += maskPart.char;\n        }\n\n        // Кастомный текст\n        if (maskPart.regexp) {\n            var part = null;\n\n            // Если есть вводимое пользователем значение, то проверям его. \n            // Причем пробегаемся по стеку вводимых значений, пока не найдем нужное\n            if (pastedValuesStack) {\n                var i = 0;\n                while (!maskPart.regexp.test(pastedValuesStack[i]) && pastedValuesStack.length > i) {\n                    i++;\n                    pastedIndex++;\n                }\n                if (pastedValuesStack.length > i) {\n                    pastedIndex++;\n                    inputValuesApplied++;\n\n                    // Игнорируем предыдущее значение в инпуте\n                    valueIndex++;\n\n                    part = pastedValuesStack[i];\n                    value.push({\n                        char: part,\n                        type: _charTypesEnum2.default.USER\n                    });\n                    maskedValue += part;\n                }\n            }\n\n            // В пользовательском вводе нет или невалидные данные. Пытаемся аплаить те данные, что были раньше или заменяем на плейсхолдер\n            if (!part) {\n                // Если произошел сдвиг, пропускаем лишнее значение\n                if (item && item.type === _charTypesEnum2.default.CHAR && data.length > valueIndex + 1) {\n                    valueIndex++;\n                    continue;\n                }\n                if (item && item.type === _charTypesEnum2.default.USER && maskPart.regexp.test(item.char)) {\n                    value.push({\n                        char: item.char,\n                        type: _charTypesEnum2.default.USER\n                    });\n                    maskedValue += item.char;\n                    valueIndex++;\n                } else {\n                    part = maskString ? maskString[maskIndex] : maskChar;\n\n                    value.push({\n                        char: part,\n                        type: _charTypesEnum2.default.MASK\n                    });\n\n                    if (data.length > maskIndex) {\n                        valueIndex++;\n                    }\n\n                    maskedValue += part;\n                }\n            }\n        }\n\n        maskIndex++;\n    }\n\n    var selectionPosition = selection.start + inputValuesApplied;\n\n    // Удаляем все ведующие maskChar\n    var bound = value.length - 1;\n    var charsCount = 0;\n    while (bound >= 0 && value[bound].type !== _charTypesEnum2.default.USER) {\n        if (value[bound].type === _charTypesEnum2.default.MASK) {\n            charsCount = 0;\n        }\n        if (value[bound].type === _charTypesEnum2.default.CHAR) {\n            charsCount++;\n        }\n        bound--;\n    }\n    bound += charsCount;\n\n    var visibleValue = '';\n    for (var _i = 0; _i <= bound; _i++) {\n        visibleValue += value[_i].char;\n    }\n\n    return {\n        value: value,\n        visibleValue: visibleValue,\n        maskedValue: maskedValue,\n        selection: {\n            start: selectionPosition,\n            end: selectionPosition\n        }\n    };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}