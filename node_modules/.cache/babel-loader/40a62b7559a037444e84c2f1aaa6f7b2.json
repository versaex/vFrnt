{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\nvar GlobalHandlers = /** @class */function () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /** JSDoc */\n    this._onErrorHandlerInstalled = false;\n    /** JSDoc */\n    this._onUnhandledRejectionHandlerInstalled = false;\n    this._options = __assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  };\n  /** JSDoc */\n  GlobalHandlers.prototype._installGlobalOnErrorHandler = function () {\n    var _this = this;\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function callback(data) {\n        var error = data.error;\n        var currentHub = getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n        var client = currentHub.getClient();\n        var event = isPrimitive(error) ? _this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column) : _this._enhanceEventWithInitialFrame(eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: false\n        }), data.url, data.line, data.column);\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n      },\n      type: 'error'\n    });\n    this._onErrorHandlerInstalled = true;\n  };\n  /** JSDoc */\n  GlobalHandlers.prototype._installGlobalOnUnhandledRejectionHandler = function () {\n    var _this = this;\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: function callback(e) {\n        var error = e;\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n        var currentHub = getCurrentHub();\n        var hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        var isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n        var client = currentHub.getClient();\n        var event = isPrimitive(error) ? _this._eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(error, undefined, {\n          attachStacktrace: client && client.getOptions().attachStacktrace,\n          rejection: true\n        });\n        event.level = Severity.Error;\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection'\n        });\n        currentHub.captureEvent(event, {\n          originalException: error\n        });\n        return;\n      },\n      type: 'unhandledrejection'\n    });\n    this._onUnhandledRejectionHandlerInstalled = true;\n  };\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  GlobalHandlers.prototype._eventFromIncompleteOnError = function (msg, url, line, column) {\n    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n    // If 'message' is ErrorEvent, get real message from inside\n    var message = isErrorEvent(msg) ? msg.message : msg;\n    var name;\n    if (isString(message)) {\n      var groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n    var event = {\n      exception: {\n        values: [{\n          type: name || 'Error',\n          value: message\n        }]\n      }\n    };\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  };\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  GlobalHandlers.prototype._eventFromRejectionWithPrimitive = function (reason) {\n    return {\n      exception: {\n        values: [{\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: \"Non-Error promise rejection captured with value: \" + String(reason)\n        }]\n      }\n    };\n  };\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  GlobalHandlers.prototype._enhanceEventWithInitialFrame = function (event, url, line, column) {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n    var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno: colno,\n        filename: filename,\n        function: '?',\n        in_app: true,\n        lineno: lineno\n      });\n    }\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\nexport { GlobalHandlers };","map":{"version":3,"sources":["../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  private _onErrorHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  private _onUnhandledRejectionHandlerInstalled: boolean = false;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      this._installGlobalOnErrorHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      this._installGlobalOnUnhandledRejectionHandler();\n    }\n  }\n\n  /** JSDoc */\n  private _installGlobalOnErrorHandler(): void {\n    if (this._onErrorHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n        const error = data.error;\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromIncompleteOnError(data.msg, data.url, data.line, data.column)\n          : this._enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error, undefined, {\n                attachStacktrace: client && client.getOptions().attachStacktrace,\n                rejection: false,\n              }),\n              data.url,\n              data.line,\n              data.column,\n            );\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onerror',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n      },\n      type: 'error',\n    });\n\n    this._onErrorHandlerInstalled = true;\n  }\n\n  /** JSDoc */\n  private _installGlobalOnUnhandledRejectionHandler(): void {\n    if (this._onUnhandledRejectionHandlerInstalled) {\n      return;\n    }\n\n    addInstrumentationHandler({\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback: (e: any) => {\n        let error = e;\n\n        // dig the object of the rejection out of known event types\n        try {\n          // PromiseRejectionEvents store the object of the rejection under 'reason'\n          // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n          if ('reason' in e) {\n            error = e.reason;\n          }\n          // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n          // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n          // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n          // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n          // https://github.com/getsentry/sentry-javascript/issues/2380\n          else if ('detail' in e && 'reason' in e.detail) {\n            error = e.detail.reason;\n          }\n        } catch (_oO) {\n          // no-empty\n        }\n\n        const currentHub = getCurrentHub();\n        const hasIntegration = currentHub.getIntegration(GlobalHandlers);\n        const isFailedOwnDelivery = error && error.__sentry_own_request__ === true;\n\n        if (!hasIntegration || shouldIgnoreOnError() || isFailedOwnDelivery) {\n          return true;\n        }\n\n        const client = currentHub.getClient();\n        const event = isPrimitive(error)\n          ? this._eventFromRejectionWithPrimitive(error)\n          : eventFromUnknownInput(error, undefined, {\n              attachStacktrace: client && client.getOptions().attachStacktrace,\n              rejection: true,\n            });\n\n        event.level = Severity.Error;\n\n        addExceptionMechanism(event, {\n          handled: false,\n          type: 'onunhandledrejection',\n        });\n\n        currentHub.captureEvent(event, {\n          originalException: error,\n        });\n\n        return;\n      },\n      type: 'unhandledrejection',\n    });\n\n    this._onUnhandledRejectionHandlerInstalled = true;\n  }\n\n  /**\n   * This function creates a stack from an old, error-less onerror handler.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n    const ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n    // If 'message' is ErrorEvent, get real message from inside\n    let message = isErrorEvent(msg) ? msg.message : msg;\n    let name;\n\n    if (isString(message)) {\n      const groups = message.match(ERROR_TYPES_RE);\n      if (groups) {\n        name = groups[1];\n        message = groups[2];\n      }\n    }\n\n    const event = {\n      exception: {\n        values: [\n          {\n            type: name || 'Error',\n            value: message,\n          },\n        ],\n      },\n    };\n\n    return this._enhanceEventWithInitialFrame(event, url, line, column);\n  }\n\n  /**\n   * Create an event from a promise rejection where the `reason` is a primitive.\n   *\n   * @param reason: The `reason` property of the promise rejection\n   * @returns An Event object with an appropriate `exception` value\n   */\n  private _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n    return {\n      exception: {\n        values: [\n          {\n            type: 'UnhandledRejection',\n            // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n            value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n          },\n        ],\n      },\n    };\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n    event.exception = event.exception || {};\n    event.exception.values = event.exception.values || [];\n    event.exception.values[0] = event.exception.values[0] || {};\n    event.exception.values[0].stacktrace = event.exception.values[0].stacktrace || {};\n    event.exception.values[0].stacktrace.frames = event.exception.values[0].stacktrace.frames || [];\n\n    const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n    const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n    const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n    if (event.exception.values[0].stacktrace.frames.length === 0) {\n      event.exception.values[0].stacktrace.frames.push({\n        colno,\n        filename,\n        function: '?',\n        in_app: true,\n        lineno,\n      });\n    }\n\n    return event;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}