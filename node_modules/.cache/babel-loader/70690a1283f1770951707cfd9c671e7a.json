{"ast":null,"code":"import { __rest } from \"tslib\";\n/** Creates a SentryRequest from an event. */\nexport function sessionToSentryRequest(session, api) {\n  var envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString()\n  });\n  var itemHeaders = JSON.stringify({\n    type: 'session'\n  });\n  return {\n    body: envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + JSON.stringify(session),\n    type: 'session',\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth()\n  };\n}\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event, api) {\n  // since JS has no Object.prototype.pop()\n  var _a = event.tags || {},\n    samplingMethod = _a.__sentry_samplingMethod,\n    sampleRate = _a.__sentry_sampleRate,\n    otherTags = __rest(_a, [\"__sentry_samplingMethod\", \"__sentry_sampleRate\"]);\n  event.tags = otherTags;\n  var useEnvelope = event.type === 'transaction';\n  var req = {\n    body: JSON.stringify(event),\n    type: event.type || 'event',\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth()\n  };\n  // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    var envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString()\n    });\n    var itemHeaders = JSON.stringify({\n      type: event.type,\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{\n        id: samplingMethod,\n        rate: sampleRate\n      }]\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    var envelope = envelopeHeaders + \"\\n\" + itemHeaders + \"\\n\" + req.body;\n    req.body = envelope;\n  }\n  return req;\n}","map":{"version":3,"sources":["../src/request.ts"],"names":[],"mappings":";AAIA;AACA,OAAM,SAAU,sBAAsB,CAAC,OAAgB,EAAE,GAAQ,EAAA;EAC/D,IAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC;IACrC,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW;GAChC,CAAC;EACF,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;IACjC,IAAI,EAAE;GACP,CAAC;EAEF,OAAO;IACL,IAAI,EAAK,eAAe,GAAA,IAAA,GAAK,WAAW,GAAA,IAAA,GAAK,IAAI,CAAC,SAAS,CAAC,OAAO,CAAG;IACtE,IAAI,EAAE,SAAS;IACf,GAAG,EAAE,GAAG,CAAC,qCAAqC;GAC/C;AACH;AAEA;AACA,OAAM,SAAU,oBAAoB,CAAC,KAAY,EAAE,GAAQ,EAAA;EACzD;EACA,IAAM,EAAA,GAAA,KAAA,CAAA,IAAA,IAAA,CAAA,CAA6G;IAA3G,cAAA,GAAA,EAAA,CAAA,uBAAuC;IAAE,UAAA,GAAA,EAAA,CAAA,mBAA+B;IAAE,SAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,yBAAA,EAAA,qBAAA,CAAA,CAAiC;EACnH,KAAK,CAAC,IAAI,GAAG,SAAS;EAEtB,IAAM,WAAW,GAAG,KAAK,CAAC,IAAI,KAAK,aAAa;EAEhD,IAAM,GAAG,GAAkB;IACzB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC3B,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,OAAO;IAC3B,GAAG,EAAE,WAAW,GAAG,GAAG,CAAC,qCAAqC,EAAE,GAAG,GAAG,CAAC,kCAAkC;GACxG;EAED;EAEA;EACA;EACA;EACA;EACA,IAAI,WAAW,EAAE;IACf,IAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC;MACrC,QAAQ,EAAE,KAAK,CAAC,QAAQ;MACxB,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW;KAChC,CAAC;IACF,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;MACjC,IAAI,EAAE,KAAK,CAAC,IAAI;MAEhB;MACA;MACA,YAAY,EAAE,CAAC;QAAE,EAAE,EAAE,cAAc;QAAE,IAAI,EAAE;MAAU,CAAE;KAexD,CAAC;IACF;IACA;IACA;IACA;IACA,IAAM,QAAQ,GAAM,eAAe,GAAA,IAAA,GAAK,WAAW,GAAA,IAAA,GAAK,GAAG,CAAC,IAAM;IAClE,GAAG,CAAC,IAAI,GAAG,QAAQ;EACpB;EAED,OAAO,GAAG;AACZ","sourcesContent":["import { Event, SentryRequest, Session } from '@sentry/types';\n\nimport { API } from './api';\n\n/** Creates a SentryRequest from an event. */\nexport function sessionToSentryRequest(session: Session, api: API): SentryRequest {\n  const envelopeHeaders = JSON.stringify({\n    sent_at: new Date().toISOString(),\n  });\n  const itemHeaders = JSON.stringify({\n    type: 'session',\n  });\n\n  return {\n    body: `${envelopeHeaders}\\n${itemHeaders}\\n${JSON.stringify(session)}`,\n    type: 'session',\n    url: api.getEnvelopeEndpointWithUrlEncodedAuth(),\n  };\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: API): SentryRequest {\n  // since JS has no Object.prototype.pop()\n  const { __sentry_samplingMethod: samplingMethod, __sentry_sampleRate: sampleRate, ...otherTags } = event.tags || {};\n  event.tags = otherTags;\n\n  const useEnvelope = event.type === 'transaction';\n\n  const req: SentryRequest = {\n    body: JSON.stringify(event),\n    type: event.type || 'event',\n    url: useEnvelope ? api.getEnvelopeEndpointWithUrlEncodedAuth() : api.getStoreEndpointWithUrlEncodedAuth(),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = JSON.stringify({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString(),\n    });\n    const itemHeaders = JSON.stringify({\n      type: event.type,\n\n      // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and\n      // explicitly-set sampling decisions). Are we good with that?\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n\n      // The content-type is assumed to be 'application/json' and not part of\n      // the current spec for transaction items, so we don't bloat the request\n      // body with it.\n      //\n      // content_type: 'application/json',\n      //\n      // The length is optional. It must be the number of bytes in req.Body\n      // encoded as UTF-8. Since the server can figure this out and would\n      // otherwise refuse events that report the length incorrectly, we decided\n      // not to send the length to avoid problems related to reporting the wrong\n      // size and to reduce request body size.\n      //\n      // length: new TextEncoder().encode(req.body).length,\n    });\n    // The trailing newline is optional. We intentionally don't send it to avoid\n    // sending unnecessary bytes.\n    //\n    // const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}\\n`;\n    const envelope = `${envelopeHeaders}\\n${itemHeaders}\\n${req.body}`;\n    req.body = envelope;\n  }\n\n  return req;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}