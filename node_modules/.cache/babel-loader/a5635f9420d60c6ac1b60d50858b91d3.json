{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\nvar LinkedErrors = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype._handler = function (event, hint) {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    var linkedErrors = this._walkErrorTree(hint.originalException, this._key);\n    event.exception.values = __spread(linkedErrors, event.exception.values);\n    return event;\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n    if (stack === void 0) {\n      stack = [];\n    }\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    var stacktrace = computeStackTrace(error[key]);\n    var exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, __spread([exception], stack));\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\nexport { LinkedErrors };","map":{"version":3,"sources":["../../src/integrations/linkederrors.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAuB,EAAE,aAAa,QAAQ,cAAc;AAErE,SAAS,YAAY,QAAQ,eAAe;AAE5C,SAAS,uBAAuB,QAAQ,YAAY;AACpD,SAAS,iBAAiB,QAAQ,aAAa;AAE/C,IAAM,WAAW,GAAG,OAAO;AAC3B,IAAM,aAAa,GAAG,CAAC;AAEvB;AACA,IAAA,YAAA,GAAA,aAAA,YAAA;EAqBE;;AAEG;EACH,SAAA,YAAA,CAAmB,OAA8C,EAAA;IAA9C,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,CAAA,CAA8C;IAAA;IAlBjE;;AAEG;IACa,IAAA,CAAA,IAAI,GAAW,YAAY,CAAC,EAAE;IAgB5C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,IAAI,WAAW;IACtC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,IAAI,aAAa;EAC9C;EAEA;;AAEG;EACI,YAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,uBAAuB,CAAC,UAAC,KAAY,EAAE,IAAgB,EAAA;MACrD,IAAM,IAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,YAAY,CAAC;MACzD,IAAI,IAAI,EAAE;QACR,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;MAClC;MACD,OAAO,KAAK;IACd,CAAC,CAAC;EACJ,CAAC;EAED;;AAEG;EACK,YAAA,CAAA,SAAA,CAAA,QAAQ,GAAhB,UAAiB,KAAY,EAAE,IAAgB,EAAA;IAC7C,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAE;MACxG,OAAO,KAAK;IACb;IACD,IAAM,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,iBAAkC,EAAE,IAAI,CAAC,IAAI,CAAC;IAC5F,KAAK,CAAC,SAAS,CAAC,MAAM,GAAA,QAAA,CAAO,YAAY,EAAK,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC;IACrE,OAAO,KAAK;EACd,CAAC;EAED;;AAEG;EACK,YAAA,CAAA,SAAA,CAAA,cAAc,GAAtB,UAAuB,KAAoB,EAAE,GAAW,EAAE,KAAuB,EAAA;IAAvB,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA;MAAA,KAAA,GAAA,EAAuB;IAAA;IAC/E,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;MACvE,OAAO,KAAK;IACb;IACD,IAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChD,IAAM,SAAS,GAAG,uBAAuB,CAAC,UAAU,CAAC;IACrD,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,EAAA,QAAA,CAAA,CAAG,SAAS,CAAA,EAAK,KAAK,CAAA,CAAE;EACpE,CAAC;EA/DD;;AAEG;EACW,YAAA,CAAA,EAAE,GAAW,cAAc;EA6D3C,OAAA,YAAC;CAAA,EAAA;SAjEY,YAAY","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException as ExtendedError, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}