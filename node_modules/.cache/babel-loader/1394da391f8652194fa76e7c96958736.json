{"ast":null,"code":"import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/** Helper class to provide urls to different Sentry endpoints. */\nvar API = /** @class */function () {\n  /** Create a new instance of API */\n  function API(dsn) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n  }\n  /** Returns the Dsn object. */\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.user);\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n    for (var key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return urlEncode(auth);\n  };\n  return API;\n}();\nexport { API };","map":{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnLike } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}