{"ast":null,"code":"'use strict';\n\nvar Address = require('../address');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Opcode = require('../opcode');\nvar PublicKey = require('../publickey');\nvar Signature = require('../crypto/signature');\nvar Networks = require('../networks');\nvar $ = require('../util/preconditions');\nvar _ = require('lodash');\nvar errors = require('../errors');\nvar buffer = require('buffer');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\n\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n  this.chunks = [];\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (typeof from === 'string') {\n    return Script.fromString(from);\n  } else if (typeof from !== 'undefined') {\n    this.set(from);\n  }\n};\nScript.prototype.set = function (obj) {\n  this.chunks = obj.chunks || this.chunks;\n  return this;\n};\nScript.fromBuffer = function (buffer) {\n  var script = new Script();\n  script.chunks = [];\n  var br = new BufferReader(buffer);\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n      var len, buf;\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n      throw e;\n    }\n  }\n  return script;\n};\nScript.prototype.toBuffer = function () {\n  var bw = new BufferWriter();\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n  return bw.concat();\n};\nScript.fromASM = function (str) {\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n    if (_.isUndefined(opcodenum)) {\n      var buf = new Buffer(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\nScript.fromHex = function (str) {\n  return new Script(new buffer.Buffer(str, 'hex'));\n};\nScript.fromString = function (str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(new buffer.Buffer(str, 'hex'));\n  }\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: new Buffer(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\nScript.prototype._chunkToString = function (chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = type === 'asm';\n  var str = '';\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    } else {\n      var numstr = opcodenum.toString(16);\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n  return str;\n};\nScript.prototype.toASM = function () {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n  return str.substr(1);\n};\nScript.prototype.toString = function () {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n  return str.substr(1);\n};\nScript.prototype.toHex = function () {\n  return this.toBuffer().toString('hex');\n};\nScript.prototype.inspect = function () {\n  return '<Script: ' + this.toString() + '>';\n};\n\n// script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\nScript.prototype.isPublicKeyHashOut = function () {\n  return !!(this.chunks.length === 5 && this.chunks[0].opcodenum === Opcode.OP_DUP && this.chunks[1].opcodenum === Opcode.OP_HASH160 && this.chunks[2].buf && this.chunks[2].buf.length === 20 && this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY && this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\nScript.prototype.isPublicKeyHashIn = function () {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30 && pubkeyBuf && pubkeyBuf.length) {\n      var version = pubkeyBuf[0];\n      if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nScript.prototype.getPublicKey = function () {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\nScript.prototype.getPublicKeyHash = function () {\n  $.checkState(this.isPublicKeyHashOut(), 'Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  return this.chunks[2].buf;\n};\n\n/**\n * @returns {boolean} if this is a public key output script\n */\nScript.prototype.isPublicKeyOut = function () {\n  if (this.chunks.length === 2 && this.chunks[0].buf && this.chunks[0].buf.length && this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n    if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\nScript.prototype.isPublicKeyIn = function () {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh output script\n */\nScript.prototype.isScriptHashOut = function () {\n  var buf = this.toBuffer();\n  return buf.length === 23 && buf[0] === Opcode.OP_HASH160 && buf[1] === 0x14 && buf[buf.length - 1] === Opcode.OP_EQUAL;\n};\n\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\nScript.prototype.isScriptHashIn = function () {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n  if (!redeemBuf) {\n    return false;\n  }\n  var redeemScript;\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n    throw e;\n  }\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\nScript.prototype.isMultisigOut = function () {\n  return this.chunks.length > 3 && Opcode.isSmallIntOp(this.chunks[0].opcodenum) && this.chunks.slice(1, this.chunks.length - 2).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf);\n  }) && Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) && this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG;\n};\n\n/**\n * @returns {boolean} if this is a multisig input script\n */\nScript.prototype.isMultisigIn = function () {\n  return this.chunks.length >= 2 && this.chunks[0].opcodenum === 0 && this.chunks.slice(1, this.chunks.length).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf) && Signature.isTxDER(obj.buf);\n  });\n};\n\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\nScript.prototype.isDataOut = function () {\n  return this.chunks.length >= 1 && this.chunks[0].opcodenum === Opcode.OP_RETURN && (this.chunks.length === 1 || this.chunks.length === 2 && this.chunks[1].buf && this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE && this.chunks[1].length === this.chunks.len);\n};\n\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash or P2SH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\nScript.prototype.getData = function () {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return new Buffer(0);\n    } else {\n      return new Buffer(this.chunks[1].buf);\n    }\n  }\n  if (this.isPublicKeyHashOut()) {\n    return new Buffer(this.chunks[2].buf);\n  }\n  throw new Error('Unrecognized script type to get data from');\n};\n\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\nScript.prototype.isPushOnly = function () {\n  return _.every(this.chunks, function (chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\nScript.OP_RETURN_STANDARD_SIZE = 80;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classify = function () {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyOutput = function () {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyInput = function () {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if script is one of the known types\n */\nScript.prototype.isStandard = function () {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n};\n\n// Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\nScript.prototype.prepend = function (obj) {\n  this._addByType(obj, true);\n  return this;\n};\n\n/**\n * Compares a script with another script\n */\nScript.prototype.equals = function (script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n  var i;\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\nScript.prototype.add = function (obj) {\n  this._addByType(obj, false);\n  return this;\n};\nScript.prototype._addByType = function (obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\nScript.prototype._insertAtPosition = function (op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\nScript.prototype._addOpcode = function (opcode, prepend) {\n  var op;\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n  return this;\n};\nScript.prototype._addBuffer = function (buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n  return this;\n};\nScript.prototype.removeCodeseparators = function () {\n  var chunks = [];\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n  this.chunks = chunks;\n  return this;\n};\n\n// high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\nScript.buildMultisigOut = function (publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length, 'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  return s;\n};\n\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildP2SHMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\nScript.buildPublicKeyHashOut = function (to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_DUP).add(Opcode.OP_HASH160).add(to.hashBuffer).add(Opcode.OP_EQUALVERIFY).add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\nScript.buildPublicKeyOut = function (pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer()).add(Opcode.OP_CHECKSIG);\n  return s;\n};\n\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\nScript.buildDataOut = function (data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n  if (_.isString(data)) {\n    data = new Buffer(data, encoding);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n  return s;\n};\n\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\nScript.buildScriptHashOut = function (script) {\n  $.checkArgument(script instanceof Script || script instanceof Address && script.isPayToScriptHash());\n  var s = new Script();\n  s.add(Opcode.OP_HASH160).add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer())).add(Opcode.OP_EQUAL);\n  s._network = script._network || script.network;\n  return s;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyIn = function (signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script();\n  script.add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)]));\n  return script;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyHashIn = function (publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script().add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)])).add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n\n/**\n * @returns {Script} an empty script\n */\nScript.empty = function () {\n  return new Script();\n};\n\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\nScript.prototype.toScriptHashOut = function () {\n  return Script.buildScriptHashOut(this);\n};\n\n/**\n * @return {Script} an output script built from the address\n */\nScript.fromAddress = function (address) {\n  address = Address(address);\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\nScript.prototype.getAddressInfo = function (opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n    return info;\n  }\n};\n\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getOutputAddressInfo = function () {\n  var info = {};\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getInputAddressInfo = function () {\n  var info = {};\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\nScript.prototype.toAddress = function (network) {\n  var info = this.getAddressInfo();\n  if (!info) {\n    return false;\n  }\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\nScript.prototype.findAndDelete = function (script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n  return this;\n};\n\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\nScript.prototype.checkMinimalPush = function (i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n  if (!buf) {\n    return true;\n  }\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n  return true;\n};\n\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\nScript.prototype._decodeOP_N = function (opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\nScript.prototype.getSignatureOperationsCount = function (accurate) {\n  accurate = _.isUndefined(accurate) ? true : accurate;\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n    lastOpcode = opcode;\n  });\n  return n;\n};\nmodule.exports = Script;","map":{"version":3,"names":["Address","require","BufferReader","BufferWriter","Hash","Opcode","PublicKey","Signature","Networks","$","_","errors","buffer","BufferUtil","JSUtil","Script","from","chunks","isBuffer","fromBuffer","fromAddress","toBuffer","fromString","set","prototype","obj","script","br","finished","opcodenum","readUInt8","len","buf","OP_PUSHDATA1","push","read","OP_PUSHDATA2","readUInt16LE","OP_PUSHDATA4","readUInt32LE","e","RangeError","InvalidBuffer","toString","bw","i","length","chunk","writeUInt8","write","writeUInt16LE","writeUInt32LE","concat","fromASM","str","tokens","split","token","opcode","toNumber","isUndefined","Buffer","parseInt","fromHex","isHexa","slice","Error","JSON","stringify","_chunkToString","type","asm","reverseMap","numstr","toASM","substr","toHex","inspect","isPublicKeyHashOut","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","isPublicKeyHashIn","signatureBuf","pubkeyBuf","version","getPublicKey","checkState","isPublicKeyOut","getPublicKeyHash","isVersion","isValid","isPublicKeyIn","isScriptHashOut","OP_EQUAL","isScriptHashIn","redeemChunk","redeemBuf","redeemScript","classify","types","UNKNOWN","isMultisigOut","isSmallIntOp","every","OP_CHECKMULTISIG","isMultisigIn","isTxDER","isDataOut","OP_RETURN","OP_RETURN_STANDARD_SIZE","getData","isPushOnly","OP_16","PUBKEY_OUT","PUBKEY_IN","PUBKEYHASH_OUT","PUBKEYHASH_IN","SCRIPTHASH_OUT","SCRIPTHASH_IN","MULTISIG_OUT","MULTISIG_IN","DATA_OUT","_isInput","classifyInput","_isOutput","classifyOutput","outputType","outputIdentifiers","bind","inputIdentifiers","isStandard","prepend","_addByType","equals","add","_addOpcode","_addBuffer","_insertAtPosition","op","unshift","Math","pow","removeCodeseparators","OP_CODESEPARATOR","buildMultisigOut","publicKeys","threshold","opts","checkArgument","smallInt","map","sorted","noSorting","sortBy","publicKey","buildMultisigIn","pubkeys","signatures","isArray","isNumber","s","OP_0","each","signature","buildP2SHMultisigIn","cachedMultisig","buildPublicKeyHashOut","to","isString","toAddress","hashBuffer","_network","network","buildPublicKeyOut","pubkey","buildDataOut","data","encoding","buildScriptHashOut","isPayToScriptHash","sha256ripemd160","buildPublicKeyIn","sigtype","integerAsSingleByteBuffer","SIGHASH_ALL","buildPublicKeyHashIn","empty","toScriptHashOut","address","isPayToPublicKeyHash","UnrecognizedAddress","getAddressInfo","_getInputAddressInfo","_getOutputAddressInfo","info","PayToScriptHash","PayToPublicKeyHash","get","defaultNetwork","findAndDelete","hex","script2","buf2","hex2","splice","checkMinimalPush","OP_1","OP_1NEGATE","_decodeOP_N","getSignatureOperationsCount","accurate","self","n","lastOpcode","OP_INVALIDOPCODE","getChunk","OP_CHECKSIGVERIFY","OP_CHECKMULTISIGVERIFY","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/script/script.js"],"sourcesContent":["'use strict';\n\nvar Address = require('../address');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Opcode = require('../opcode');\nvar PublicKey = require('../publickey');\nvar Signature = require('../crypto/signature');\nvar Networks = require('../networks');\nvar $ = require('../util/preconditions');\nvar _ = require('lodash');\nvar errors = require('../errors');\nvar buffer = require('buffer');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\n\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (typeof from === 'string') {\n    return Script.fromString(from);\n  } else if (typeof from !== 'undefined') {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function(obj) {\n  this.chunks = obj.chunks || this.chunks;\n  return this;\n};\n\nScript.fromBuffer = function(buffer) {\n  var script = new Script();\n  script.chunks = [];\n\n  var br = new BufferReader(buffer);\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n\n      var len, buf;\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function() {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function(str) {\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = new Buffer(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.fromHex = function(str) {\n  return new Script(new buffer.Buffer(str, 'hex'));\n};\n\nScript.fromString = function(str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(new buffer.Buffer(str, 'hex'));\n  }\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: new Buffer(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.prototype._chunkToString = function(chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = (type === 'asm');\n  var str = '';\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    } else {\n      var numstr = opcodenum.toString(16);\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n  return str;\n};\n\nScript.prototype.toASM = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function() {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function() {\n  return '<Script: ' + this.toString() + '>';\n};\n\n// script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\nScript.prototype.isPublicKeyHashOut = function() {\n  return !!(this.chunks.length === 5 &&\n    this.chunks[0].opcodenum === Opcode.OP_DUP &&\n    this.chunks[1].opcodenum === Opcode.OP_HASH160 &&\n    this.chunks[2].buf &&\n    this.chunks[2].buf.length === 20 &&\n    this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY &&\n    this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\nScript.prototype.isPublicKeyHashIn = function() {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30 &&\n        pubkeyBuf &&\n        pubkeyBuf.length\n       ) {\n      var version = pubkeyBuf[0];\n      if ((version === 0x04 ||\n           version === 0x06 ||\n           version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nScript.prototype.getPublicKey = function() {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retrieve PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function() {\n  $.checkState(this.isPublicKeyHashOut(), 'Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  return this.chunks[2].buf;\n};\n\n/**\n * @returns {boolean} if this is a public key output script\n */\nScript.prototype.isPublicKeyOut = function() {\n  if (this.chunks.length === 2 &&\n      this.chunks[0].buf &&\n      this.chunks[0].buf.length &&\n      this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n    if ((version === 0x04 ||\n         version === 0x06 ||\n         version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\nScript.prototype.isPublicKeyIn = function() {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh output script\n */\nScript.prototype.isScriptHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 23 &&\n    buf[0] === Opcode.OP_HASH160 &&\n    buf[1] === 0x14 &&\n    buf[buf.length - 1] === Opcode.OP_EQUAL);\n};\n\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\nScript.prototype.isScriptHashIn = function() {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n    throw e;\n  }\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\nScript.prototype.isMultisigOut = function() {\n  return (this.chunks.length > 3 &&\n    Opcode.isSmallIntOp(this.chunks[0].opcodenum) &&\n    this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {\n      return obj.buf && BufferUtil.isBuffer(obj.buf);\n    }) &&\n    Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) &&\n    this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG);\n};\n\n\n/**\n * @returns {boolean} if this is a multisig input script\n */\nScript.prototype.isMultisigIn = function() {\n  return this.chunks.length >= 2 &&\n    this.chunks[0].opcodenum === 0 &&\n    this.chunks.slice(1, this.chunks.length).every(function(obj) {\n      return obj.buf &&\n        BufferUtil.isBuffer(obj.buf) &&\n        Signature.isTxDER(obj.buf);\n    });\n};\n\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\nScript.prototype.isDataOut = function() {\n  return this.chunks.length >= 1 &&\n    this.chunks[0].opcodenum === Opcode.OP_RETURN &&\n    (this.chunks.length === 1 ||\n      (this.chunks.length === 2 &&\n        this.chunks[1].buf &&\n        this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE &&\n        this.chunks[1].length === this.chunks.len));\n};\n\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash or P2SH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\nScript.prototype.getData = function() {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return new Buffer(0);\n    } else {\n      return new Buffer(this.chunks[1].buf);\n    }\n  }\n  if (this.isPublicKeyHashOut()) {\n    return new Buffer(this.chunks[2].buf);\n  }\n  throw new Error('Unrecognized script type to get data from');\n};\n\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\nScript.prototype.isPushOnly = function() {\n  return _.every(this.chunks, function(chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\n\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\n\nScript.OP_RETURN_STANDARD_SIZE = 80;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classify = function() {\n  if (this._isInput) {\n    return this.classifyInput();\n  } else if (this._isOutput) {\n    return this.classifyOutput();\n  } else {\n    var outputType = this.classifyOutput();\n    return outputType != Script.types.UNKNOWN ? outputType : this.classifyInput();\n  }\n};\n\nScript.outputIdentifiers = {};\nScript.outputIdentifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.outputIdentifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.outputIdentifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.outputIdentifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.outputIdentifiers.DATA_OUT = Script.prototype.isDataOut;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyOutput = function() {\n  for (var type in Script.outputIdentifiers) {\n    if (Script.outputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\nScript.inputIdentifiers = {};\nScript.inputIdentifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.inputIdentifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.inputIdentifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.inputIdentifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classifyInput = function() {\n  for (var type in Script.inputIdentifiers) {\n    if (Script.inputIdentifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\n\n/**\n * @returns {boolean} if script is one of the known types\n */\nScript.prototype.isStandard = function() {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n};\n\n\n// Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\nScript.prototype.prepend = function(obj) {\n  this._addByType(obj, true);\n  return this;\n};\n\n/**\n * Compares a script with another script\n */\nScript.prototype.equals = function(script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n  var i;\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\nScript.prototype.add = function(obj) {\n  this._addByType(obj, false);\n  return this;\n};\n\nScript.prototype._addByType = function(obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function(op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function(opcode, prepend) {\n  var op;\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n  return this;\n};\n\nScript.prototype._addBuffer = function(buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n  return this;\n};\n\nScript.prototype.removeCodeseparators = function() {\n  var chunks = [];\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n  this.chunks = chunks;\n  return this;\n};\n\n// high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\nScript.buildMultisigOut = function(publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length,\n    'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function(publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  return s;\n};\n\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\nScript.buildPublicKeyHashOut = function(to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_DUP)\n    .add(Opcode.OP_HASH160)\n    .add(to.hashBuffer)\n    .add(Opcode.OP_EQUALVERIFY)\n    .add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\nScript.buildPublicKeyOut = function(pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer())\n    .add(Opcode.OP_CHECKSIG);\n  return s;\n};\n\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\nScript.buildDataOut = function(data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n  if (_.isString(data)) {\n    data = new Buffer(data, encoding);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n  return s;\n};\n\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\nScript.buildScriptHashOut = function(script) {\n  $.checkArgument(script instanceof Script ||\n    (script instanceof Address && script.isPayToScriptHash()));\n  var s = new Script();\n  s.add(Opcode.OP_HASH160)\n    .add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer()))\n    .add(Opcode.OP_EQUAL);\n\n  s._network = script._network || script.network;\n  return s;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyIn = function(signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script();\n  script.add(BufferUtil.concat([\n    signature,\n    BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n  ]));\n  return script;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script()\n    .add(BufferUtil.concat([\n      signature,\n      BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n    ]))\n    .add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n\n/**\n * @returns {Script} an empty script\n */\nScript.empty = function() {\n  return new Script();\n};\n\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\nScript.prototype.toScriptHashOut = function() {\n  return Script.buildScriptHashOut(this);\n};\n\n/**\n * @return {Script} an output script built from the address\n */\nScript.fromAddress = function(address) {\n  address = Address(address);\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\nScript.prototype.getAddressInfo = function(opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n    return info;\n  }\n};\n\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getOutputAddressInfo = function() {\n  var info = {};\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getInputAddressInfo = function() {\n  var info = {};\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\nScript.prototype.toAddress = function(network) {\n  var info = this.getAddressInfo();\n  if (!info) {\n    return false;\n  }\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\nScript.prototype.findAndDelete = function(script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n  return this;\n};\n\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\nScript.prototype.checkMinimalPush = function(i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n  if (!buf) {\n    return true;\n  }\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n  return true;\n};\n\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\nScript.prototype._decodeOP_N = function(opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\nScript.prototype.getSignatureOperationsCount = function(accurate) {\n  accurate = (_.isUndefined(accurate) ? true : accurate);\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n    lastOpcode = opcode;\n  });\n  return n;\n};\n\nmodule.exports = Script;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,IAAIC,YAAY,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AACtD,IAAIE,YAAY,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACtD,IAAIG,IAAI,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AACpC,IAAII,MAAM,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIK,SAAS,GAAGL,OAAO,CAAC,cAAc,CAAC;AACvC,IAAIM,SAAS,GAAGN,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIO,QAAQ,GAAGP,OAAO,CAAC,aAAa,CAAC;AACrC,IAAIQ,CAAC,GAAGR,OAAO,CAAC,uBAAuB,CAAC;AACxC,IAAIS,CAAC,GAAGT,OAAO,CAAC,QAAQ,CAAC;AACzB,IAAIU,MAAM,GAAGV,OAAO,CAAC,WAAW,CAAC;AACjC,IAAIW,MAAM,GAAGX,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIY,UAAU,GAAGZ,OAAO,CAAC,gBAAgB,CAAC;AAC1C,IAAIa,MAAM,GAAGb,OAAO,CAAC,YAAY,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIc,MAAM,GAAG,SAASA,MAAM,CAACC,IAAI,EAAE;EACjC,IAAI,EAAE,IAAI,YAAYD,MAAM,CAAC,EAAE;IAC7B,OAAO,IAAIA,MAAM,CAACC,IAAI,CAAC;EACzB;EACA,IAAI,CAACC,MAAM,GAAG,EAAE;EAEhB,IAAIJ,UAAU,CAACK,QAAQ,CAACF,IAAI,CAAC,EAAE;IAC7B,OAAOD,MAAM,CAACI,UAAU,CAACH,IAAI,CAAC;EAChC,CAAC,MAAM,IAAIA,IAAI,YAAYhB,OAAO,EAAE;IAClC,OAAOe,MAAM,CAACK,WAAW,CAACJ,IAAI,CAAC;EACjC,CAAC,MAAM,IAAIA,IAAI,YAAYD,MAAM,EAAE;IACjC,OAAOA,MAAM,CAACI,UAAU,CAACH,IAAI,CAACK,QAAQ,EAAE,CAAC;EAC3C,CAAC,MAAM,IAAI,OAAOL,IAAI,KAAK,QAAQ,EAAE;IACnC,OAAOD,MAAM,CAACO,UAAU,CAACN,IAAI,CAAC;EAChC,CAAC,MAAM,IAAI,OAAOA,IAAI,KAAK,WAAW,EAAE;IACtC,IAAI,CAACO,GAAG,CAACP,IAAI,CAAC;EAChB;AACF,CAAC;AAEDD,MAAM,CAACS,SAAS,CAACD,GAAG,GAAG,UAASE,GAAG,EAAE;EACnC,IAAI,CAACR,MAAM,GAAGQ,GAAG,CAACR,MAAM,IAAI,IAAI,CAACA,MAAM;EACvC,OAAO,IAAI;AACb,CAAC;AAEDF,MAAM,CAACI,UAAU,GAAG,UAASP,MAAM,EAAE;EACnC,IAAIc,MAAM,GAAG,IAAIX,MAAM,EAAE;EACzBW,MAAM,CAACT,MAAM,GAAG,EAAE;EAElB,IAAIU,EAAE,GAAG,IAAIzB,YAAY,CAACU,MAAM,CAAC;EACjC,OAAO,CAACe,EAAE,CAACC,QAAQ,EAAE,EAAE;IACrB,IAAI;MACF,IAAIC,SAAS,GAAGF,EAAE,CAACG,SAAS,EAAE;MAE9B,IAAIC,GAAG,EAAEC,GAAG;MACZ,IAAIH,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAGxB,MAAM,CAAC4B,YAAY,EAAE;QACpDF,GAAG,GAAGF,SAAS;QACfH,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;UACjBF,GAAG,EAAEL,EAAE,CAACQ,IAAI,CAACJ,GAAG,CAAC;UACjBA,GAAG,EAAEA,GAAG;UACRF,SAAS,EAAEA;QACb,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIA,SAAS,KAAKxB,MAAM,CAAC4B,YAAY,EAAE;QAC5CF,GAAG,GAAGJ,EAAE,CAACG,SAAS,EAAE;QACpBE,GAAG,GAAGL,EAAE,CAACQ,IAAI,CAACJ,GAAG,CAAC;QAClBL,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;UACjBF,GAAG,EAAEA,GAAG;UACRD,GAAG,EAAEA,GAAG;UACRF,SAAS,EAAEA;QACb,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIA,SAAS,KAAKxB,MAAM,CAAC+B,YAAY,EAAE;QAC5CL,GAAG,GAAGJ,EAAE,CAACU,YAAY,EAAE;QACvBL,GAAG,GAAGL,EAAE,CAACQ,IAAI,CAACJ,GAAG,CAAC;QAClBL,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;UACjBF,GAAG,EAAEA,GAAG;UACRD,GAAG,EAAEA,GAAG;UACRF,SAAS,EAAEA;QACb,CAAC,CAAC;MACJ,CAAC,MAAM,IAAIA,SAAS,KAAKxB,MAAM,CAACiC,YAAY,EAAE;QAC5CP,GAAG,GAAGJ,EAAE,CAACY,YAAY,EAAE;QACvBP,GAAG,GAAGL,EAAE,CAACQ,IAAI,CAACJ,GAAG,CAAC;QAClBL,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;UACjBF,GAAG,EAAEA,GAAG;UACRD,GAAG,EAAEA,GAAG;UACRF,SAAS,EAAEA;QACb,CAAC,CAAC;MACJ,CAAC,MAAM;QACLH,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;UACjBL,SAAS,EAAEA;QACb,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOW,CAAC,EAAE;MACV,IAAIA,CAAC,YAAYC,UAAU,EAAE;QAC3B,MAAM,IAAI9B,MAAM,CAACI,MAAM,CAAC2B,aAAa,CAAC9B,MAAM,CAAC+B,QAAQ,CAAC,KAAK,CAAC,CAAC;MAC/D;MACA,MAAMH,CAAC;IACT;EACF;EAEA,OAAOd,MAAM;AACf,CAAC;AAEDX,MAAM,CAACS,SAAS,CAACH,QAAQ,GAAG,YAAW;EACrC,IAAIuB,EAAE,GAAG,IAAIzC,YAAY,EAAE;EAE3B,KAAK,IAAI0C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIE,KAAK,GAAG,IAAI,CAAC9B,MAAM,CAAC4B,CAAC,CAAC;IAC1B,IAAIhB,SAAS,GAAGkB,KAAK,CAAClB,SAAS;IAC/Be,EAAE,CAACI,UAAU,CAACD,KAAK,CAAClB,SAAS,CAAC;IAC9B,IAAIkB,KAAK,CAACf,GAAG,EAAE;MACb,IAAIH,SAAS,GAAGxB,MAAM,CAAC4B,YAAY,EAAE;QACnCW,EAAE,CAACK,KAAK,CAACF,KAAK,CAACf,GAAG,CAAC;MACrB,CAAC,MAAM,IAAIH,SAAS,KAAKxB,MAAM,CAAC4B,YAAY,EAAE;QAC5CW,EAAE,CAACI,UAAU,CAACD,KAAK,CAAChB,GAAG,CAAC;QACxBa,EAAE,CAACK,KAAK,CAACF,KAAK,CAACf,GAAG,CAAC;MACrB,CAAC,MAAM,IAAIH,SAAS,KAAKxB,MAAM,CAAC+B,YAAY,EAAE;QAC5CQ,EAAE,CAACM,aAAa,CAACH,KAAK,CAAChB,GAAG,CAAC;QAC3Ba,EAAE,CAACK,KAAK,CAACF,KAAK,CAACf,GAAG,CAAC;MACrB,CAAC,MAAM,IAAIH,SAAS,KAAKxB,MAAM,CAACiC,YAAY,EAAE;QAC5CM,EAAE,CAACO,aAAa,CAACJ,KAAK,CAAChB,GAAG,CAAC;QAC3Ba,EAAE,CAACK,KAAK,CAACF,KAAK,CAACf,GAAG,CAAC;MACrB;IACF;EACF;EAEA,OAAOY,EAAE,CAACQ,MAAM,EAAE;AACpB,CAAC;AAEDrC,MAAM,CAACsC,OAAO,GAAG,UAASC,GAAG,EAAE;EAC7B,IAAI5B,MAAM,GAAG,IAAIX,MAAM,EAAE;EACzBW,MAAM,CAACT,MAAM,GAAG,EAAE;EAElB,IAAIsC,MAAM,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EAC3B,IAAIX,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGU,MAAM,CAACT,MAAM,EAAE;IACxB,IAAIW,KAAK,GAAGF,MAAM,CAACV,CAAC,CAAC;IACrB,IAAIa,MAAM,GAAGrD,MAAM,CAACoD,KAAK,CAAC;IAC1B,IAAI5B,SAAS,GAAG6B,MAAM,CAACC,QAAQ,EAAE;IAEjC,IAAIjD,CAAC,CAACkD,WAAW,CAAC/B,SAAS,CAAC,EAAE;MAC5B,IAAIG,GAAG,GAAG,IAAI6B,MAAM,CAACN,MAAM,CAACV,CAAC,CAAC,EAAE,KAAK,CAAC;MACtCnB,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;QACjBF,GAAG,EAAEA,GAAG;QACRD,GAAG,EAAEC,GAAG,CAACc,MAAM;QACfjB,SAAS,EAAEG,GAAG,CAACc;MACjB,CAAC,CAAC;MACFD,CAAC,GAAGA,CAAC,GAAG,CAAC;IACX,CAAC,MAAM,IAAIhB,SAAS,KAAKxB,MAAM,CAAC4B,YAAY,IAC1CJ,SAAS,KAAKxB,MAAM,CAAC+B,YAAY,IACjCP,SAAS,KAAKxB,MAAM,CAACiC,YAAY,EAAE;MACnCZ,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;QACjBF,GAAG,EAAE,IAAI6B,MAAM,CAACN,MAAM,CAACV,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;QACrCd,GAAG,EAAE+B,QAAQ,CAACP,MAAM,CAACV,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5BhB,SAAS,EAAEA;MACb,CAAC,CAAC;MACFgB,CAAC,GAAGA,CAAC,GAAG,CAAC;IACX,CAAC,MAAM;MACLnB,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;QACjBL,SAAS,EAAEA;MACb,CAAC,CAAC;MACFgB,CAAC,GAAGA,CAAC,GAAG,CAAC;IACX;EACF;EACA,OAAOnB,MAAM;AACf,CAAC;AAEDX,MAAM,CAACgD,OAAO,GAAG,UAAST,GAAG,EAAE;EAC7B,OAAO,IAAIvC,MAAM,CAAC,IAAIH,MAAM,CAACiD,MAAM,CAACP,GAAG,EAAE,KAAK,CAAC,CAAC;AAClD,CAAC;AAEDvC,MAAM,CAACO,UAAU,GAAG,UAASgC,GAAG,EAAE;EAChC,IAAIxC,MAAM,CAACkD,MAAM,CAACV,GAAG,CAAC,IAAIA,GAAG,CAACR,MAAM,KAAK,CAAC,EAAE;IAC1C,OAAO,IAAI/B,MAAM,CAAC,IAAIH,MAAM,CAACiD,MAAM,CAACP,GAAG,EAAE,KAAK,CAAC,CAAC;EAClD;EACA,IAAI5B,MAAM,GAAG,IAAIX,MAAM,EAAE;EACzBW,MAAM,CAACT,MAAM,GAAG,EAAE;EAElB,IAAIsC,MAAM,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;EAC3B,IAAIX,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGU,MAAM,CAACT,MAAM,EAAE;IACxB,IAAIW,KAAK,GAAGF,MAAM,CAACV,CAAC,CAAC;IACrB,IAAIa,MAAM,GAAGrD,MAAM,CAACoD,KAAK,CAAC;IAC1B,IAAI5B,SAAS,GAAG6B,MAAM,CAACC,QAAQ,EAAE;IAEjC,IAAIjD,CAAC,CAACkD,WAAW,CAAC/B,SAAS,CAAC,EAAE;MAC5BA,SAAS,GAAGiC,QAAQ,CAACL,KAAK,CAAC;MAC3B,IAAI5B,SAAS,GAAG,CAAC,IAAIA,SAAS,GAAGxB,MAAM,CAAC4B,YAAY,EAAE;QACpDP,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;UACjBF,GAAG,EAAE,IAAI6B,MAAM,CAACN,MAAM,CAACV,CAAC,GAAG,CAAC,CAAC,CAACoB,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;UAC9ClC,GAAG,EAAEF,SAAS;UACdA,SAAS,EAAEA;QACb,CAAC,CAAC;QACFgB,CAAC,GAAGA,CAAC,GAAG,CAAC;MACX,CAAC,MAAM;QACL,MAAM,IAAIqB,KAAK,CAAC,kBAAkB,GAAGC,IAAI,CAACC,SAAS,CAACd,GAAG,CAAC,CAAC;MAC3D;IACF,CAAC,MAAM,IAAIzB,SAAS,KAAKxB,MAAM,CAAC4B,YAAY,IAC1CJ,SAAS,KAAKxB,MAAM,CAAC+B,YAAY,IACjCP,SAAS,KAAKxB,MAAM,CAACiC,YAAY,EAAE;MACnC,IAAIiB,MAAM,CAACV,CAAC,GAAG,CAAC,CAAC,CAACoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;QACtC,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACrD;MACAxC,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;QACjBF,GAAG,EAAE,IAAI6B,MAAM,CAACN,MAAM,CAACV,CAAC,GAAG,CAAC,CAAC,CAACoB,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;QAC9ClC,GAAG,EAAE+B,QAAQ,CAACP,MAAM,CAACV,CAAC,GAAG,CAAC,CAAC,CAAC;QAC5BhB,SAAS,EAAEA;MACb,CAAC,CAAC;MACFgB,CAAC,GAAGA,CAAC,GAAG,CAAC;IACX,CAAC,MAAM;MACLnB,MAAM,CAACT,MAAM,CAACiB,IAAI,CAAC;QACjBL,SAAS,EAAEA;MACb,CAAC,CAAC;MACFgB,CAAC,GAAGA,CAAC,GAAG,CAAC;IACX;EACF;EACA,OAAOnB,MAAM;AACf,CAAC;AAEDX,MAAM,CAACS,SAAS,CAAC6C,cAAc,GAAG,UAAStB,KAAK,EAAEuB,IAAI,EAAE;EACtD,IAAIzC,SAAS,GAAGkB,KAAK,CAAClB,SAAS;EAC/B,IAAI0C,GAAG,GAAID,IAAI,KAAK,KAAM;EAC1B,IAAIhB,GAAG,GAAG,EAAE;EACZ,IAAI,CAACP,KAAK,CAACf,GAAG,EAAE;IACd;IACA,IAAI,OAAO3B,MAAM,CAACmE,UAAU,CAAC3C,SAAS,CAAC,KAAK,WAAW,EAAE;MACvDyB,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGjD,MAAM,CAACwB,SAAS,CAAC,CAACc,QAAQ,EAAE;IAChD,CAAC,MAAM;MACL,IAAI8B,MAAM,GAAG5C,SAAS,CAACc,QAAQ,CAAC,EAAE,CAAC;MACnC,IAAI8B,MAAM,CAAC3B,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;QAC3B2B,MAAM,GAAG,GAAG,GAAGA,MAAM;MACvB;MACA,IAAIF,GAAG,EAAE;QACPjB,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGmB,MAAM;MAC1B,CAAC,MAAM;QACLnB,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAG,IAAI,GAAGmB,MAAM;MACjC;IACF;EACF,CAAC,MAAM;IACL;IACA,IAAI5C,SAAS,KAAKxB,MAAM,CAAC4B,YAAY,IACnCJ,SAAS,KAAKxB,MAAM,CAAC+B,YAAY,IACjCP,SAAS,KAAKxB,MAAM,CAACiC,YAAY,EAAE;MACnCgB,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGjD,MAAM,CAACwB,SAAS,CAAC,CAACc,QAAQ,EAAE;IAChD;IACA,IAAII,KAAK,CAAChB,GAAG,GAAG,CAAC,EAAE;MACjB,IAAIwC,GAAG,EAAE;QACPjB,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGP,KAAK,CAACf,GAAG,CAACW,QAAQ,CAAC,KAAK,CAAC;MAC7C,CAAC,MAAM;QACLW,GAAG,GAAGA,GAAG,GAAG,GAAG,GAAGP,KAAK,CAAChB,GAAG,GAAG,GAAG,GAAG,IAAI,GAAGgB,KAAK,CAACf,GAAG,CAACW,QAAQ,CAAC,KAAK,CAAC;MACtE;IACF;EACF;EACA,OAAOW,GAAG;AACZ,CAAC;AAEDvC,MAAM,CAACS,SAAS,CAACkD,KAAK,GAAG,YAAW;EAClC,IAAIpB,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIE,KAAK,GAAG,IAAI,CAAC9B,MAAM,CAAC4B,CAAC,CAAC;IAC1BS,GAAG,IAAI,IAAI,CAACe,cAAc,CAACtB,KAAK,EAAE,KAAK,CAAC;EAC1C;EAEA,OAAOO,GAAG,CAACqB,MAAM,CAAC,CAAC,CAAC;AACtB,CAAC;AAED5D,MAAM,CAACS,SAAS,CAACmB,QAAQ,GAAG,YAAW;EACrC,IAAIW,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIT,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIE,KAAK,GAAG,IAAI,CAAC9B,MAAM,CAAC4B,CAAC,CAAC;IAC1BS,GAAG,IAAI,IAAI,CAACe,cAAc,CAACtB,KAAK,CAAC;EACnC;EAEA,OAAOO,GAAG,CAACqB,MAAM,CAAC,CAAC,CAAC;AACtB,CAAC;AAED5D,MAAM,CAACS,SAAS,CAACoD,KAAK,GAAG,YAAW;EAClC,OAAO,IAAI,CAACvD,QAAQ,EAAE,CAACsB,QAAQ,CAAC,KAAK,CAAC;AACxC,CAAC;AAED5B,MAAM,CAACS,SAAS,CAACqD,OAAO,GAAG,YAAW;EACpC,OAAO,WAAW,GAAG,IAAI,CAAClC,QAAQ,EAAE,GAAG,GAAG;AAC5C,CAAC;;AAED;;AAEA;AACA;AACA;AACA5B,MAAM,CAACS,SAAS,CAACsD,kBAAkB,GAAG,YAAW;EAC/C,OAAO,CAAC,EAAE,IAAI,CAAC7D,MAAM,CAAC6B,MAAM,KAAK,CAAC,IAChC,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAKxB,MAAM,CAAC0E,MAAM,IAC1C,IAAI,CAAC9D,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAKxB,MAAM,CAAC2E,UAAU,IAC9C,IAAI,CAAC/D,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,IAClB,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,CAACc,MAAM,KAAK,EAAE,IAChC,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAKxB,MAAM,CAAC4E,cAAc,IAClD,IAAI,CAAChE,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAKxB,MAAM,CAAC6E,WAAW,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACAnE,MAAM,CAACS,SAAS,CAAC2D,iBAAiB,GAAG,YAAW;EAC9C,IAAI,IAAI,CAAClE,MAAM,CAAC6B,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAIsC,YAAY,GAAG,IAAI,CAACnE,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG;IACrC,IAAIqD,SAAS,GAAG,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG;IAClC,IAAIoD,YAAY,IACZA,YAAY,CAACtC,MAAM,IACnBsC,YAAY,CAAC,CAAC,CAAC,KAAK,IAAI,IACxBC,SAAS,IACTA,SAAS,CAACvC,MAAM,EACf;MACH,IAAIwC,OAAO,GAAGD,SAAS,CAAC,CAAC,CAAC;MAC1B,IAAI,CAACC,OAAO,KAAK,IAAI,IAChBA,OAAO,KAAK,IAAI,IAChBA,OAAO,KAAK,IAAI,KAAKD,SAAS,CAACvC,MAAM,KAAK,EAAE,EAAE;QACjD,OAAO,IAAI;MACb,CAAC,MAAM,IAAI,CAACwC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,IAAI,KAAKD,SAAS,CAACvC,MAAM,KAAK,EAAE,EAAE;QAC5E,OAAO,IAAI;MACb;IACF;EACF;EACA,OAAO,KAAK;AACd,CAAC;AAED/B,MAAM,CAACS,SAAS,CAAC+D,YAAY,GAAG,YAAW;EACzC9E,CAAC,CAAC+E,UAAU,CAAC,IAAI,CAACC,cAAc,EAAE,EAAE,gDAAgD,CAAC;EACrF,OAAO,IAAI,CAACxE,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG;AAC3B,CAAC;AAEDjB,MAAM,CAACS,SAAS,CAACkE,gBAAgB,GAAG,YAAW;EAC7CjF,CAAC,CAAC+E,UAAU,CAAC,IAAI,CAACV,kBAAkB,EAAE,EAAE,qDAAqD,CAAC;EAC9F,OAAO,IAAI,CAAC7D,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG;AAC3B,CAAC;;AAED;AACA;AACA;AACAjB,MAAM,CAACS,SAAS,CAACiE,cAAc,GAAG,YAAW;EAC3C,IAAI,IAAI,CAACxE,MAAM,CAAC6B,MAAM,KAAK,CAAC,IACxB,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,IAClB,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,CAACc,MAAM,IACzB,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAKxB,MAAM,CAAC6E,WAAW,EAAE;IACnD,IAAIG,SAAS,GAAG,IAAI,CAACpE,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG;IAClC,IAAIsD,OAAO,GAAGD,SAAS,CAAC,CAAC,CAAC;IAC1B,IAAIM,SAAS,GAAG,KAAK;IACrB,IAAI,CAACL,OAAO,KAAK,IAAI,IAChBA,OAAO,KAAK,IAAI,IAChBA,OAAO,KAAK,IAAI,KAAKD,SAAS,CAACvC,MAAM,KAAK,EAAE,EAAE;MACjD6C,SAAS,GAAG,IAAI;IAClB,CAAC,MAAM,IAAI,CAACL,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,IAAI,KAAKD,SAAS,CAACvC,MAAM,KAAK,EAAE,EAAE;MAC5E6C,SAAS,GAAG,IAAI;IAClB;IACA,IAAIA,SAAS,EAAE;MACb,OAAOrF,SAAS,CAACsF,OAAO,CAACP,SAAS,CAAC;IACrC;EACF;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACAtE,MAAM,CAACS,SAAS,CAACqE,aAAa,GAAG,YAAW;EAC1C,IAAI,IAAI,CAAC5E,MAAM,CAAC6B,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAIsC,YAAY,GAAG,IAAI,CAACnE,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG;IACrC,IAAIoD,YAAY,IACZA,YAAY,CAACtC,MAAM,IACnBsC,YAAY,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;MAC5B,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACArE,MAAM,CAACS,SAAS,CAACsE,eAAe,GAAG,YAAW;EAC5C,IAAI9D,GAAG,GAAG,IAAI,CAACX,QAAQ,EAAE;EACzB,OAAQW,GAAG,CAACc,MAAM,KAAK,EAAE,IACvBd,GAAG,CAAC,CAAC,CAAC,KAAK3B,MAAM,CAAC2E,UAAU,IAC5BhD,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,IACfA,GAAG,CAACA,GAAG,CAACc,MAAM,GAAG,CAAC,CAAC,KAAKzC,MAAM,CAAC0F,QAAQ;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACAhF,MAAM,CAACS,SAAS,CAACwE,cAAc,GAAG,YAAW;EAC3C,IAAI,IAAI,CAAC/E,MAAM,CAAC6B,MAAM,IAAI,CAAC,EAAE;IAC3B,OAAO,KAAK;EACd;EACA,IAAImD,WAAW,GAAG,IAAI,CAAChF,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC6B,MAAM,GAAG,CAAC,CAAC;EACrD,IAAIoD,SAAS,GAAGD,WAAW,CAACjE,GAAG;EAC/B,IAAI,CAACkE,SAAS,EAAE;IACd,OAAO,KAAK;EACd;EAEA,IAAIC,YAAY;EAChB,IAAI;IACFA,YAAY,GAAGpF,MAAM,CAACI,UAAU,CAAC+E,SAAS,CAAC;EAC7C,CAAC,CAAC,OAAO1D,CAAC,EAAE;IACV,IAAIA,CAAC,YAAY7B,MAAM,CAACI,MAAM,CAAC2B,aAAa,EAAE;MAC5C,OAAO,KAAK;IACd;IACA,MAAMF,CAAC;EACT;EACA,IAAI8B,IAAI,GAAG6B,YAAY,CAACC,QAAQ,EAAE;EAClC,OAAO9B,IAAI,KAAKvD,MAAM,CAACsF,KAAK,CAACC,OAAO;AACtC,CAAC;;AAED;AACA;AACA;AACAvF,MAAM,CAACS,SAAS,CAAC+E,aAAa,GAAG,YAAW;EAC1C,OAAQ,IAAI,CAACtF,MAAM,CAAC6B,MAAM,GAAG,CAAC,IAC5BzC,MAAM,CAACmG,YAAY,CAAC,IAAI,CAACvF,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,CAAC,IAC7C,IAAI,CAACZ,MAAM,CAACgD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAChD,MAAM,CAAC6B,MAAM,GAAG,CAAC,CAAC,CAAC2D,KAAK,CAAC,UAAShF,GAAG,EAAE;IAC/D,OAAOA,GAAG,CAACO,GAAG,IAAInB,UAAU,CAACK,QAAQ,CAACO,GAAG,CAACO,GAAG,CAAC;EAChD,CAAC,CAAC,IACF3B,MAAM,CAACmG,YAAY,CAAC,IAAI,CAACvF,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC6B,MAAM,GAAG,CAAC,CAAC,CAACjB,SAAS,CAAC,IAClE,IAAI,CAACZ,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC6B,MAAM,GAAG,CAAC,CAAC,CAACjB,SAAS,KAAKxB,MAAM,CAACqG,gBAAgB;AAC7E,CAAC;;AAGD;AACA;AACA;AACA3F,MAAM,CAACS,SAAS,CAACmF,YAAY,GAAG,YAAW;EACzC,OAAO,IAAI,CAAC1F,MAAM,CAAC6B,MAAM,IAAI,CAAC,IAC5B,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAK,CAAC,IAC9B,IAAI,CAACZ,MAAM,CAACgD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAChD,MAAM,CAAC6B,MAAM,CAAC,CAAC2D,KAAK,CAAC,UAAShF,GAAG,EAAE;IAC3D,OAAOA,GAAG,CAACO,GAAG,IACZnB,UAAU,CAACK,QAAQ,CAACO,GAAG,CAACO,GAAG,CAAC,IAC5BzB,SAAS,CAACqG,OAAO,CAACnF,GAAG,CAACO,GAAG,CAAC;EAC9B,CAAC,CAAC;AACN,CAAC;;AAED;AACA;AACA;AACAjB,MAAM,CAACS,SAAS,CAACqF,SAAS,GAAG,YAAW;EACtC,OAAO,IAAI,CAAC5F,MAAM,CAAC6B,MAAM,IAAI,CAAC,IAC5B,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACY,SAAS,KAAKxB,MAAM,CAACyG,SAAS,KAC5C,IAAI,CAAC7F,MAAM,CAAC6B,MAAM,KAAK,CAAC,IACtB,IAAI,CAAC7B,MAAM,CAAC6B,MAAM,KAAK,CAAC,IACvB,IAAI,CAAC7B,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,IAClB,IAAI,CAACf,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,CAACc,MAAM,IAAI/B,MAAM,CAACgG,uBAAuB,IAC3D,IAAI,CAAC9F,MAAM,CAAC,CAAC,CAAC,CAAC6B,MAAM,KAAK,IAAI,CAAC7B,MAAM,CAACc,GAAI,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAhB,MAAM,CAACS,SAAS,CAACwF,OAAO,GAAG,YAAW;EACpC,IAAI,IAAI,CAACH,SAAS,EAAE,IAAI,IAAI,CAACf,eAAe,EAAE,EAAE;IAC9C,IAAIpF,CAAC,CAACkD,WAAW,CAAC,IAAI,CAAC3C,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;MACjC,OAAO,IAAI4C,MAAM,CAAC,CAAC,CAAC;IACtB,CAAC,MAAM;MACL,OAAO,IAAIA,MAAM,CAAC,IAAI,CAAC5C,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,CAAC;IACvC;EACF;EACA,IAAI,IAAI,CAAC8C,kBAAkB,EAAE,EAAE;IAC7B,OAAO,IAAIjB,MAAM,CAAC,IAAI,CAAC5C,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,CAAC;EACvC;EACA,MAAM,IAAIkC,KAAK,CAAC,2CAA2C,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACAnD,MAAM,CAACS,SAAS,CAACyF,UAAU,GAAG,YAAW;EACvC,OAAOvG,CAAC,CAAC+F,KAAK,CAAC,IAAI,CAACxF,MAAM,EAAE,UAAS8B,KAAK,EAAE;IAC1C,OAAOA,KAAK,CAAClB,SAAS,IAAIxB,MAAM,CAAC6G,KAAK;EACxC,CAAC,CAAC;AACJ,CAAC;AAGDnG,MAAM,CAACsF,KAAK,GAAG,CAAC,CAAC;AACjBtF,MAAM,CAACsF,KAAK,CAACC,OAAO,GAAG,SAAS;AAChCvF,MAAM,CAACsF,KAAK,CAACc,UAAU,GAAG,mBAAmB;AAC7CpG,MAAM,CAACsF,KAAK,CAACe,SAAS,GAAG,uBAAuB;AAChDrG,MAAM,CAACsF,KAAK,CAACgB,cAAc,GAAG,wBAAwB;AACtDtG,MAAM,CAACsF,KAAK,CAACiB,aAAa,GAAG,4BAA4B;AACzDvG,MAAM,CAACsF,KAAK,CAACkB,cAAc,GAAG,oBAAoB;AAClDxG,MAAM,CAACsF,KAAK,CAACmB,aAAa,GAAG,wBAAwB;AACrDzG,MAAM,CAACsF,KAAK,CAACoB,YAAY,GAAG,iBAAiB;AAC7C1G,MAAM,CAACsF,KAAK,CAACqB,WAAW,GAAG,qBAAqB;AAChD3G,MAAM,CAACsF,KAAK,CAACsB,QAAQ,GAAG,WAAW;AAEnC5G,MAAM,CAACgG,uBAAuB,GAAG,EAAE;;AAEnC;AACA;AACA;AACA;AACAhG,MAAM,CAACS,SAAS,CAAC4E,QAAQ,GAAG,YAAW;EACrC,IAAI,IAAI,CAACwB,QAAQ,EAAE;IACjB,OAAO,IAAI,CAACC,aAAa,EAAE;EAC7B,CAAC,MAAM,IAAI,IAAI,CAACC,SAAS,EAAE;IACzB,OAAO,IAAI,CAACC,cAAc,EAAE;EAC9B,CAAC,MAAM;IACL,IAAIC,UAAU,GAAG,IAAI,CAACD,cAAc,EAAE;IACtC,OAAOC,UAAU,IAAIjH,MAAM,CAACsF,KAAK,CAACC,OAAO,GAAG0B,UAAU,GAAG,IAAI,CAACH,aAAa,EAAE;EAC/E;AACF,CAAC;AAED9G,MAAM,CAACkH,iBAAiB,GAAG,CAAC,CAAC;AAC7BlH,MAAM,CAACkH,iBAAiB,CAACd,UAAU,GAAGpG,MAAM,CAACS,SAAS,CAACiE,cAAc;AACrE1E,MAAM,CAACkH,iBAAiB,CAACZ,cAAc,GAAGtG,MAAM,CAACS,SAAS,CAACsD,kBAAkB;AAC7E/D,MAAM,CAACkH,iBAAiB,CAACR,YAAY,GAAG1G,MAAM,CAACS,SAAS,CAAC+E,aAAa;AACtExF,MAAM,CAACkH,iBAAiB,CAACV,cAAc,GAAGxG,MAAM,CAACS,SAAS,CAACsE,eAAe;AAC1E/E,MAAM,CAACkH,iBAAiB,CAACN,QAAQ,GAAG5G,MAAM,CAACS,SAAS,CAACqF,SAAS;;AAE9D;AACA;AACA;AACA;AACA9F,MAAM,CAACS,SAAS,CAACuG,cAAc,GAAG,YAAW;EAC3C,KAAK,IAAIzD,IAAI,IAAIvD,MAAM,CAACkH,iBAAiB,EAAE;IACzC,IAAIlH,MAAM,CAACkH,iBAAiB,CAAC3D,IAAI,CAAC,CAAC4D,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;MAC/C,OAAOnH,MAAM,CAACsF,KAAK,CAAC/B,IAAI,CAAC;IAC3B;EACF;EACA,OAAOvD,MAAM,CAACsF,KAAK,CAACC,OAAO;AAC7B,CAAC;AAEDvF,MAAM,CAACoH,gBAAgB,GAAG,CAAC,CAAC;AAC5BpH,MAAM,CAACoH,gBAAgB,CAACf,SAAS,GAAGrG,MAAM,CAACS,SAAS,CAACqE,aAAa;AAClE9E,MAAM,CAACoH,gBAAgB,CAACb,aAAa,GAAGvG,MAAM,CAACS,SAAS,CAAC2D,iBAAiB;AAC1EpE,MAAM,CAACoH,gBAAgB,CAACT,WAAW,GAAG3G,MAAM,CAACS,SAAS,CAACmF,YAAY;AACnE5F,MAAM,CAACoH,gBAAgB,CAACX,aAAa,GAAGzG,MAAM,CAACS,SAAS,CAACwE,cAAc;;AAEvE;AACA;AACA;AACA;AACAjF,MAAM,CAACS,SAAS,CAACqG,aAAa,GAAG,YAAW;EAC1C,KAAK,IAAIvD,IAAI,IAAIvD,MAAM,CAACoH,gBAAgB,EAAE;IACxC,IAAIpH,MAAM,CAACoH,gBAAgB,CAAC7D,IAAI,CAAC,CAAC4D,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;MAC9C,OAAOnH,MAAM,CAACsF,KAAK,CAAC/B,IAAI,CAAC;IAC3B;EACF;EACA,OAAOvD,MAAM,CAACsF,KAAK,CAACC,OAAO;AAC7B,CAAC;;AAGD;AACA;AACA;AACAvF,MAAM,CAACS,SAAS,CAAC4G,UAAU,GAAG,YAAW;EACvC;EACA,OAAO,IAAI,CAAChC,QAAQ,EAAE,KAAKrF,MAAM,CAACsF,KAAK,CAACC,OAAO;AACjD,CAAC;;AAGD;;AAEA;AACA;AACA;AACA;AACA;AACAvF,MAAM,CAACS,SAAS,CAAC6G,OAAO,GAAG,UAAS5G,GAAG,EAAE;EACvC,IAAI,CAAC6G,UAAU,CAAC7G,GAAG,EAAE,IAAI,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACAV,MAAM,CAACS,SAAS,CAAC+G,MAAM,GAAG,UAAS7G,MAAM,EAAE;EACzCjB,CAAC,CAAC+E,UAAU,CAAC9D,MAAM,YAAYX,MAAM,EAAE,6BAA6B,CAAC;EACrE,IAAI,IAAI,CAACE,MAAM,CAAC6B,MAAM,KAAKpB,MAAM,CAACT,MAAM,CAAC6B,MAAM,EAAE;IAC/C,OAAO,KAAK;EACd;EACA,IAAID,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAIhC,UAAU,CAACK,QAAQ,CAAC,IAAI,CAACD,MAAM,CAAC4B,CAAC,CAAC,CAACb,GAAG,CAAC,IAAI,CAACnB,UAAU,CAACK,QAAQ,CAACQ,MAAM,CAACT,MAAM,CAAC4B,CAAC,CAAC,CAACb,GAAG,CAAC,EAAE;MACzF,OAAO,KAAK;IACd;IACA,IAAInB,UAAU,CAACK,QAAQ,CAAC,IAAI,CAACD,MAAM,CAAC4B,CAAC,CAAC,CAACb,GAAG,CAAC,IAAI,CAACnB,UAAU,CAAC0H,MAAM,CAAC,IAAI,CAACtH,MAAM,CAAC4B,CAAC,CAAC,CAACb,GAAG,EAAEN,MAAM,CAACT,MAAM,CAAC4B,CAAC,CAAC,CAACb,GAAG,CAAC,EAAE;MAC3G,OAAO,KAAK;IACd,CAAC,MAAM,IAAI,IAAI,CAACf,MAAM,CAAC4B,CAAC,CAAC,CAAChB,SAAS,KAAKH,MAAM,CAACT,MAAM,CAAC4B,CAAC,CAAC,CAAChB,SAAS,EAAE;MAClE,OAAO,KAAK;IACd;EACF;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,MAAM,CAACS,SAAS,CAACgH,GAAG,GAAG,UAAS/G,GAAG,EAAE;EACnC,IAAI,CAAC6G,UAAU,CAAC7G,GAAG,EAAE,KAAK,CAAC;EAC3B,OAAO,IAAI;AACb,CAAC;AAEDV,MAAM,CAACS,SAAS,CAAC8G,UAAU,GAAG,UAAS7G,GAAG,EAAE4G,OAAO,EAAE;EACnD,IAAI,OAAO5G,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAI,CAACgH,UAAU,CAAChH,GAAG,EAAE4G,OAAO,CAAC;EAC/B,CAAC,MAAM,IAAI,OAAO5G,GAAG,KAAK,QAAQ,EAAE;IAClC,IAAI,CAACgH,UAAU,CAAChH,GAAG,EAAE4G,OAAO,CAAC;EAC/B,CAAC,MAAM,IAAI5G,GAAG,YAAYpB,MAAM,EAAE;IAChC,IAAI,CAACoI,UAAU,CAAChH,GAAG,EAAE4G,OAAO,CAAC;EAC/B,CAAC,MAAM,IAAIxH,UAAU,CAACK,QAAQ,CAACO,GAAG,CAAC,EAAE;IACnC,IAAI,CAACiH,UAAU,CAACjH,GAAG,EAAE4G,OAAO,CAAC;EAC/B,CAAC,MAAM,IAAI5G,GAAG,YAAYV,MAAM,EAAE;IAChC,IAAI,CAACE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACmC,MAAM,CAAC3B,GAAG,CAACR,MAAM,CAAC;EAC9C,CAAC,MAAM,IAAI,OAAOQ,GAAG,KAAK,QAAQ,EAAE;IAClC,IAAI,CAACkH,iBAAiB,CAAClH,GAAG,EAAE4G,OAAO,CAAC;EACtC,CAAC,MAAM;IACL,MAAM,IAAInE,KAAK,CAAC,sBAAsB,CAAC;EACzC;AACF,CAAC;AAEDnD,MAAM,CAACS,SAAS,CAACmH,iBAAiB,GAAG,UAASC,EAAE,EAAEP,OAAO,EAAE;EACzD,IAAIA,OAAO,EAAE;IACX,IAAI,CAACpH,MAAM,CAAC4H,OAAO,CAACD,EAAE,CAAC;EACzB,CAAC,MAAM;IACL,IAAI,CAAC3H,MAAM,CAACiB,IAAI,CAAC0G,EAAE,CAAC;EACtB;AACF,CAAC;AAED7H,MAAM,CAACS,SAAS,CAACiH,UAAU,GAAG,UAAS/E,MAAM,EAAE2E,OAAO,EAAE;EACtD,IAAIO,EAAE;EACN,IAAI,OAAOlF,MAAM,KAAK,QAAQ,EAAE;IAC9BkF,EAAE,GAAGlF,MAAM;EACb,CAAC,MAAM,IAAIA,MAAM,YAAYrD,MAAM,EAAE;IACnCuI,EAAE,GAAGlF,MAAM,CAACC,QAAQ,EAAE;EACxB,CAAC,MAAM;IACLiF,EAAE,GAAGvI,MAAM,CAACqD,MAAM,CAAC,CAACC,QAAQ,EAAE;EAChC;EACA,IAAI,CAACgF,iBAAiB,CAAC;IACrB9G,SAAS,EAAE+G;EACb,CAAC,EAAEP,OAAO,CAAC;EACX,OAAO,IAAI;AACb,CAAC;AAEDtH,MAAM,CAACS,SAAS,CAACkH,UAAU,GAAG,UAAS1G,GAAG,EAAEqG,OAAO,EAAE;EACnD,IAAIxG,SAAS;EACb,IAAIE,GAAG,GAAGC,GAAG,CAACc,MAAM;EACpB,IAAIf,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAG1B,MAAM,CAAC4B,YAAY,EAAE;IACzCJ,SAAS,GAAGE,GAAG;EACjB,CAAC,MAAM,IAAIA,GAAG,GAAG+G,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;IAC/BlH,SAAS,GAAGxB,MAAM,CAAC4B,YAAY;EACjC,CAAC,MAAM,IAAIF,GAAG,GAAG+G,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IAChClH,SAAS,GAAGxB,MAAM,CAAC+B,YAAY;EACjC,CAAC,MAAM,IAAIL,GAAG,GAAG+G,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IAChClH,SAAS,GAAGxB,MAAM,CAACiC,YAAY;EACjC,CAAC,MAAM;IACL,MAAM,IAAI4B,KAAK,CAAC,gCAAgC,CAAC;EACnD;EACA,IAAI,CAACyE,iBAAiB,CAAC;IACrB3G,GAAG,EAAEA,GAAG;IACRD,GAAG,EAAEA,GAAG;IACRF,SAAS,EAAEA;EACb,CAAC,EAAEwG,OAAO,CAAC;EACX,OAAO,IAAI;AACb,CAAC;AAEDtH,MAAM,CAACS,SAAS,CAACwH,oBAAoB,GAAG,YAAW;EACjD,IAAI/H,MAAM,GAAG,EAAE;EACf,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAI,IAAI,CAAC5B,MAAM,CAAC4B,CAAC,CAAC,CAAChB,SAAS,KAAKxB,MAAM,CAAC4I,gBAAgB,EAAE;MACxDhI,MAAM,CAACiB,IAAI,CAAC,IAAI,CAACjB,MAAM,CAAC4B,CAAC,CAAC,CAAC;IAC7B;EACF;EACA,IAAI,CAAC5B,MAAM,GAAGA,MAAM;EACpB,OAAO,IAAI;AACb,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,MAAM,CAACmI,gBAAgB,GAAG,UAASC,UAAU,EAAEC,SAAS,EAAEC,IAAI,EAAE;EAC9D5I,CAAC,CAAC6I,aAAa,CAACF,SAAS,IAAID,UAAU,CAACrG,MAAM,EAC5C,uFAAuF,CAAC;EAC1FuG,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,IAAI3H,MAAM,GAAG,IAAIX,MAAM,EAAE;EACzBW,MAAM,CAAC8G,GAAG,CAACnI,MAAM,CAACkJ,QAAQ,CAACH,SAAS,CAAC,CAAC;EACtCD,UAAU,GAAGzI,CAAC,CAAC8I,GAAG,CAACL,UAAU,EAAE7I,SAAS,CAAC;EACzC,IAAImJ,MAAM,GAAGN,UAAU;EACvB,IAAI,CAACE,IAAI,CAACK,SAAS,EAAE;IACnBD,MAAM,GAAG/I,CAAC,CAACiJ,MAAM,CAACR,UAAU,EAAE,UAASS,SAAS,EAAE;MAChD,OAAOA,SAAS,CAACjH,QAAQ,CAAC,KAAK,CAAC;IAClC,CAAC,CAAC;EACJ;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4G,MAAM,CAAC3G,MAAM,EAAED,CAAC,EAAE,EAAE;IACtC,IAAI+G,SAAS,GAAGH,MAAM,CAAC5G,CAAC,CAAC;IACzBnB,MAAM,CAAC8G,GAAG,CAACoB,SAAS,CAACvI,QAAQ,EAAE,CAAC;EAClC;EACAK,MAAM,CAAC8G,GAAG,CAACnI,MAAM,CAACkJ,QAAQ,CAACJ,UAAU,CAACrG,MAAM,CAAC,CAAC;EAC9CpB,MAAM,CAAC8G,GAAG,CAACnI,MAAM,CAACqG,gBAAgB,CAAC;EACnC,OAAOhF,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,MAAM,CAAC8I,eAAe,GAAG,UAASC,OAAO,EAAEV,SAAS,EAAEW,UAAU,EAAEV,IAAI,EAAE;EACtE5I,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACsJ,OAAO,CAACF,OAAO,CAAC,CAAC;EACnCrJ,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACuJ,QAAQ,CAACb,SAAS,CAAC,CAAC;EACtC3I,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACsJ,OAAO,CAACD,UAAU,CAAC,CAAC;EACtCV,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,IAAIa,CAAC,GAAG,IAAInJ,MAAM,EAAE;EACpBmJ,CAAC,CAAC1B,GAAG,CAACnI,MAAM,CAAC8J,IAAI,CAAC;EAClBzJ,CAAC,CAAC0J,IAAI,CAACL,UAAU,EAAE,UAASM,SAAS,EAAE;IACrC5J,CAAC,CAAC6I,aAAa,CAACzI,UAAU,CAACK,QAAQ,CAACmJ,SAAS,CAAC,EAAE,wCAAwC,CAAC;IACzF;IACAH,CAAC,CAAC1B,GAAG,CAAC6B,SAAS,CAAC;EAClB,CAAC,CAAC;EACF,OAAOH,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnJ,MAAM,CAACuJ,mBAAmB,GAAG,UAASR,OAAO,EAAEV,SAAS,EAAEW,UAAU,EAAEV,IAAI,EAAE;EAC1E5I,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACsJ,OAAO,CAACF,OAAO,CAAC,CAAC;EACnCrJ,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACuJ,QAAQ,CAACb,SAAS,CAAC,CAAC;EACtC3I,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACsJ,OAAO,CAACD,UAAU,CAAC,CAAC;EACtCV,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,IAAIa,CAAC,GAAG,IAAInJ,MAAM,EAAE;EACpBmJ,CAAC,CAAC1B,GAAG,CAACnI,MAAM,CAAC8J,IAAI,CAAC;EAClBzJ,CAAC,CAAC0J,IAAI,CAACL,UAAU,EAAE,UAASM,SAAS,EAAE;IACrC5J,CAAC,CAAC6I,aAAa,CAACzI,UAAU,CAACK,QAAQ,CAACmJ,SAAS,CAAC,EAAE,wCAAwC,CAAC;IACzF;IACAH,CAAC,CAAC1B,GAAG,CAAC6B,SAAS,CAAC;EAClB,CAAC,CAAC;EACFH,CAAC,CAAC1B,GAAG,CAAC,CAACa,IAAI,CAACkB,cAAc,IAAIxJ,MAAM,CAACmI,gBAAgB,CAACY,OAAO,EAAEV,SAAS,EAAEC,IAAI,CAAC,EAAEhI,QAAQ,EAAE,CAAC;EAC5F,OAAO6I,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAnJ,MAAM,CAACyJ,qBAAqB,GAAG,UAASC,EAAE,EAAE;EAC1ChK,CAAC,CAAC6I,aAAa,CAAC,CAAC5I,CAAC,CAACkD,WAAW,CAAC6G,EAAE,CAAC,CAAC;EACnChK,CAAC,CAAC6I,aAAa,CAACmB,EAAE,YAAYnK,SAAS,IAAImK,EAAE,YAAYzK,OAAO,IAAIU,CAAC,CAACgK,QAAQ,CAACD,EAAE,CAAC,CAAC;EACnF,IAAIA,EAAE,YAAYnK,SAAS,EAAE;IAC3BmK,EAAE,GAAGA,EAAE,CAACE,SAAS,EAAE;EACrB,CAAC,MAAM,IAAIjK,CAAC,CAACgK,QAAQ,CAACD,EAAE,CAAC,EAAE;IACzBA,EAAE,GAAG,IAAIzK,OAAO,CAACyK,EAAE,CAAC;EACtB;EACA,IAAIP,CAAC,GAAG,IAAInJ,MAAM,EAAE;EACpBmJ,CAAC,CAAC1B,GAAG,CAACnI,MAAM,CAAC0E,MAAM,CAAC,CACjByD,GAAG,CAACnI,MAAM,CAAC2E,UAAU,CAAC,CACtBwD,GAAG,CAACiC,EAAE,CAACG,UAAU,CAAC,CAClBpC,GAAG,CAACnI,MAAM,CAAC4E,cAAc,CAAC,CAC1BuD,GAAG,CAACnI,MAAM,CAAC6E,WAAW,CAAC;EAC1BgF,CAAC,CAACW,QAAQ,GAAGJ,EAAE,CAACK,OAAO;EACvB,OAAOZ,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACAnJ,MAAM,CAACgK,iBAAiB,GAAG,UAASC,MAAM,EAAE;EAC1CvK,CAAC,CAAC6I,aAAa,CAAC0B,MAAM,YAAY1K,SAAS,CAAC;EAC5C,IAAI4J,CAAC,GAAG,IAAInJ,MAAM,EAAE;EACpBmJ,CAAC,CAAC1B,GAAG,CAACwC,MAAM,CAAC3J,QAAQ,EAAE,CAAC,CACrBmH,GAAG,CAACnI,MAAM,CAAC6E,WAAW,CAAC;EAC1B,OAAOgF,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAnJ,MAAM,CAACkK,YAAY,GAAG,UAASC,IAAI,EAAEC,QAAQ,EAAE;EAC7C1K,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACkD,WAAW,CAACsH,IAAI,CAAC,IAAIxK,CAAC,CAACgK,QAAQ,CAACQ,IAAI,CAAC,IAAIrK,UAAU,CAACK,QAAQ,CAACgK,IAAI,CAAC,CAAC;EACrF,IAAIxK,CAAC,CAACgK,QAAQ,CAACQ,IAAI,CAAC,EAAE;IACpBA,IAAI,GAAG,IAAIrH,MAAM,CAACqH,IAAI,EAAEC,QAAQ,CAAC;EACnC;EACA,IAAIjB,CAAC,GAAG,IAAInJ,MAAM,EAAE;EACpBmJ,CAAC,CAAC1B,GAAG,CAACnI,MAAM,CAACyG,SAAS,CAAC;EACvB,IAAI,CAACpG,CAAC,CAACkD,WAAW,CAACsH,IAAI,CAAC,EAAE;IACxBhB,CAAC,CAAC1B,GAAG,CAAC0C,IAAI,CAAC;EACb;EACA,OAAOhB,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAnJ,MAAM,CAACqK,kBAAkB,GAAG,UAAS1J,MAAM,EAAE;EAC3CjB,CAAC,CAAC6I,aAAa,CAAC5H,MAAM,YAAYX,MAAM,IACrCW,MAAM,YAAY1B,OAAO,IAAI0B,MAAM,CAAC2J,iBAAiB,EAAG,CAAC;EAC5D,IAAInB,CAAC,GAAG,IAAInJ,MAAM,EAAE;EACpBmJ,CAAC,CAAC1B,GAAG,CAACnI,MAAM,CAAC2E,UAAU,CAAC,CACrBwD,GAAG,CAAC9G,MAAM,YAAY1B,OAAO,GAAG0B,MAAM,CAACkJ,UAAU,GAAGxK,IAAI,CAACkL,eAAe,CAAC5J,MAAM,CAACL,QAAQ,EAAE,CAAC,CAAC,CAC5FmH,GAAG,CAACnI,MAAM,CAAC0F,QAAQ,CAAC;EAEvBmE,CAAC,CAACW,QAAQ,GAAGnJ,MAAM,CAACmJ,QAAQ,IAAInJ,MAAM,CAACoJ,OAAO;EAC9C,OAAOZ,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAnJ,MAAM,CAACwK,gBAAgB,GAAG,UAASlB,SAAS,EAAEmB,OAAO,EAAE;EACrD/K,CAAC,CAAC6I,aAAa,CAACe,SAAS,YAAY9J,SAAS,IAAIM,UAAU,CAACK,QAAQ,CAACmJ,SAAS,CAAC,CAAC;EACjF5J,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACkD,WAAW,CAAC4H,OAAO,CAAC,IAAI9K,CAAC,CAACuJ,QAAQ,CAACuB,OAAO,CAAC,CAAC;EAC9D,IAAInB,SAAS,YAAY9J,SAAS,EAAE;IAClC8J,SAAS,GAAGA,SAAS,CAAChJ,QAAQ,EAAE;EAClC;EACA,IAAIK,MAAM,GAAG,IAAIX,MAAM,EAAE;EACzBW,MAAM,CAAC8G,GAAG,CAAC3H,UAAU,CAACuC,MAAM,CAAC,CAC3BiH,SAAS,EACTxJ,UAAU,CAAC4K,yBAAyB,CAACD,OAAO,IAAIjL,SAAS,CAACmL,WAAW,CAAC,CACvE,CAAC,CAAC;EACH,OAAOhK,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,MAAM,CAAC4K,oBAAoB,GAAG,UAAS/B,SAAS,EAAES,SAAS,EAAEmB,OAAO,EAAE;EACpE/K,CAAC,CAAC6I,aAAa,CAACe,SAAS,YAAY9J,SAAS,IAAIM,UAAU,CAACK,QAAQ,CAACmJ,SAAS,CAAC,CAAC;EACjF5J,CAAC,CAAC6I,aAAa,CAAC5I,CAAC,CAACkD,WAAW,CAAC4H,OAAO,CAAC,IAAI9K,CAAC,CAACuJ,QAAQ,CAACuB,OAAO,CAAC,CAAC;EAC9D,IAAInB,SAAS,YAAY9J,SAAS,EAAE;IAClC8J,SAAS,GAAGA,SAAS,CAAChJ,QAAQ,EAAE;EAClC;EACA,IAAIK,MAAM,GAAG,IAAIX,MAAM,EAAE,CACtByH,GAAG,CAAC3H,UAAU,CAACuC,MAAM,CAAC,CACrBiH,SAAS,EACTxJ,UAAU,CAAC4K,yBAAyB,CAACD,OAAO,IAAIjL,SAAS,CAACmL,WAAW,CAAC,CACvE,CAAC,CAAC,CACFlD,GAAG,CAAC,IAAIlI,SAAS,CAACsJ,SAAS,CAAC,CAACvI,QAAQ,EAAE,CAAC;EAC3C,OAAOK,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACAX,MAAM,CAAC6K,KAAK,GAAG,YAAW;EACxB,OAAO,IAAI7K,MAAM,EAAE;AACrB,CAAC;;AAED;AACA;AACA;AACAA,MAAM,CAACS,SAAS,CAACqK,eAAe,GAAG,YAAW;EAC5C,OAAO9K,MAAM,CAACqK,kBAAkB,CAAC,IAAI,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACArK,MAAM,CAACK,WAAW,GAAG,UAAS0K,OAAO,EAAE;EACrCA,OAAO,GAAG9L,OAAO,CAAC8L,OAAO,CAAC;EAC1B,IAAIA,OAAO,CAACT,iBAAiB,EAAE,EAAE;IAC/B,OAAOtK,MAAM,CAACqK,kBAAkB,CAACU,OAAO,CAAC;EAC3C,CAAC,MAAM,IAAIA,OAAO,CAACC,oBAAoB,EAAE,EAAE;IACzC,OAAOhL,MAAM,CAACyJ,qBAAqB,CAACsB,OAAO,CAAC;EAC9C;EACA,MAAM,IAAInL,MAAM,CAACI,MAAM,CAACiL,mBAAmB,CAACF,OAAO,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA/K,MAAM,CAACS,SAAS,CAACyK,cAAc,GAAG,UAAS5C,IAAI,EAAE;EAC/C,IAAI,IAAI,CAACzB,QAAQ,EAAE;IACjB,OAAO,IAAI,CAACsE,oBAAoB,EAAE;EACpC,CAAC,MAAM,IAAI,IAAI,CAACpE,SAAS,EAAE;IACzB,OAAO,IAAI,CAACqE,qBAAqB,EAAE;EACrC,CAAC,MAAM;IACL,IAAIC,IAAI,GAAG,IAAI,CAACD,qBAAqB,EAAE;IACvC,IAAI,CAACC,IAAI,EAAE;MACT,OAAO,IAAI,CAACF,oBAAoB,EAAE;IACpC;IACA,OAAOE,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACArL,MAAM,CAACS,SAAS,CAAC2K,qBAAqB,GAAG,YAAW;EAClD,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb,IAAI,IAAI,CAACtG,eAAe,EAAE,EAAE;IAC1BsG,IAAI,CAACxB,UAAU,GAAG,IAAI,CAAC5D,OAAO,EAAE;IAChCoF,IAAI,CAAC9H,IAAI,GAAGtE,OAAO,CAACqM,eAAe;EACrC,CAAC,MAAM,IAAI,IAAI,CAACvH,kBAAkB,EAAE,EAAE;IACpCsH,IAAI,CAACxB,UAAU,GAAG,IAAI,CAAC5D,OAAO,EAAE;IAChCoF,IAAI,CAAC9H,IAAI,GAAGtE,OAAO,CAACsM,kBAAkB;EACxC,CAAC,MAAM;IACL,OAAO,KAAK;EACd;EACA,OAAOF,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACArL,MAAM,CAACS,SAAS,CAAC0K,oBAAoB,GAAG,YAAW;EACjD,IAAIE,IAAI,GAAG,CAAC,CAAC;EACb,IAAI,IAAI,CAACjH,iBAAiB,EAAE,EAAE;IAC5B;IACAiH,IAAI,CAACxB,UAAU,GAAGxK,IAAI,CAACkL,eAAe,CAAC,IAAI,CAACrK,MAAM,CAAC,CAAC,CAAC,CAACe,GAAG,CAAC;IAC1DoK,IAAI,CAAC9H,IAAI,GAAGtE,OAAO,CAACsM,kBAAkB;EACxC,CAAC,MAAM,IAAI,IAAI,CAACtG,cAAc,EAAE,EAAE;IAChC;IACAoG,IAAI,CAACxB,UAAU,GAAGxK,IAAI,CAACkL,eAAe,CAAC,IAAI,CAACrK,MAAM,CAAC,IAAI,CAACA,MAAM,CAAC6B,MAAM,GAAG,CAAC,CAAC,CAACd,GAAG,CAAC;IAC/EoK,IAAI,CAAC9H,IAAI,GAAGtE,OAAO,CAACqM,eAAe;EACrC,CAAC,MAAM;IACL,OAAO,KAAK;EACd;EACA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACArL,MAAM,CAACS,SAAS,CAACmJ,SAAS,GAAG,UAASG,OAAO,EAAE;EAC7C,IAAIsB,IAAI,GAAG,IAAI,CAACH,cAAc,EAAE;EAChC,IAAI,CAACG,IAAI,EAAE;IACT,OAAO,KAAK;EACd;EACAA,IAAI,CAACtB,OAAO,GAAGtK,QAAQ,CAAC+L,GAAG,CAACzB,OAAO,CAAC,IAAI,IAAI,CAACD,QAAQ,IAAIrK,QAAQ,CAACgM,cAAc;EAChF,OAAO,IAAIxM,OAAO,CAACoM,IAAI,CAAC;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACArL,MAAM,CAACS,SAAS,CAACiL,aAAa,GAAG,UAAS/K,MAAM,EAAE;EAChD,IAAIM,GAAG,GAAGN,MAAM,CAACL,QAAQ,EAAE;EAC3B,IAAIqL,GAAG,GAAG1K,GAAG,CAACW,QAAQ,CAAC,KAAK,CAAC;EAC7B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAI8J,OAAO,GAAG5L,MAAM,CAAC;MACnBE,MAAM,EAAE,CAAC,IAAI,CAACA,MAAM,CAAC4B,CAAC,CAAC;IACzB,CAAC,CAAC;IACF,IAAI+J,IAAI,GAAGD,OAAO,CAACtL,QAAQ,EAAE;IAC7B,IAAIwL,IAAI,GAAGD,IAAI,CAACjK,QAAQ,CAAC,KAAK,CAAC;IAC/B,IAAI+J,GAAG,KAAKG,IAAI,EAAE;MAChB,IAAI,CAAC5L,MAAM,CAAC6L,MAAM,CAACjK,CAAC,EAAE,CAAC,CAAC;IAC1B;EACF;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA9B,MAAM,CAACS,SAAS,CAACuL,gBAAgB,GAAG,UAASlK,CAAC,EAAE;EAC9C,IAAIE,KAAK,GAAG,IAAI,CAAC9B,MAAM,CAAC4B,CAAC,CAAC;EAC1B,IAAIb,GAAG,GAAGe,KAAK,CAACf,GAAG;EACnB,IAAIH,SAAS,GAAGkB,KAAK,CAAClB,SAAS;EAC/B,IAAI,CAACG,GAAG,EAAE;IACR,OAAO,IAAI;EACb;EACA,IAAIA,GAAG,CAACc,MAAM,KAAK,CAAC,EAAE;IACpB;IACA,OAAOjB,SAAS,KAAKxB,MAAM,CAAC8J,IAAI;EAClC,CAAC,MAAM,IAAInI,GAAG,CAACc,MAAM,KAAK,CAAC,IAAId,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAIA,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE;IAC1D;IACA,OAAOH,SAAS,KAAKxB,MAAM,CAAC2M,IAAI,IAAIhL,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACjD,CAAC,MAAM,IAAIA,GAAG,CAACc,MAAM,KAAK,CAAC,IAAId,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IAC9C;IACA,OAAOH,SAAS,KAAKxB,MAAM,CAAC4M,UAAU;EACxC,CAAC,MAAM,IAAIjL,GAAG,CAACc,MAAM,IAAI,EAAE,EAAE;IAC3B;IACA,OAAOjB,SAAS,KAAKG,GAAG,CAACc,MAAM;EACjC,CAAC,MAAM,IAAId,GAAG,CAACc,MAAM,IAAI,GAAG,EAAE;IAC5B;IACA,OAAOjB,SAAS,KAAKxB,MAAM,CAAC4B,YAAY;EAC1C,CAAC,MAAM,IAAID,GAAG,CAACc,MAAM,IAAI,KAAK,EAAE;IAC9B;IACA,OAAOjB,SAAS,KAAKxB,MAAM,CAAC+B,YAAY;EAC1C;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACArB,MAAM,CAACS,SAAS,CAAC0L,WAAW,GAAG,UAASxJ,MAAM,EAAE;EAC9C,IAAIA,MAAM,KAAKrD,MAAM,CAAC8J,IAAI,EAAE;IAC1B,OAAO,CAAC;EACV,CAAC,MAAM,IAAIzG,MAAM,IAAIrD,MAAM,CAAC2M,IAAI,IAAItJ,MAAM,IAAIrD,MAAM,CAAC6G,KAAK,EAAE;IAC1D,OAAOxD,MAAM,IAAIrD,MAAM,CAAC2M,IAAI,GAAG,CAAC,CAAC;EACnC,CAAC,MAAM;IACL,MAAM,IAAI9I,KAAK,CAAC,kBAAkB,GAAGC,IAAI,CAACC,SAAS,CAACV,MAAM,CAAC,CAAC;EAC9D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA3C,MAAM,CAACS,SAAS,CAAC2L,2BAA2B,GAAG,UAASC,QAAQ,EAAE;EAChEA,QAAQ,GAAI1M,CAAC,CAACkD,WAAW,CAACwJ,QAAQ,CAAC,GAAG,IAAI,GAAGA,QAAS;EACtD,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,UAAU,GAAGlN,MAAM,CAACmN,gBAAgB;EACxC9M,CAAC,CAAC0J,IAAI,CAACiD,IAAI,CAACpM,MAAM,EAAE,SAASwM,QAAQ,CAAC1K,KAAK,EAAE;IAC3C,IAAIW,MAAM,GAAGX,KAAK,CAAClB,SAAS;IAC5B,IAAI6B,MAAM,IAAIrD,MAAM,CAAC6E,WAAW,IAAIxB,MAAM,IAAIrD,MAAM,CAACqN,iBAAiB,EAAE;MACtEJ,CAAC,EAAE;IACL,CAAC,MAAM,IAAI5J,MAAM,IAAIrD,MAAM,CAACqG,gBAAgB,IAAIhD,MAAM,IAAIrD,MAAM,CAACsN,sBAAsB,EAAE;MACvF,IAAIP,QAAQ,IAAIG,UAAU,IAAIlN,MAAM,CAAC2M,IAAI,IAAIO,UAAU,IAAIlN,MAAM,CAAC6G,KAAK,EAAE;QACvEoG,CAAC,IAAID,IAAI,CAACH,WAAW,CAACK,UAAU,CAAC;MACnC,CAAC,MAAM;QACLD,CAAC,IAAI,EAAE;MACT;IACF;IACAC,UAAU,GAAG7J,MAAM;EACrB,CAAC,CAAC;EACF,OAAO4J,CAAC;AACV,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAG9M,MAAM"},"metadata":{},"sourceType":"script"}