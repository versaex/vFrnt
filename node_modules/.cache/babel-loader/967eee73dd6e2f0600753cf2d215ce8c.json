{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport { BaseClient } from '@sentry/core';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { BrowserBackend } from './backend';\nimport { injectReportDialog } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar BrowserClient = /** @class */function (_super) {\n  __extends(BrowserClient, _super);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  function BrowserClient(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return _super.call(this, BrowserBackend, options) || this;\n  }\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  BrowserClient.prototype.showReportDialog = function (options) {\n    if (options === void 0) {\n      options = {};\n    }\n    // doesn't work without a document (React Native)\n    var document = getGlobalObject().document;\n    if (!document) {\n      return;\n    }\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n    injectReportDialog(__assign(__assign({}, options), {\n      dsn: options.dsn || this.getDsn()\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserClient.prototype._prepareEvent = function (event, scope, hint) {\n    event.platform = event.platform || 'javascript';\n    event.sdk = __assign(__assign({}, event.sdk), {\n      name: SDK_NAME,\n      packages: __spread(event.sdk && event.sdk.packages || [], [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }]),\n      version: SDK_VERSION\n    });\n    return _super.prototype._prepareEvent.call(this, event, scope, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserClient.prototype._sendEvent = function (event) {\n    var integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    _super.prototype._sendEvent.call(this, event);\n  };\n  return BrowserClient;\n}(BaseClient);\nexport { BrowserClient };","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":";AAAA,SAAS,UAAU,QAAe,cAAc;AAEhD,SAAS,eAAe,EAAE,MAAM,QAAQ,eAAe;AAEvD,SAAS,cAAc,QAAwB,WAAW;AAC1D,SAAS,kBAAkB,QAA6B,WAAW;AACnE,SAAS,WAAW,QAAQ,gBAAgB;AAC5C,SAAS,QAAQ,EAAE,WAAW,QAAQ,WAAW;AAEjD;;;;;AAKG;AACH,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAmC,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EACjC;;;;AAIG;EACH,SAAA,aAAA,CAAmB,OAA4B,EAAA;IAA5B,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,CAAA,CAA4B;IAAA;WAC7C,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAc,EAAE,OAAO,CAAC,IAAA,IAAA;EAChC;EAEA;;;;AAIG;EACI,aAAA,CAAA,SAAA,CAAA,gBAAgB,GAAvB,UAAwB,OAAiC,EAAA;IAAjC,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;MAAA,OAAA,GAAA,CAAA,CAAiC;IAAA;IACvD;IACA,IAAM,QAAQ,GAAG,eAAe,EAAU,CAAC,QAAQ;IACnD,IAAI,CAAC,QAAQ,EAAE;MACb;IACD;IAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;MACtB,MAAM,CAAC,KAAK,CAAC,6DAA6D,CAAC;MAC3E;IACD;IAED,kBAAkB,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACb,OAAO,CAAA,EAAA;MACV,GAAG,EAAE,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM;IAAE,CAAA,CAAA,CACjC;EACJ,CAAC;EAED;;AAEG;EACO,aAAA,CAAA,SAAA,CAAA,aAAa,GAAvB,UAAwB,KAAY,EAAE,KAAa,EAAE,IAAgB,EAAA;IACnE,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,IAAI,YAAY;IAC/C,KAAK,CAAC,GAAG,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACJ,KAAK,CAAC,GAAG,CAAA,EAAA;MACZ,IAAI,EAAE,QAAQ;MACd,QAAQ,EAAA,QAAA,CACD,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,IAAK,EAAE,EAAC,CAC5C;QACE,IAAI,EAAE,qBAAqB;QAC3B,OAAO,EAAE;OACV,C;MAEH,OAAO,EAAE;IAAW,CAAA,CACrB;IAED,OAAO,MAAA,CAAA,SAAA,CAAM,aAAa,CAAA,IAAA,CAAA,IAAA,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;EAChD,CAAC;EAED;;AAEG;EACO,aAAA,CAAA,SAAA,CAAA,UAAU,GAApB,UAAqB,KAAY,EAAA;IAC/B,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC;IACpD,IAAI,WAAW,EAAE;MACf,WAAW,CAAC,mBAAmB,CAAC,KAAK,CAAC;IACvC;IACD,MAAA,CAAA,SAAA,CAAM,UAAU,CAAA,IAAA,CAAA,IAAA,EAAC,KAAK,CAAC;EACzB,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,CAhEkC,UAAU,CAAA","sourcesContent":["import { BaseClient, Scope } from '@sentry/core';\nimport { Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { injectReportDialog, ReportDialogOptions } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client disabled');\n      return;\n    }\n\n    injectReportDialog({\n      ...options,\n      dsn: options.dsn || this.getDsn(),\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _sendEvent(event: Event): void {\n    const integration = this.getIntegration(Breadcrumbs);\n    if (integration) {\n      integration.addSentryBreadcrumb(event);\n    }\n    super._sendEvent(event);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}