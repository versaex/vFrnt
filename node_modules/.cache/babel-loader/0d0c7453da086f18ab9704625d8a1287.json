{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\screens\\\\SignInScreen\\\\index.tsx\";\nimport cx from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { captchaLogin } from '../../api';\nimport { Captcha, SignInComponent, TwoFactorAuth } from '../../components';\nimport { EMAIL_REGEX, ERROR_EMPTY_PASSWORD, ERROR_INVALID_EMAIL, setDocumentTitle } from '../../helpers';\nimport { resetCaptchaState as _resetCaptchaState, selectAlertState, selectCaptchaResponse, selectConfigs, selectGeetestCaptchaSuccess, selectRecaptchaSuccess, selectSignInError, selectSignInRequire2FA, selectSignUpRequireVerification, selectUserFetching, selectUserLoggedIn, signIn as _signIn, signInError as _signInError, signInRequire2FA as _signInRequire2FA, signUpRequireVerification as _signUpRequireVerification } from '../../modules';\nvar SignIn = /*#__PURE__*/function (_React$Component) {\n  _inherits(SignIn, _React$Component);\n  var _super = _createSuper(SignIn);\n  function SignIn() {\n    var _this;\n    _classCallCheck(this, SignIn);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      email: '',\n      emailError: '',\n      emailFocused: false,\n      password: '',\n      passwordError: '',\n      passwordFocused: false,\n      otpCode: '',\n      error2fa: '',\n      codeFocused: false\n    };\n    _this.renderCaptcha = function () {\n      var error = _this.props.error;\n      return /*#__PURE__*/React.createElement(Captcha, {\n        error: error,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      });\n    };\n    _this.renderSignInForm = function () {\n      var _this$props = _this.props,\n        configs = _this$props.configs,\n        loading = _this$props.loading,\n        captcha_response = _this$props.captcha_response,\n        reCaptchaSuccess = _this$props.reCaptchaSuccess,\n        geetestCaptchaSuccess = _this$props.geetestCaptchaSuccess;\n      var _this$state = _this.state,\n        email = _this$state.email,\n        emailError = _this$state.emailError,\n        emailFocused = _this$state.emailFocused,\n        password = _this$state.password,\n        passwordError = _this$state.passwordError,\n        passwordFocused = _this$state.passwordFocused;\n      return /*#__PURE__*/React.createElement(SignInComponent, {\n        email: email,\n        emailError: emailError,\n        emailFocused: emailFocused,\n        emailPlaceholder: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.email'\n        }),\n        password: password,\n        passwordError: passwordError,\n        passwordFocused: passwordFocused,\n        passwordPlaceholder: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.password'\n        }),\n        labelSignIn: _this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        labelSignUp: _this.props.intl.formatMessage({\n          id: 'page.header.signUp'\n        }),\n        emailLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.email'\n        }),\n        passwordLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.password'\n        }),\n        receiveConfirmationLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.receiveConfirmation'\n        }),\n        forgotPasswordLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn.forgotPassword'\n        }),\n        isLoading: loading,\n        onForgotPassword: _this.forgotPassword,\n        onSignUp: _this.handleSignUp,\n        onSignIn: _this.handleSignIn,\n        handleChangeFocusField: _this.handleFieldFocus,\n        isFormValid: _this.validateForm,\n        refreshError: _this.refreshError,\n        changeEmail: _this.handleChangeEmailValue,\n        changePassword: _this.handleChangePasswordValue,\n        captchaType: configs.captcha_type,\n        renderCaptcha: _this.renderCaptcha(),\n        reCaptchaSuccess: reCaptchaSuccess,\n        geetestCaptchaSuccess: geetestCaptchaSuccess,\n        captcha_response: captcha_response,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      });\n    };\n    _this.render2FA = function () {\n      var loading = _this.props.loading;\n      var _this$state2 = _this.state,\n        otpCode = _this$state2.otpCode,\n        error2fa = _this$state2.error2fa,\n        codeFocused = _this$state2.codeFocused;\n      return /*#__PURE__*/React.createElement(TwoFactorAuth, {\n        isLoading: loading,\n        onSubmit: _this.handle2FASignIn,\n        title: _this.props.intl.formatMessage({\n          id: 'page.password2fa'\n        }),\n        label: _this.props.intl.formatMessage({\n          id: 'page.body.wallets.tabs.withdraw.content.code2fa'\n        }),\n        buttonLabel: _this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        message: _this.props.intl.formatMessage({\n          id: 'page.password2fa.message'\n        }),\n        codeFocused: codeFocused,\n        otpCode: otpCode,\n        error: error2fa,\n        handleOtpCodeChange: _this.handleChangeOtpCode,\n        handleChangeFocusField: _this.handle2faFocus,\n        handleClose2fa: _this.handleClose,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }\n      });\n    };\n    _this.refreshError = function () {\n      _this.setState({\n        emailError: '',\n        passwordError: ''\n      });\n    };\n    _this.handleChangeOtpCode = function (value) {\n      _this.setState({\n        error2fa: '',\n        otpCode: value\n      });\n    };\n    _this.handleSignIn = function () {\n      var _this$state3 = _this.state,\n        email = _this$state3.email,\n        password = _this$state3.password;\n      var _this$props2 = _this.props,\n        captcha_type = _this$props2.configs.captcha_type,\n        captcha_response = _this$props2.captcha_response;\n      if (captcha_type !== 'none' && captchaLogin()) {\n        _this.props.signIn({\n          email: email,\n          password: password,\n          captcha_response: captcha_response\n        });\n      } else {\n        _this.props.signIn({\n          email: email,\n          password: password\n        });\n      }\n    };\n    _this.handle2FASignIn = function () {\n      var _this$state4 = _this.state,\n        email = _this$state4.email,\n        password = _this$state4.password,\n        otpCode = _this$state4.otpCode;\n      var _this$props3 = _this.props,\n        captcha_type = _this$props3.configs.captcha_type,\n        captcha_response = _this$props3.captcha_response;\n      if (!otpCode) {\n        _this.setState({\n          error2fa: 'Please enter 2fa code'\n        });\n      } else {\n        if (captcha_type !== 'none' && captchaLogin()) {\n          _this.props.signIn({\n            email: email,\n            password: password,\n            captcha_response: captcha_response,\n            otp_code: otpCode\n          });\n        } else {\n          _this.props.signIn({\n            email: email,\n            password: password,\n            otp_code: otpCode\n          });\n        }\n      }\n    };\n    _this.handleSignUp = function () {\n      _this.props.history.push('/signup');\n    };\n    _this.forgotPassword = function () {\n      _this.props.history.push('/forgot_password');\n    };\n    _this.handleFieldFocus = function (field) {\n      switch (field) {\n        case 'email':\n          _this.setState(function (prev) {\n            return {\n              emailFocused: !prev.emailFocused\n            };\n          });\n          break;\n        case 'password':\n          _this.setState(function (prev) {\n            return {\n              passwordFocused: !prev.passwordFocused\n            };\n          });\n          break;\n        default:\n          break;\n      }\n    };\n    _this.handle2faFocus = function () {\n      _this.setState(function (prev) {\n        return {\n          codeFocused: !prev.codeFocused\n        };\n      });\n    };\n    _this.validateForm = function () {\n      var _this$state5 = _this.state,\n        email = _this$state5.email,\n        password = _this$state5.password;\n      var isEmailValid = email.match(EMAIL_REGEX);\n      if (!isEmailValid) {\n        _this.setState({\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: ''\n        });\n        return;\n      }\n      if (!password) {\n        _this.setState({\n          emailError: '',\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_EMPTY_PASSWORD\n          })\n        });\n        return;\n      }\n    };\n    _this.handleChangeEmailValue = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n    _this.handleChangePasswordValue = function (value) {\n      _this.setState({\n        password: value\n      });\n    };\n    _this.handleClose = function () {\n      _this.props.signInRequire2FA({\n        require2fa: false\n      });\n    };\n    return _this;\n  }\n  _createClass(SignIn, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Sign In');\n      this.props.signInError({\n        code: 0,\n        message: ['']\n      });\n      this.props.signUpRequireVerification({\n        requireVerification: false\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var email = this.state.email;\n      if (!this.props.isLoggedIn && nextProps.isLoggedIn) {\n        this.props.resetCaptchaState();\n        this.props.history.push('/wallets', {\n          email: email\n        });\n      }\n      if (nextProps.requireEmailVerification) {\n        this.props.history.push('/email-verification', {\n          email: email\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.resetCaptchaState();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n        loading = _this$props4.loading,\n        require2FA = _this$props4.require2FA;\n      var className = cx('pg-sign-in-screen__container', {\n        loading: loading\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-sign-in-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, require2FA ? this.render2FA() : this.renderSignInForm()));\n    }\n  }]);\n  return SignIn;\n}(React.Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    alert: selectAlertState(state),\n    error: selectSignInError(state),\n    isLoggedIn: selectUserLoggedIn(state),\n    loading: selectUserFetching(state),\n    require2FA: selectSignInRequire2FA(state),\n    requireEmailVerification: selectSignUpRequireVerification(state),\n    configs: selectConfigs(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state)\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signIn: function signIn(data) {\n      return dispatch(_signIn(data));\n    },\n    signInError: function signInError(error) {\n      return dispatch(_signInError(error));\n    },\n    signInRequire2FA: function signInRequire2FA(payload) {\n      return dispatch(_signInRequire2FA(payload));\n    },\n    resetCaptchaState: function resetCaptchaState() {\n      return dispatch(_resetCaptchaState());\n    },\n    signUpRequireVerification: function signUpRequireVerification(data) {\n      return dispatch(_signUpRequireVerification(data));\n    }\n  };\n};\nexport var SignInScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(SignIn);","map":{"version":3,"names":["cx","React","injectIntl","connect","withRouter","compose","captchaLogin","Captcha","SignInComponent","TwoFactorAuth","EMAIL_REGEX","ERROR_EMPTY_PASSWORD","ERROR_INVALID_EMAIL","setDocumentTitle","resetCaptchaState","selectAlertState","selectCaptchaResponse","selectConfigs","selectGeetestCaptchaSuccess","selectRecaptchaSuccess","selectSignInError","selectSignInRequire2FA","selectSignUpRequireVerification","selectUserFetching","selectUserLoggedIn","signIn","signInError","signInRequire2FA","signUpRequireVerification","SignIn","state","email","emailError","emailFocused","password","passwordError","passwordFocused","otpCode","error2fa","codeFocused","renderCaptcha","error","props","renderSignInForm","configs","loading","captcha_response","reCaptchaSuccess","geetestCaptchaSuccess","intl","formatMessage","id","forgotPassword","handleSignUp","handleSignIn","handleFieldFocus","validateForm","refreshError","handleChangeEmailValue","handleChangePasswordValue","captcha_type","render2FA","handle2FASignIn","handleChangeOtpCode","handle2faFocus","handleClose","setState","value","otp_code","history","push","field","prev","isEmailValid","match","require2fa","code","message","requireVerification","nextProps","isLoggedIn","requireEmailVerification","require2FA","className","Component","mapStateToProps","alert","mapDispatchToProps","dispatch","data","payload","SignInScreen"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/screens/SignInScreen/index.tsx"],"sourcesContent":["import cx from 'classnames';\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect, MapDispatchToPropsFunction, MapStateToProps } from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { captchaLogin } from '../../api';\nimport { Captcha, SignInComponent, TwoFactorAuth } from '../../components';\nimport { EMAIL_REGEX, ERROR_EMPTY_PASSWORD, ERROR_INVALID_EMAIL, setDocumentTitle } from '../../helpers';\nimport {\n    Configs,\n    GeetestCaptchaResponse,\n    resetCaptchaState,\n    RootState,\n    selectAlertState,\n    selectCaptchaResponse,\n    selectConfigs,\n    selectGeetestCaptchaSuccess,\n    selectRecaptchaSuccess,\n    selectSignInError,\n    selectSignInRequire2FA,\n    selectSignUpRequireVerification,\n    selectUserFetching,\n    selectUserLoggedIn,\n    signIn,\n    signInError,\n    signInRequire2FA,\n    signUpRequireVerification,\n} from '../../modules';\nimport { CommonError } from '../../modules/types';\n\ninterface ReduxProps {\n    error?: CommonError;\n    isLoggedIn: boolean;\n    loading?: boolean;\n    require2FA?: boolean;\n    requireEmailVerification?: boolean;\n    configs: Configs;\n    captcha_response?: string | GeetestCaptchaResponse;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n}\n\ninterface DispatchProps {\n    signIn: typeof signIn;\n    signInError: typeof signInError;\n    signInRequire2FA: typeof signInRequire2FA;\n    resetCaptchaState: typeof resetCaptchaState;\n    signUpRequireVerification: typeof signUpRequireVerification;\n}\n\ninterface SignInState {\n    email: string;\n    emailError: string;\n    emailFocused: boolean;\n    password: string;\n    passwordError: string;\n    passwordFocused: boolean;\n    otpCode: string;\n    error2fa: string;\n    codeFocused: boolean;\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps;\n\nclass SignIn extends React.Component<Props, SignInState> {\n    public state = {\n        email: '',\n        emailError: '',\n        emailFocused: false,\n        password: '',\n        passwordError: '',\n        passwordFocused: false,\n        otpCode: '',\n        error2fa: '',\n        codeFocused: false,\n    };\n\n    public componentDidMount() {\n        setDocumentTitle('Sign In');\n        this.props.signInError({ code: 0, message: [''] });\n        this.props.signUpRequireVerification({requireVerification: false});\n    }\n\n    public componentWillReceiveProps(nextProps: Props) {\n        const { email } = this.state;\n\n        if (!this.props.isLoggedIn && nextProps.isLoggedIn) {\n            this.props.resetCaptchaState();\n            this.props.history.push('/wallets', { email: email });\n        }\n\n        if (nextProps.requireEmailVerification) {\n            this.props.history.push('/email-verification', { email: email });\n        }\n    }\n\n    public componentWillUnmount() {\n        this.props.resetCaptchaState();\n    }\n\n    public renderCaptcha = () => {\n        const { error } = this.props;\n\n        return (\n            <Captcha error={error} />\n        );\n    };\n\n    public render() {\n        const { loading, require2FA } = this.props;\n\n        const className = cx('pg-sign-in-screen__container', { loading });\n\n        return (\n            <div className=\"pg-sign-in-screen\">\n                <div className={className}>{require2FA ? this.render2FA() : this.renderSignInForm()}</div>\n            </div>\n        );\n    }\n\n    private renderSignInForm = () => {\n        const {\n            configs,\n            loading,\n            captcha_response,\n            reCaptchaSuccess,\n            geetestCaptchaSuccess,\n        } = this.props;\n        const { email, emailError, emailFocused, password, passwordError, passwordFocused } = this.state;\n\n        return (\n            <SignInComponent\n                email={email}\n                emailError={emailError}\n                emailFocused={emailFocused}\n                emailPlaceholder={this.props.intl.formatMessage({ id: 'page.header.signIn.email' })}\n                password={password}\n                passwordError={passwordError}\n                passwordFocused={passwordFocused}\n                passwordPlaceholder={this.props.intl.formatMessage({ id: 'page.header.signIn.password' })}\n                labelSignIn={this.props.intl.formatMessage({ id: 'page.header.signIn' })}\n                labelSignUp={this.props.intl.formatMessage({ id: 'page.header.signUp' })}\n                emailLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.email' })}\n                passwordLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.password' })}\n                receiveConfirmationLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.receiveConfirmation' })}\n                forgotPasswordLabel={this.props.intl.formatMessage({ id: 'page.header.signIn.forgotPassword' })}\n                isLoading={loading}\n                onForgotPassword={this.forgotPassword}\n                onSignUp={this.handleSignUp}\n                onSignIn={this.handleSignIn}\n                handleChangeFocusField={this.handleFieldFocus}\n                isFormValid={this.validateForm}\n                refreshError={this.refreshError}\n                changeEmail={this.handleChangeEmailValue}\n                changePassword={this.handleChangePasswordValue}\n                captchaType={configs.captcha_type}\n                renderCaptcha={this.renderCaptcha()}\n                reCaptchaSuccess={reCaptchaSuccess}\n                geetestCaptchaSuccess={geetestCaptchaSuccess}\n                captcha_response={captcha_response}\n            />\n        );\n    };\n\n    private render2FA = () => {\n        const { loading } = this.props;\n        const { otpCode, error2fa, codeFocused } = this.state;\n\n        return (\n            <TwoFactorAuth\n                isLoading={loading}\n                onSubmit={this.handle2FASignIn}\n                title={this.props.intl.formatMessage({ id: 'page.password2fa' })}\n                label={this.props.intl.formatMessage({ id: 'page.body.wallets.tabs.withdraw.content.code2fa' })}\n                buttonLabel={this.props.intl.formatMessage({ id: 'page.header.signIn' })}\n                message={this.props.intl.formatMessage({ id: 'page.password2fa.message' })}\n                codeFocused={codeFocused}\n                otpCode={otpCode}\n                error={error2fa}\n                handleOtpCodeChange={this.handleChangeOtpCode}\n                handleChangeFocusField={this.handle2faFocus}\n                handleClose2fa={this.handleClose}\n            />\n        );\n    };\n\n    private refreshError = () => {\n        this.setState({\n            emailError: '',\n            passwordError: '',\n        });\n    };\n\n    private handleChangeOtpCode = (value: string) => {\n        this.setState({\n            error2fa: '',\n            otpCode: value,\n        });\n    };\n\n    private handleSignIn = () => {\n        const { email, password } = this.state;\n        const { configs: { captcha_type }, captcha_response } = this.props;\n\n        if (captcha_type !== 'none' && captchaLogin()) {\n            this.props.signIn({ email, password, captcha_response });\n        } else {\n            this.props.signIn({ email, password });\n        }\n    };\n\n    private handle2FASignIn = () => {\n        const { email, password, otpCode } = this.state;\n        const { configs: { captcha_type }, captcha_response } = this.props;\n\n        if (!otpCode) {\n            this.setState({\n                error2fa: 'Please enter 2fa code',\n            });\n        } else {\n            if (captcha_type !== 'none' && captchaLogin()) {\n                this.props.signIn({ email, password, captcha_response, otp_code: otpCode });\n            } else {\n                this.props.signIn({ email, password, otp_code: otpCode });\n            }\n        }\n    };\n\n    private handleSignUp = () => {\n        this.props.history.push('/signup');\n    };\n\n    private forgotPassword = () => {\n        this.props.history.push('/forgot_password');\n    };\n\n    private handleFieldFocus = (field: string) => {\n        switch (field) {\n            case 'email':\n                this.setState(prev => ({\n                    emailFocused: !prev.emailFocused,\n                }));\n                break;\n            case 'password':\n                this.setState(prev => ({\n                    passwordFocused: !prev.passwordFocused,\n                }));\n                break;\n            default:\n                break;\n        }\n    };\n\n    private handle2faFocus = () => {\n        this.setState(prev => ({\n            codeFocused: !prev.codeFocused,\n        }));\n    };\n\n    private validateForm = () => {\n        const { email, password } = this.state;\n        const isEmailValid = email.match(EMAIL_REGEX);\n\n        if (!isEmailValid) {\n            this.setState({\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: '',\n            });\n\n            return;\n        }\n        if (!password) {\n            this.setState({\n                emailError: '',\n                passwordError: this.props.intl.formatMessage({ id: ERROR_EMPTY_PASSWORD }),\n            });\n\n            return;\n        }\n    };\n\n    private handleChangeEmailValue = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private handleChangePasswordValue = (value: string) => {\n        this.setState({\n            password: value,\n        });\n    };\n\n    private handleClose = () => {\n        this.props.signInRequire2FA({ require2fa: false });\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    alert: selectAlertState(state),\n    error: selectSignInError(state),\n    isLoggedIn: selectUserLoggedIn(state),\n    loading: selectUserFetching(state),\n    require2FA: selectSignInRequire2FA(state),\n    requireEmailVerification: selectSignUpRequireVerification(state),\n    configs: selectConfigs(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> = dispatch => ({\n    signIn: data => dispatch(signIn(data)),\n    signInError: error => dispatch(signInError(error)),\n    signInRequire2FA: payload => dispatch(signInRequire2FA(payload)),\n    resetCaptchaState: () => dispatch(resetCaptchaState()),\n    signUpRequireVerification: data => dispatch(signUpRequireVerification(data)),\n});\n\nexport const SignInScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(SignIn) as React.ComponentClass;\n"],"mappings":";;;;;;AAAA,OAAOA,EAAE,MAAM,YAAY;AAC3B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,YAAY;AACvC,SAASC,OAAO,QAAqD,aAAa;AAElF,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,YAAY,QAAQ,WAAW;AACxC,SAASC,OAAO,EAAEC,eAAe,EAAEC,aAAa,QAAQ,kBAAkB;AAC1E,SAASC,WAAW,EAAEC,oBAAoB,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,eAAe;AACxG,SAGIC,iBAAiB,IAAjBA,kBAAiB,EAEjBC,gBAAgB,EAChBC,qBAAqB,EACrBC,aAAa,EACbC,2BAA2B,EAC3BC,sBAAsB,EACtBC,iBAAiB,EACjBC,sBAAsB,EACtBC,+BAA+B,EAC/BC,kBAAkB,EAClBC,kBAAkB,EAClBC,MAAM,IAANA,OAAM,EACNC,WAAW,IAAXA,YAAW,EACXC,gBAAgB,IAAhBA,iBAAgB,EAChBC,yBAAyB,IAAzBA,0BAAyB,QACtB,eAAe;AAAC,IAqCjBC,MAAM;EAAA;EAAA;EAAA;IAAA;IAAA;IAAA;MAAA;IAAA;IAAA;IAAA,MACDC,KAAK,GAAG;MACXC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE,EAAE;MACjBC,eAAe,EAAE,KAAK;MACtBC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE;IACjB,CAAC;IAAA,MAyBMC,aAAa,GAAG,YAAM;MACzB,IAAQC,KAAK,GAAK,MAAKC,KAAK,CAApBD,KAAK;MAEb,oBACI,oBAAC,OAAO;QAAC,KAAK,EAAEA,KAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG;IAEjC,CAAC;IAAA,MAcOE,gBAAgB,GAAG,YAAM;MAC7B,kBAMI,MAAKD,KAAK;QALVE,OAAO,eAAPA,OAAO;QACPC,OAAO,eAAPA,OAAO;QACPC,gBAAgB,eAAhBA,gBAAgB;QAChBC,gBAAgB,eAAhBA,gBAAgB;QAChBC,qBAAqB,eAArBA,qBAAqB;MAEzB,kBAAsF,MAAKlB,KAAK;QAAxFC,KAAK,eAALA,KAAK;QAAEC,UAAU,eAAVA,UAAU;QAAEC,YAAY,eAAZA,YAAY;QAAEC,QAAQ,eAARA,QAAQ;QAAEC,aAAa,eAAbA,aAAa;QAAEC,eAAe,eAAfA,eAAe;MAEjF,oBACI,oBAAC,eAAe;QACZ,KAAK,EAAEL,KAAM;QACb,UAAU,EAAEC,UAAW;QACvB,YAAY,EAAEC,YAAa;QAC3B,gBAAgB,EAAE,MAAKS,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAA2B,CAAC,CAAE;QACpF,QAAQ,EAAEjB,QAAS;QACnB,aAAa,EAAEC,aAAc;QAC7B,eAAe,EAAEC,eAAgB;QACjC,mBAAmB,EAAE,MAAKM,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAA8B,CAAC,CAAE;QAC1F,WAAW,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAqB,CAAC,CAAE;QACzE,WAAW,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAqB,CAAC,CAAE;QACzE,UAAU,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAA2B,CAAC,CAAE;QAC9E,aAAa,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAA8B,CAAC,CAAE;QACpF,wBAAwB,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAyC,CAAC,CAAE;QAC1G,mBAAmB,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAoC,CAAC,CAAE;QAChG,SAAS,EAAEN,OAAQ;QACnB,gBAAgB,EAAE,MAAKO,cAAe;QACtC,QAAQ,EAAE,MAAKC,YAAa;QAC5B,QAAQ,EAAE,MAAKC,YAAa;QAC5B,sBAAsB,EAAE,MAAKC,gBAAiB;QAC9C,WAAW,EAAE,MAAKC,YAAa;QAC/B,YAAY,EAAE,MAAKC,YAAa;QAChC,WAAW,EAAE,MAAKC,sBAAuB;QACzC,cAAc,EAAE,MAAKC,yBAA0B;QAC/C,WAAW,EAAEf,OAAO,CAACgB,YAAa;QAClC,aAAa,EAAE,MAAKpB,aAAa,EAAG;QACpC,gBAAgB,EAAEO,gBAAiB;QACnC,qBAAqB,EAAEC,qBAAsB;QAC7C,gBAAgB,EAAEF,gBAAiB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACrC;IAEV,CAAC;IAAA,MAEOe,SAAS,GAAG,YAAM;MACtB,IAAQhB,OAAO,GAAK,MAAKH,KAAK,CAAtBG,OAAO;MACf,mBAA2C,MAAKf,KAAK;QAA7CO,OAAO,gBAAPA,OAAO;QAAEC,QAAQ,gBAARA,QAAQ;QAAEC,WAAW,gBAAXA,WAAW;MAEtC,oBACI,oBAAC,aAAa;QACV,SAAS,EAAEM,OAAQ;QACnB,QAAQ,EAAE,MAAKiB,eAAgB;QAC/B,KAAK,EAAE,MAAKpB,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAmB,CAAC,CAAE;QACjE,KAAK,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAkD,CAAC,CAAE;QAChG,WAAW,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAAqB,CAAC,CAAE;QACzE,OAAO,EAAE,MAAKT,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;UAAEC,EAAE,EAAE;QAA2B,CAAC,CAAE;QAC3E,WAAW,EAAEZ,WAAY;QACzB,OAAO,EAAEF,OAAQ;QACjB,KAAK,EAAEC,QAAS;QAChB,mBAAmB,EAAE,MAAKyB,mBAAoB;QAC9C,sBAAsB,EAAE,MAAKC,cAAe;QAC5C,cAAc,EAAE,MAAKC,WAAY;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACnC;IAEV,CAAC;IAAA,MAEOR,YAAY,GAAG,YAAM;MACzB,MAAKS,QAAQ,CAAC;QACVlC,UAAU,EAAE,EAAE;QACdG,aAAa,EAAE;MACnB,CAAC,CAAC;IACN,CAAC;IAAA,MAEO4B,mBAAmB,GAAG,UAACI,KAAa,EAAK;MAC7C,MAAKD,QAAQ,CAAC;QACV5B,QAAQ,EAAE,EAAE;QACZD,OAAO,EAAE8B;MACb,CAAC,CAAC;IACN,CAAC;IAAA,MAEOb,YAAY,GAAG,YAAM;MACzB,mBAA4B,MAAKxB,KAAK;QAA9BC,KAAK,gBAALA,KAAK;QAAEG,QAAQ,gBAARA,QAAQ;MACvB,mBAAwD,MAAKQ,KAAK;QAA/CkB,YAAY,gBAAvBhB,OAAO,CAAIgB,YAAY;QAAId,gBAAgB,gBAAhBA,gBAAgB;MAEnD,IAAIc,YAAY,KAAK,MAAM,IAAItD,YAAY,EAAE,EAAE;QAC3C,MAAKoC,KAAK,CAACjB,MAAM,CAAC;UAAEM,KAAK,EAALA,KAAK;UAAEG,QAAQ,EAARA,QAAQ;UAAEY,gBAAgB,EAAhBA;QAAiB,CAAC,CAAC;MAC5D,CAAC,MAAM;QACH,MAAKJ,KAAK,CAACjB,MAAM,CAAC;UAAEM,KAAK,EAALA,KAAK;UAAEG,QAAQ,EAARA;QAAS,CAAC,CAAC;MAC1C;IACJ,CAAC;IAAA,MAEO4B,eAAe,GAAG,YAAM;MAC5B,mBAAqC,MAAKhC,KAAK;QAAvCC,KAAK,gBAALA,KAAK;QAAEG,QAAQ,gBAARA,QAAQ;QAAEG,OAAO,gBAAPA,OAAO;MAChC,mBAAwD,MAAKK,KAAK;QAA/CkB,YAAY,gBAAvBhB,OAAO,CAAIgB,YAAY;QAAId,gBAAgB,gBAAhBA,gBAAgB;MAEnD,IAAI,CAACT,OAAO,EAAE;QACV,MAAK6B,QAAQ,CAAC;UACV5B,QAAQ,EAAE;QACd,CAAC,CAAC;MACN,CAAC,MAAM;QACH,IAAIsB,YAAY,KAAK,MAAM,IAAItD,YAAY,EAAE,EAAE;UAC3C,MAAKoC,KAAK,CAACjB,MAAM,CAAC;YAAEM,KAAK,EAALA,KAAK;YAAEG,QAAQ,EAARA,QAAQ;YAAEY,gBAAgB,EAAhBA,gBAAgB;YAAEsB,QAAQ,EAAE/B;UAAQ,CAAC,CAAC;QAC/E,CAAC,MAAM;UACH,MAAKK,KAAK,CAACjB,MAAM,CAAC;YAAEM,KAAK,EAALA,KAAK;YAAEG,QAAQ,EAARA,QAAQ;YAAEkC,QAAQ,EAAE/B;UAAQ,CAAC,CAAC;QAC7D;MACJ;IACJ,CAAC;IAAA,MAEOgB,YAAY,GAAG,YAAM;MACzB,MAAKX,KAAK,CAAC2B,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC;IACtC,CAAC;IAAA,MAEOlB,cAAc,GAAG,YAAM;MAC3B,MAAKV,KAAK,CAAC2B,OAAO,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAC/C,CAAC;IAAA,MAEOf,gBAAgB,GAAG,UAACgB,KAAa,EAAK;MAC1C,QAAQA,KAAK;QACT,KAAK,OAAO;UACR,MAAKL,QAAQ,CAAC,UAAAM,IAAI;YAAA,OAAK;cACnBvC,YAAY,EAAE,CAACuC,IAAI,CAACvC;YACxB,CAAC;UAAA,CAAC,CAAC;UACH;QACJ,KAAK,UAAU;UACX,MAAKiC,QAAQ,CAAC,UAAAM,IAAI;YAAA,OAAK;cACnBpC,eAAe,EAAE,CAACoC,IAAI,CAACpC;YAC3B,CAAC;UAAA,CAAC,CAAC;UACH;QACJ;UACI;MAAM;IAElB,CAAC;IAAA,MAEO4B,cAAc,GAAG,YAAM;MAC3B,MAAKE,QAAQ,CAAC,UAAAM,IAAI;QAAA,OAAK;UACnBjC,WAAW,EAAE,CAACiC,IAAI,CAACjC;QACvB,CAAC;MAAA,CAAC,CAAC;IACP,CAAC;IAAA,MAEOiB,YAAY,GAAG,YAAM;MACzB,mBAA4B,MAAK1B,KAAK;QAA9BC,KAAK,gBAALA,KAAK;QAAEG,QAAQ,gBAARA,QAAQ;MACvB,IAAMuC,YAAY,GAAG1C,KAAK,CAAC2C,KAAK,CAAChE,WAAW,CAAC;MAE7C,IAAI,CAAC+D,YAAY,EAAE;QACf,MAAKP,QAAQ,CAAC;UACVlC,UAAU,EAAE,MAAKU,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;YAAEC,EAAE,EAAEvC;UAAoB,CAAC,CAAC;UACtEuB,aAAa,EAAE;QACnB,CAAC,CAAC;QAEF;MACJ;MACA,IAAI,CAACD,QAAQ,EAAE;QACX,MAAKgC,QAAQ,CAAC;UACVlC,UAAU,EAAE,EAAE;UACdG,aAAa,EAAE,MAAKO,KAAK,CAACO,IAAI,CAACC,aAAa,CAAC;YAAEC,EAAE,EAAExC;UAAqB,CAAC;QAC7E,CAAC,CAAC;QAEF;MACJ;IACJ,CAAC;IAAA,MAEO+C,sBAAsB,GAAG,UAACS,KAAa,EAAK;MAChD,MAAKD,QAAQ,CAAC;QACVnC,KAAK,EAAEoC;MACX,CAAC,CAAC;IACN,CAAC;IAAA,MAEOR,yBAAyB,GAAG,UAACQ,KAAa,EAAK;MACnD,MAAKD,QAAQ,CAAC;QACVhC,QAAQ,EAAEiC;MACd,CAAC,CAAC;IACN,CAAC;IAAA,MAEOF,WAAW,GAAG,YAAM;MACxB,MAAKvB,KAAK,CAACf,gBAAgB,CAAC;QAAEgD,UAAU,EAAE;MAAM,CAAC,CAAC;IACtD,CAAC;IAAA;EAAA;EAAA;IAAA;IAAA,OA1ND,6BAA2B;MACvB9D,gBAAgB,CAAC,SAAS,CAAC;MAC3B,IAAI,CAAC6B,KAAK,CAAChB,WAAW,CAAC;QAAEkD,IAAI,EAAE,CAAC;QAAEC,OAAO,EAAE,CAAC,EAAE;MAAE,CAAC,CAAC;MAClD,IAAI,CAACnC,KAAK,CAACd,yBAAyB,CAAC;QAACkD,mBAAmB,EAAE;MAAK,CAAC,CAAC;IACtE;EAAC;IAAA;IAAA,OAED,mCAAiCC,SAAgB,EAAE;MAC/C,IAAQhD,KAAK,GAAK,IAAI,CAACD,KAAK,CAApBC,KAAK;MAEb,IAAI,CAAC,IAAI,CAACW,KAAK,CAACsC,UAAU,IAAID,SAAS,CAACC,UAAU,EAAE;QAChD,IAAI,CAACtC,KAAK,CAAC5B,iBAAiB,EAAE;QAC9B,IAAI,CAAC4B,KAAK,CAAC2B,OAAO,CAACC,IAAI,CAAC,UAAU,EAAE;UAAEvC,KAAK,EAAEA;QAAM,CAAC,CAAC;MACzD;MAEA,IAAIgD,SAAS,CAACE,wBAAwB,EAAE;QACpC,IAAI,CAACvC,KAAK,CAAC2B,OAAO,CAACC,IAAI,CAAC,qBAAqB,EAAE;UAAEvC,KAAK,EAAEA;QAAM,CAAC,CAAC;MACpE;IACJ;EAAC;IAAA;IAAA,OAED,gCAA8B;MAC1B,IAAI,CAACW,KAAK,CAAC5B,iBAAiB,EAAE;IAClC;EAAC;IAAA;IAAA,OAUD,kBAAgB;MACZ,mBAAgC,IAAI,CAAC4B,KAAK;QAAlCG,OAAO,gBAAPA,OAAO;QAAEqC,UAAU,gBAAVA,UAAU;MAE3B,IAAMC,SAAS,GAAGnF,EAAE,CAAC,8BAA8B,EAAE;QAAE6C,OAAO,EAAPA;MAAQ,CAAC,CAAC;MAEjE,oBACI;QAAK,SAAS,EAAC,mBAAmB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBAC9B;QAAK,SAAS,EAAEsC,SAAU;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAED,UAAU,GAAG,IAAI,CAACrB,SAAS,EAAE,GAAG,IAAI,CAAClB,gBAAgB,EAAE,CAAO,CACxF;IAEd;EAAC;EAAA;AAAA,EAtDgB1C,KAAK,CAACmF,SAAS;AA0OpC,IAAMC,eAA2D,GAAG,SAA9DA,eAA2D,CAAGvD,KAAK;EAAA,OAAK;IAC1EwD,KAAK,EAAEvE,gBAAgB,CAACe,KAAK,CAAC;IAC9BW,KAAK,EAAErB,iBAAiB,CAACU,KAAK,CAAC;IAC/BkD,UAAU,EAAExD,kBAAkB,CAACM,KAAK,CAAC;IACrCe,OAAO,EAAEtB,kBAAkB,CAACO,KAAK,CAAC;IAClCoD,UAAU,EAAE7D,sBAAsB,CAACS,KAAK,CAAC;IACzCmD,wBAAwB,EAAE3D,+BAA+B,CAACQ,KAAK,CAAC;IAChEc,OAAO,EAAE3B,aAAa,CAACa,KAAK,CAAC;IAC7BgB,gBAAgB,EAAE9B,qBAAqB,CAACc,KAAK,CAAC;IAC9CiB,gBAAgB,EAAE5B,sBAAsB,CAACW,KAAK,CAAC;IAC/CkB,qBAAqB,EAAE9B,2BAA2B,CAACY,KAAK;EAC5D,CAAC;AAAA,CAAC;AAEF,IAAMyD,kBAAiE,GAAG,SAApEA,kBAAiE,CAAGC,QAAQ;EAAA,OAAK;IACnF/D,MAAM,EAAE,gBAAAgE,IAAI;MAAA,OAAID,QAAQ,CAAC/D,OAAM,CAACgE,IAAI,CAAC,CAAC;IAAA;IACtC/D,WAAW,EAAE,qBAAAe,KAAK;MAAA,OAAI+C,QAAQ,CAAC9D,YAAW,CAACe,KAAK,CAAC,CAAC;IAAA;IAClDd,gBAAgB,EAAE,0BAAA+D,OAAO;MAAA,OAAIF,QAAQ,CAAC7D,iBAAgB,CAAC+D,OAAO,CAAC,CAAC;IAAA;IAChE5E,iBAAiB,EAAE;MAAA,OAAM0E,QAAQ,CAAC1E,kBAAiB,EAAE,CAAC;IAAA;IACtDc,yBAAyB,EAAE,mCAAA6D,IAAI;MAAA,OAAID,QAAQ,CAAC5D,0BAAyB,CAAC6D,IAAI,CAAC,CAAC;IAAA;EAChF,CAAC;AAAA,CAAC;AAEF,OAAO,IAAME,YAAY,GAAGtF,OAAO,CAC/BH,UAAU,EACVE,UAAU,EACVD,OAAO,CAACkF,eAAe,EAAEE,kBAAkB,CAAC,CAC/C,CAAC1D,MAAM,CAAyB"},"metadata":{},"sourceType":"module"}