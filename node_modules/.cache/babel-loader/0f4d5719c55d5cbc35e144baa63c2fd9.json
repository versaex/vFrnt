{"ast":null,"code":"// Base58 encoding/decoding\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nvar ALPHABET_MAP = {};\nfor (var i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n}\nvar BASE = 58;\nfunction encode(buffer) {\n  if (buffer.length === 0) return '';\n  var i,\n    j,\n    digits = [0];\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) {\n      digits[j] <<= 8;\n    }\n    digits[0] += buffer[i];\n    var carry = 0;\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry;\n      carry = digits[j] / BASE | 0;\n      digits[j] %= BASE;\n    }\n    while (carry) {\n      digits.push(carry % BASE);\n      carry = carry / BASE | 0;\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) {\n    digits.push(0);\n  }\n  return digits.reverse().map(function (digit) {\n    return ALPHABET[digit];\n  }).join('');\n}\nfunction decode(string) {\n  if (string.length === 0) return [];\n  var i,\n    j,\n    bytes = [0];\n  for (i = 0; i < string.length; i++) {\n    var c = string[i];\n    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');\n    for (j = 0; j < bytes.length; j++) {\n      bytes[j] *= BASE;\n    }\n    bytes[0] += ALPHABET_MAP[c];\n    var carry = 0;\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry;\n      carry = bytes[j] >> 8;\n      bytes[j] &= 0xff;\n    }\n    while (carry) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; string[i] === '1' && i < string.length - 1; i++) {\n    bytes.push(0);\n  }\n  return bytes.reverse();\n}\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};","map":{"version":3,"names":["ALPHABET","ALPHABET_MAP","i","length","charAt","BASE","encode","buffer","j","digits","carry","push","reverse","map","digit","join","decode","string","bytes","c","Error","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bs58/lib/bs58.js"],"sourcesContent":["// Base58 encoding/decoding\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nvar ALPHABET_MAP = {}\nfor(var i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i\n}\nvar BASE = 58\n\nfunction encode(buffer) {\n  if (buffer.length === 0) return ''\n\n  var i, j, digits = [0]\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) digits[j] <<= 8\n\n    digits[0] += buffer[i]\n\n    var carry = 0\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry\n\n      carry = (digits[j] / BASE) | 0\n      digits[j] %= BASE\n    }\n\n    while (carry) {\n      digits.push(carry % BASE)\n\n      carry = (carry / BASE) | 0\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0)\n\n  return digits.reverse().map(function(digit) { return ALPHABET[digit] }).join('')\n}\n\nfunction decode(string) {\n  if (string.length === 0) return []\n\n  var i, j, bytes = [0]\n  for (i = 0; i < string.length; i++) {\n    var c = string[i]\n    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')\n\n    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE\n    bytes[0] += ALPHABET_MAP[c]\n\n    var carry = 0\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry\n\n      carry = bytes[j] >> 8\n      bytes[j] &= 0xff\n    }\n\n    while (carry) {\n      bytes.push(carry & 0xff)\n\n      carry >>= 8\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0)\n\n  return bytes.reverse()\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}