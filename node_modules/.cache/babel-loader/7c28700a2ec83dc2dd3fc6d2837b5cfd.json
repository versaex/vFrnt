{"ast":null,"code":"'use strict';\n\nvar bn = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar getNAF = elliptic.utils.getNAF;\nvar getJSF = elliptic.utils.getJSF;\nvar assert = elliptic.utils.assert;\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new bn(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new bn(0).toRed(this.red);\n  this.one = new bn(1).toRed(this.red);\n  this.two = new bn(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new bn(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n}\nmodule.exports = BaseCurve;\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  var doubles = p._getDoubles();\n  var naf = getNAF(k, 1);\n  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--) {\n      nafW = (nafW << 1) + naf[k];\n    }\n    repr.push(nafW);\n  }\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--) {\n      k++;\n    }\n    if (i >= 0) k++;\n    acc = acc.dblp(k);\n    if (i < 0) break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n    var comb = [points[a], /* 1 */\n    null, /* 3 */\n    null, /* 5 */\n    points[b] /* 7 */];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n    var index = [-3, /* -1 -1 */\n    -1, /* -1 0 */\n    -5, /* -1 1 */\n    -7, /* 0 -1 */\n    0, /* 0 0 */\n    7, /* 0 1 */\n    5, /* 1 -1 */\n    1, /* 1 0 */\n    3 /* 1 1 */];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0) zero = false;\n      }\n      if (!zero) break;\n      k++;\n      i--;\n    }\n    if (i >= 0) k++;\n    acc = acc.dblp(k);\n    if (i < 0) break;\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++) {\n    wnd[i] = null;\n  }\n  return acc.toP();\n};\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed) return this;\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n  return this;\n};\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n  var doubles = [this];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++) {\n      acc = acc.dbl();\n    }\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n  var res = [this];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++) {\n    res[i] = res[i - 1].add(dbl);\n  }\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++) {\n    r = r.dbl();\n  }\n  return r;\n};","map":{"version":3,"names":["bn","require","elliptic","getNAF","utils","getJSF","assert","BaseCurve","type","conf","p","red","prime","mont","zero","toRed","one","two","n","g","pointFromJSON","gRed","_wnafT1","Array","_wnafT2","_wnafT3","_wnafT4","module","exports","prototype","point","Error","validate","_fixedNafMul","k","doubles","_getDoubles","naf","I","step","repr","j","length","nafW","push","a","jpoint","b","i","mixedAdd","points","neg","add","toP","_wnafMul","w","nafPoints","_getNAFPoints","wnd","acc","dblp","z","_wnafMulAdd","defW","coeffs","len","wndWidth","max","Math","comb","y","cmp","toJ","redNeg","index","jsf","ja","jb","tmp","BasePoint","curve","precomputed","precompute","power","beta","_getBeta","dbl","res","r"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/node_modules/elliptic/lib/elliptic/curve/base.js"],"sourcesContent":["'use strict';\n\nvar bn = require('bn.js');\nvar elliptic = require('../../elliptic');\n\nvar getNAF = elliptic.utils.getNAF;\nvar getJSF = elliptic.utils.getJSF;\nvar assert = elliptic.utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new bn(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new bn(0).toRed(this.red);\n  this.one = new bn(1).toRed(this.red);\n  this.two = new bn(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new bn(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n  return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}