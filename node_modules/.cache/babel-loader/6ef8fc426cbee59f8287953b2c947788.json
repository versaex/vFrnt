{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcGridColWidth = calcGridColWidth;\nexports.calcGridItemPosition = calcGridItemPosition;\nexports.calcXY = calcXY;\nexports.calcWH = calcWH;\n\n/*:: import type { Position } from \"./utils\";*/\n\n/*:: export type PositionParams = {\n  margin: [number, number],\n  containerPadding: [number, number],\n  containerWidth: number,\n  cols: number,\n  rowHeight: number,\n  maxRows: number\n};*/\n// Helper for generating column width\nfunction calcGridColWidth(positionParams\n/*: PositionParams*/) /*: number*/\n{\n  var margin = positionParams.margin,\n    containerPadding = positionParams.containerPadding,\n    containerWidth = positionParams.containerWidth,\n    cols = positionParams.cols;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n}\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\n\nfunction calcGridItemPosition(positionParams\n/*: PositionParams*/, x\n/*: number*/, y\n/*: number*/, w\n/*: number*/, h\n/*: number*/, state\n/*: ?Object*/) /*: Position*/\n{\n  var margin = positionParams.margin,\n    containerPadding = positionParams.containerPadding,\n    rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams);\n  var out = {}; // If resizing, use the exact width and height as returned from resizing callbacks.\n\n  if (state && state.resizing) {\n    out.width = Math.round(state.resizing.width);\n    out.height = Math.round(state.resizing.height);\n  } // Otherwise, calculate from grid units.\n  else {\n    // 0 * Infinity === NaN, which causes problems with resize constraints;\n    // Fix this if it occurs.\n    // Note we do it here rather than later because Math.round(Infinity) causes deopt\n    out.width = w === Infinity ? w : Math.round(colWidth * w + Math.max(0, w - 1) * margin[0]);\n    out.height = h === Infinity ? h : Math.round(rowHeight * h + Math.max(0, h - 1) * margin[1]);\n  } // If dragging, use the exact width and height as returned from dragging callbacks.\n\n  if (state && state.dragging) {\n    out.top = Math.round(state.dragging.top);\n    out.left = Math.round(state.dragging.left);\n  } // Otherwise, calculate from grid units.\n  else {\n    out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);\n    out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);\n  }\n  return out;\n}\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\n\nfunction calcXY(positionParams\n/*: PositionParams*/, top\n/*: number*/, left\n/*: number*/, w\n/*: number*/, h\n/*: number*/) /*: { x: number, y: number }*/\n{\n  var margin = positionParams.margin,\n    cols = positionParams.cols,\n    rowHeight = positionParams.rowHeight,\n    maxRows = positionParams.maxRows;\n  var colWidth = calcGridColWidth(positionParams); // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n\n  var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  var y = Math.round((top - margin[1]) / (rowHeight + margin[1])); // Capping\n\n  x = Math.max(Math.min(x, cols - w), 0);\n  y = Math.max(Math.min(y, maxRows - h), 0);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @return {Object}                         w, h as grid units.\n */\n\nfunction calcWH(positionParams\n/*: PositionParams*/, width\n/*: number*/, height\n/*: number*/, x\n/*: number*/, y\n/*: number*/) /*: { w: number, h: number }*/\n{\n  var margin = positionParams.margin,\n    maxRows = positionParams.maxRows,\n    cols = positionParams.cols,\n    rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams); // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n\n  var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  var h = Math.round((height + margin[1]) / (rowHeight + margin[1])); // Capping\n\n  w = Math.max(Math.min(w, cols - x), 0);\n  h = Math.max(Math.min(h, maxRows - y), 0);\n  return {\n    w: w,\n    h: h\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","calcGridColWidth","calcGridItemPosition","calcXY","calcWH","positionParams","margin","containerPadding","containerWidth","cols","x","y","w","h","state","rowHeight","colWidth","out","resizing","width","Math","round","height","Infinity","max","dragging","top","left","maxRows","min"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/react-grid-layout/build/calculateUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.calcGridColWidth = calcGridColWidth;\nexports.calcGridItemPosition = calcGridItemPosition;\nexports.calcXY = calcXY;\nexports.calcWH = calcWH;\n\n/*:: import type { Position } from \"./utils\";*/\n\n/*:: export type PositionParams = {\n  margin: [number, number],\n  containerPadding: [number, number],\n  containerWidth: number,\n  cols: number,\n  rowHeight: number,\n  maxRows: number\n};*/\n// Helper for generating column width\nfunction calcGridColWidth(positionParams\n/*: PositionParams*/\n)\n/*: number*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      containerWidth = positionParams.containerWidth,\n      cols = positionParams.cols;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n}\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\n\n\nfunction calcGridItemPosition(positionParams\n/*: PositionParams*/\n, x\n/*: number*/\n, y\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n, state\n/*: ?Object*/\n)\n/*: Position*/\n{\n  var margin = positionParams.margin,\n      containerPadding = positionParams.containerPadding,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams);\n  var out = {}; // If resizing, use the exact width and height as returned from resizing callbacks.\n\n  if (state && state.resizing) {\n    out.width = Math.round(state.resizing.width);\n    out.height = Math.round(state.resizing.height);\n  } // Otherwise, calculate from grid units.\n  else {\n      // 0 * Infinity === NaN, which causes problems with resize constraints;\n      // Fix this if it occurs.\n      // Note we do it here rather than later because Math.round(Infinity) causes deopt\n      out.width = w === Infinity ? w : Math.round(colWidth * w + Math.max(0, w - 1) * margin[0]);\n      out.height = h === Infinity ? h : Math.round(rowHeight * h + Math.max(0, h - 1) * margin[1]);\n    } // If dragging, use the exact width and height as returned from dragging callbacks.\n\n\n  if (state && state.dragging) {\n    out.top = Math.round(state.dragging.top);\n    out.left = Math.round(state.dragging.left);\n  } // Otherwise, calculate from grid units.\n  else {\n      out.top = Math.round((rowHeight + margin[1]) * y + containerPadding[1]);\n      out.left = Math.round((colWidth + margin[0]) * x + containerPadding[0]);\n    }\n\n  return out;\n}\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\n\n\nfunction calcXY(positionParams\n/*: PositionParams*/\n, top\n/*: number*/\n, left\n/*: number*/\n, w\n/*: number*/\n, h\n/*: number*/\n)\n/*: { x: number, y: number }*/\n{\n  var margin = positionParams.margin,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight,\n      maxRows = positionParams.maxRows;\n  var colWidth = calcGridColWidth(positionParams); // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n\n  var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  var y = Math.round((top - margin[1]) / (rowHeight + margin[1])); // Capping\n\n  x = Math.max(Math.min(x, cols - w), 0);\n  y = Math.max(Math.min(y, maxRows - h), 0);\n  return {\n    x: x,\n    y: y\n  };\n}\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @return {Object}                         w, h as grid units.\n */\n\n\nfunction calcWH(positionParams\n/*: PositionParams*/\n, width\n/*: number*/\n, height\n/*: number*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: { w: number, h: number }*/\n{\n  var margin = positionParams.margin,\n      maxRows = positionParams.maxRows,\n      cols = positionParams.cols,\n      rowHeight = positionParams.rowHeight;\n  var colWidth = calcGridColWidth(positionParams); // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n\n  var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  var h = Math.round((height + margin[1]) / (rowHeight + margin[1])); // Capping\n\n  w = Math.max(Math.min(w, cols - x), 0);\n  h = Math.max(Math.min(h, maxRows - y), 0);\n  return {\n    w: w,\n    h: h\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}