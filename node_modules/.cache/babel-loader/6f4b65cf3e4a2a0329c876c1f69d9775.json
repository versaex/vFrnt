{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../../util/preconditions');\nvar errors = require('../../errors');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar buffer = require('buffer');\nvar BufferUtil = require('../../util/buffer');\nvar JSUtil = require('../../util/js');\nvar Script = require('../../script');\nvar Sighash = require('../sighash');\nvar Output = require('../output');\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n  if (params) {\n    return this._fromObject(params);\n  }\n}\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function get() {\n    if (this.isNull()) {\n      return null;\n    }\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n    return this._script;\n  }\n});\nInput.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\nInput.prototype._fromObject = function (params) {\n  var prevTxId;\n  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = new buffer.Buffer(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n  this.output = params.output ? params.output instanceof Output ? params.output : new Output(params.output) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = _.isUndefined(params.sequenceNumber) ? _.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum : params.sequenceNumber;\n  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex')\n  };\n  // add human readable form if input contains valid script\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n  return obj;\n};\nInput.fromBufferReader = function (br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE();\n  // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n  return input;\n};\nInput.prototype.toBufferWriter = function (writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\nInput.prototype.setScript = function (script) {\n  this._script = null;\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = new buffer.Buffer(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = new buffer.Buffer(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n  return this;\n};\n\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\nInput.prototype.getSignatures = function () {\n  throw new errors.AbstractMethodInvoked('Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' + ' for input: ' + JSON.stringify(this));\n};\nInput.prototype.isFullySigned = function () {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\nInput.prototype.isFinal = function () {\n  return this.sequenceNumber !== 4294967295;\n};\nInput.prototype.addSignature = function () {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\nInput.prototype.clearSignatures = function () {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\nInput.prototype.isValidSignature = function (transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script, this.output.satoshisBN);\n};\n\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\nInput.prototype.isNull = function () {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' && this.outputIndex === 0xffffffff;\n};\nInput.prototype._estimateSize = function () {\n  return this.toBufferWriter().toBuffer().length;\n};\nmodule.exports = Input;","map":{"version":3,"names":["_","require","$","errors","BufferWriter","buffer","BufferUtil","JSUtil","Script","Sighash","Output","MAXINT","DEFAULT_RBF_SEQNUMBER","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","Input","params","_fromObject","Object","defineProperty","prototype","configurable","enumerable","get","isNull","_script","_scriptBuffer","_isInput","fromObject","obj","checkArgument","isObject","input","prevTxId","isString","isHexa","Buffer","output","undefined","txidbuf","outputIndex","isUndefined","txoutnum","sequenceNumber","seqnum","script","scriptBuffer","Transaction","MissingScript","setScript","toObject","toJSON","toString","scriptString","fromBufferReader","br","readReverse","readUInt32LE","readVarLengthBuffer","toBufferWriter","writer","writeReverse","writeUInt32LE","writeVarintNum","length","write","toBuffer","isBuffer","TypeError","getSignatures","AbstractMethodInvoked","JSON","stringify","isFullySigned","isFinal","addSignature","clearSignatures","isValidSignature","transaction","signature","nhashtype","sigtype","verify","publicKey","inputIndex","satoshisBN","_estimateSize","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/transaction/input/input.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../../util/preconditions');\nvar errors = require('../../errors');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar buffer = require('buffer');\nvar BufferUtil = require('../../util/buffer');\nvar JSUtil = require('../../util/js');\nvar Script = require('../../script');\nvar Sighash = require('../sighash');\nvar Output = require('../output');\n\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\n\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\n\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    if (this.isNull()) {\n      return null;\n    }\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n    return this._script;\n  }\n});\n\nInput.fromObject = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\n\nInput.prototype._fromObject = function(params) {\n  var prevTxId;\n  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = new buffer.Buffer(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n  this.output = params.output ?\n    (params.output instanceof Output ? params.output : new Output(params.output)) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = _.isUndefined(params.sequenceNumber) ?\n    (_.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum) : params.sequenceNumber;\n  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\n\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex'),\n  };\n  // add human readable form if input contains valid script\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n  return obj;\n};\n\nInput.fromBufferReader = function(br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE();\n  // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n  return input;\n};\n\nInput.prototype.toBufferWriter = function(writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\n\nInput.prototype.setScript = function(script) {\n  this._script = null;\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = new buffer.Buffer(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = new buffer.Buffer(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n  return this;\n};\n\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\nInput.prototype.getSignatures = function() {\n  throw new errors.AbstractMethodInvoked(\n    'Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' +\n    ' for input: ' + JSON.stringify(this)\n  );\n};\n\nInput.prototype.isFullySigned = function() {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\n\nInput.prototype.isFinal = function() {\n  return this.sequenceNumber !== 4294967295;\n};\n\nInput.prototype.addSignature = function() {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\n\nInput.prototype.clearSignatures = function() {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\n\nInput.prototype.isValidSignature = function(transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script,\n    this.output.satoshisBN\n  );\n};\n\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\nInput.prototype.isNull = function() {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' &&\n    this.outputIndex === 0xffffffff;\n};\n\nInput.prototype._estimateSize = function() {\n  return this.toBufferWriter().toBuffer().length;\n};\n\nmodule.exports = Input;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}