{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n  return r;\n};\nimport { isPluralElement, isLiteralElement, isSelectElement } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n  els.forEach(function (el) {\n    // If we're encountering a plural el\n    if (!isPluralElement(el) && !isSelectElement(el)) {\n      return;\n    }\n    // Go down the options and search for # in any literal element\n    Object.keys(el.options).forEach(function (id) {\n      var _a;\n      var opt = el.options[id];\n      // If we got a match, we have to split this\n      // and inject a NumberElement in the middle\n      var matchingLiteralElIndex = -1;\n      var literalEl = undefined;\n      for (var i = 0; i < opt.value.length; i++) {\n        var el_1 = opt.value[i];\n        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n          matchingLiteralElIndex = i;\n          literalEl = el_1;\n          break;\n        }\n      }\n      if (literalEl) {\n        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n        var newEls = pegParse(newValue);\n        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n      }\n      normalizeHashtagInPlural(opt.value);\n    });\n  });\n}","map":{"version":3,"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","isPluralElement","isLiteralElement","isSelectElement","pegParse","PLURAL_HASHTAG_REGEX","normalizeHashtagInPlural","els","forEach","el","Object","keys","options","id","_a","opt","matchingLiteralElIndex","literalEl","undefined","value","el_1","test","newValue","replace","newEls","splice","apply"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/intl-messageformat-parser/lib/normalize.js"],"sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { isPluralElement, isLiteralElement, isSelectElement, } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\n * Whether to convert `#` in plural rule options\n * to `{var, number}`\n * @param el AST Element\n * @param pluralStack current plural stack\n */\nexport function normalizeHashtagInPlural(els) {\n    els.forEach(function (el) {\n        // If we're encountering a plural el\n        if (!isPluralElement(el) && !isSelectElement(el)) {\n            return;\n        }\n        // Go down the options and search for # in any literal element\n        Object.keys(el.options).forEach(function (id) {\n            var _a;\n            var opt = el.options[id];\n            // If we got a match, we have to split this\n            // and inject a NumberElement in the middle\n            var matchingLiteralElIndex = -1;\n            var literalEl = undefined;\n            for (var i = 0; i < opt.value.length; i++) {\n                var el_1 = opt.value[i];\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n                    matchingLiteralElIndex = i;\n                    literalEl = el_1;\n                    break;\n                }\n            }\n            if (literalEl) {\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n                var newEls = pegParse(newValue);\n                (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n            }\n            normalizeHashtagInPlural(opt.value);\n        });\n    });\n}\n"],"mappings":"AAAA,IAAIA,cAAc,GAAI,IAAI,IAAI,IAAI,CAACA,cAAc,IAAK,YAAY;EAC9D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE;IAAED,CAAC,IAAIG,SAAS,CAACF,CAAC,CAAC,CAACG,MAAM;EAAC;EACpF,KAAK,IAAIC,CAAC,GAAGC,KAAK,CAACN,CAAC,CAAC,EAAEO,CAAC,GAAG,CAAC,EAAEN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE;IAC5C,KAAK,IAAIO,CAAC,GAAGL,SAAS,CAACF,CAAC,CAAC,EAAEQ,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,CAAC,CAACJ,MAAM,EAAEK,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAEF,CAAC,EAAE;MAC7DF,CAAC,CAACE,CAAC,CAAC,GAAGC,CAAC,CAACC,CAAC,CAAC;IAAC;EAAA;EACpB,OAAOJ,CAAC;AACZ,CAAC;AACD,SAASM,eAAe,EAAEC,gBAAgB,EAAEC,eAAe,QAAS,SAAS;AAC7E,SAASC,QAAQ,QAAQ,UAAU;AACnC,IAAIC,oBAAoB,GAAG,aAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAACC,GAAG,EAAE;EAC1CA,GAAG,CAACC,OAAO,CAAC,UAAUC,EAAE,EAAE;IACtB;IACA,IAAI,CAACR,eAAe,CAACQ,EAAE,CAAC,IAAI,CAACN,eAAe,CAACM,EAAE,CAAC,EAAE;MAC9C;IACJ;IACA;IACAC,MAAM,CAACC,IAAI,CAACF,EAAE,CAACG,OAAO,CAAC,CAACJ,OAAO,CAAC,UAAUK,EAAE,EAAE;MAC1C,IAAIC,EAAE;MACN,IAAIC,GAAG,GAAGN,EAAE,CAACG,OAAO,CAACC,EAAE,CAAC;MACxB;MACA;MACA,IAAIG,sBAAsB,GAAG,CAAC,CAAC;MAC/B,IAAIC,SAAS,GAAGC,SAAS;MACzB,KAAK,IAAI3B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwB,GAAG,CAACI,KAAK,CAACzB,MAAM,EAAEH,CAAC,EAAE,EAAE;QACvC,IAAI6B,IAAI,GAAGL,GAAG,CAACI,KAAK,CAAC5B,CAAC,CAAC;QACvB,IAAIW,gBAAgB,CAACkB,IAAI,CAAC,IAAIf,oBAAoB,CAACgB,IAAI,CAACD,IAAI,CAACD,KAAK,CAAC,EAAE;UACjEH,sBAAsB,GAAGzB,CAAC;UAC1B0B,SAAS,GAAGG,IAAI;UAChB;QACJ;MACJ;MACA,IAAIH,SAAS,EAAE;QACX,IAAIK,QAAQ,GAAGL,SAAS,CAACE,KAAK,CAACI,OAAO,CAAClB,oBAAoB,EAAE,KAAK,GAAGI,EAAE,CAACU,KAAK,GAAG,WAAW,CAAC;QAC5F,IAAIK,MAAM,GAAGpB,QAAQ,CAACkB,QAAQ,CAAC;QAC/B,CAACR,EAAE,GAAGC,GAAG,CAACI,KAAK,EAAEM,MAAM,CAACC,KAAK,CAACZ,EAAE,EAAEzB,cAAc,CAAC,CAAC2B,sBAAsB,EAAE,CAAC,CAAC,EAAEQ,MAAM,CAAC,CAAC;MAC1F;MACAlB,wBAAwB,CAACS,GAAG,CAACI,KAAK,CAAC;IACvC,CAAC,CAAC;EACN,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module"}