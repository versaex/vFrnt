{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\nvar global = getGlobalObject();\n/** UserAgent */\nvar UserAgent = /** @class */function () {\n  function UserAgent() {\n    /**\n     * @inheritDoc\n     */\n    this.name = UserAgent.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  UserAgent.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event) {\n      var _a, _b, _c;\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n        // grab as much info as exists and add it to the event\n        var url = ((_a = event.request) === null || _a === void 0 ? void 0 : _a.url) || ((_b = global.location) === null || _b === void 0 ? void 0 : _b.href);\n        var referrer = (global.document || {}).referrer;\n        var userAgent = (global.navigator || {}).userAgent;\n        var headers = __assign(__assign(__assign({}, (_c = event.request) === null || _c === void 0 ? void 0 : _c.headers), referrer && {\n          Referer: referrer\n        }), userAgent && {\n          'User-Agent': userAgent\n        });\n        var request = __assign(__assign({}, url && {\n          url: url\n        }), {\n          headers: headers\n        });\n        return __assign(__assign({}, event), {\n          request: request\n        });\n      }\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  UserAgent.id = 'UserAgent';\n  return UserAgent;\n}();\nexport { UserAgent };","map":{"version":3,"sources":["../../src/integrations/useragent.ts"],"names":[],"mappings":";AAAA,SAAS,uBAAuB,EAAE,aAAa,QAAQ,cAAc;AAErE,SAAS,eAAe,QAAQ,eAAe;AAE/C,IAAM,MAAM,GAAG,eAAe,EAAU;AAExC;AACA,IAAA,SAAA,GAAA,aAAA,YAAA;EAAA,SAAA,SAAA,GAAA;IAME;;AAEG;IACI,IAAA,CAAA,IAAI,GAAW,SAAS,CAAC,EAAE;EA8BpC;EA5BE;;AAEG;EACI,SAAA,CAAA,SAAA,CAAA,SAAS,GAAhB,YAAA;IACE,uBAAuB,CAAC,UAAC,KAAY,EAAA;;MACnC,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;QAC7C;QACA,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;UAC7D,OAAO,KAAK;QACb;QAED;QACA,IAAM,GAAG,GAAG,CAAA,CAAA,EAAA,GAAA,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,GAAG,MAAA,CAAA,EAAA,GAAI,MAAM,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,IAAI,CAAA;QAC/C,IAAA,QAAA,GAAA,CAAA,MAAA,CAAA,QAAA,IAAA,CAAA,CAAA,EAAA,QAAQ;QACR,IAAA,SAAA,GAAA,CAAA,MAAA,CAAA,SAAA,IAAA,CAAA,CAAA,EAAA,SAAS;QAEjB,IAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACR,KAAK,CAAC,OAAO,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAA,EACrB,QAAQ,IAAI;UAAE,OAAO,EAAE;QAAQ,CAAE,CAAC,EAClC,SAAS,IAAI;UAAE,YAAY,EAAE;QAAS,CAAE,CAC7C;QACD,IAAM,OAAO,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAS,GAAG,IAAI;UAAE,GAAG,EAAA;QAAA,CAAE,CAAC,EAAA;UAAE,OAAO,EAAA;QAAA,CAAA,CAAE;QAEhD,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAY,KAAK,CAAA,EAAA;UAAE,OAAO,EAAA;QAAA,CAAA,CAAA;MAC3B;MACD,OAAO,KAAK;IACd,CAAC,CAAC;EACJ,CAAC;EArCD;;AAEG;EACW,SAAA,CAAA,EAAE,GAAW,WAAW;EAmCxC,OAAA,SAAC;CAAA,EAAA;SAvCY,SAAS","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        // if none of the information we want exists, don't bother\n        if (!global.navigator && !global.location && !global.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request?.url || global.location?.href;\n        const { referrer } = global.document || {};\n        const { userAgent } = global.navigator || {};\n\n        const headers = {\n          ...event.request?.headers,\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}