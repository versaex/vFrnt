{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n// TODO: Implement different loggers for different environments\nvar global = getGlobalObject();\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\nvar Logger = /** @class */function () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n  return Logger;\n}();\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexport { logger };","map":{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,cAAc,EAAE,eAAe,QAAQ,QAAQ;AAExD;AACA,IAAM,MAAM,GAAG,eAAe,EAA0B;AAExD;AACA,IAAM,MAAM,GAAG,gBAAgB;AAE/B;AACA,IAAA,MAAA,GAAA,aAAA,YAAA;EAIE;EACA,SAAA,MAAA,GAAA;IACE,IAAI,CAAC,QAAQ,GAAG,KAAK;EACvB;EAEA;EACO,MAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IACE,IAAI,CAAC,QAAQ,GAAG,KAAK;EACvB,CAAC;EAED;EACO,MAAA,CAAA,SAAA,CAAA,MAAM,GAAb,YAAA;IACE,IAAI,CAAC,QAAQ,GAAG,IAAI;EACtB,CAAC;EAED;EACO,MAAA,CAAA,SAAA,CAAA,GAAG,GAAV,YAAA;IAAW,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACT,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MAClB;IACD;IACD,cAAc,CAAC,YAAA;MACb,MAAM,CAAC,OAAO,CAAC,GAAG,CAAI,MAAM,GAAA,SAAA,GAAU,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IACzD,CAAC,CAAC;EACJ,CAAC;EAED;EACO,MAAA,CAAA,SAAA,CAAA,IAAI,GAAX,YAAA;IAAY,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACV,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MAClB;IACD;IACD,cAAc,CAAC,YAAA;MACb,MAAM,CAAC,OAAO,CAAC,IAAI,CAAI,MAAM,GAAA,UAAA,GAAW,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IAC3D,CAAC,CAAC;EACJ,CAAC;EAED;EACO,MAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,YAAA;IAAa,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAc,EAAd,EAAA,GAAA,SAAA,CAAA,MAAc,EAAd,EAAA,EAAc,EAAA;MAAd,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IACX,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;MAClB;IACD;IACD,cAAc,CAAC,YAAA;MACb,MAAM,CAAC,OAAO,CAAC,KAAK,CAAI,MAAM,GAAA,WAAA,GAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC;EACH,OAAA,MAAC;AAAD,CAAC,EAAA;AAED;AACA,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,CAAA,CAAE;AAC3C,IAAM,MAAM,GAAI,MAAM,CAAC,UAAU,CAAC,MAAiB,KAAK,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;AAEhG,SAAS,MAAM","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}