{"ast":null,"code":"import { SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n/**\n * @inheritdoc\n */\nvar Session = /** @class */function () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = uuid4();\n    this.timestamp = Date.now();\n    this.started = Date.now();\n    this.duration = 0;\n    this.status = SessionStatus.Ok;\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n    this.timestamp = context.timestamp || Date.now();\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.did) {\n      this.did = \"\" + context.did;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({\n        status: SessionStatus.Exited\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n  Session.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      })\n    });\n  };\n  return Session;\n}();\nexport { Session };","map":{"version":3,"sources":["../src/session.ts"],"names":[],"mappings":"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","sourcesContent":["import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number = Date.now();\n  public started: number = Date.now();\n  public duration: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n\n  constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}