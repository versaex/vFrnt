{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  var hub = getCurrentHub();\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}","map":{"version":3,"sources":["../src/sdk.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,QAAQ,aAAa;AAE3C,SAAS,MAAM,QAAQ,eAAe;AAKtC;;;;;;AAMG;AACH,OAAM,SAAU,WAAW,CAAsC,WAA8B,EAAE,OAAU,EAAA;EACzG,IAAI,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;IAC1B,MAAM,CAAC,MAAM,EAAE;EAChB;EACD,IAAM,GAAG,GAAG,aAAa,EAAE;EAC3B,IAAM,MAAM,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC;EACvC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC;AACxB","sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}