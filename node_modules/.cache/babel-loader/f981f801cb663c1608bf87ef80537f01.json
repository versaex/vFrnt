{"ast":null,"code":"import { incrementalOrderBook } from '../../../api';\nimport { store } from '../../../store';\nimport { depthIncrementSubscribe } from '../orderBook';\nimport { RANGER_CONNECT_DATA, RANGER_CONNECT_ERROR, RANGER_CONNECT_FETCH, RANGER_DIRECT_WRITE, RANGER_DISCONNECT_DATA, RANGER_DISCONNECT_FETCH, RANGER_SUBSCRIPTIONS_DATA, RANGER_USER_ORDER_UPDATE } from './constants';\nimport { marketKlineStreams } from './helpers';\nexport var rangerConnectFetch = function rangerConnectFetch(payload) {\n  return {\n    type: RANGER_CONNECT_FETCH,\n    payload: payload\n  };\n};\nexport var rangerConnectData = function rangerConnectData() {\n  return {\n    type: RANGER_CONNECT_DATA\n  };\n};\nexport var rangerConnectError = function rangerConnectError(payload) {\n  return {\n    type: RANGER_CONNECT_ERROR,\n    payload: payload\n  };\n};\nexport var rangerDisconnectData = function rangerDisconnectData() {\n  return {\n    type: RANGER_DISCONNECT_DATA\n  };\n};\nexport var rangerDirectMessage = function rangerDirectMessage(payload) {\n  return {\n    type: RANGER_DIRECT_WRITE,\n    payload: payload\n  };\n};\nexport var rangerSubscribe = function rangerSubscribe(payload) {\n  return {\n    type: RANGER_DIRECT_WRITE,\n    payload: {\n      event: 'subscribe',\n      streams: payload.channels\n    }\n  };\n};\nexport var rangerUnsubscribe = function rangerUnsubscribe(payload) {\n  return {\n    type: RANGER_DIRECT_WRITE,\n    payload: {\n      event: 'unsubscribe',\n      streams: payload.channels\n    }\n  };\n};\nexport var rangerUserOrderUpdate = function rangerUserOrderUpdate(payload) {\n  return {\n    type: RANGER_USER_ORDER_UPDATE,\n    payload: payload\n  };\n};\nexport var marketStreams = function marketStreams(market) {\n  var channels = [\"\".concat(market.id, \".trades\")];\n  if (incrementalOrderBook()) {\n    store.dispatch(depthIncrementSubscribe(market.id));\n    return {\n      channels: [].concat(channels, [\"\".concat(market.id, \".ob-inc\")])\n    };\n  }\n  return {\n    channels: [].concat(channels, [\"\".concat(market.id, \".update\")])\n  };\n};\nexport var subscriptionsUpdate = function subscriptionsUpdate(payload) {\n  return {\n    type: RANGER_SUBSCRIPTIONS_DATA,\n    payload: payload\n  };\n};\nexport var rangerSubscribeMarket = function rangerSubscribeMarket(market) {\n  return rangerSubscribe(marketStreams(market));\n};\nexport var rangerUnsubscribeMarket = function rangerUnsubscribeMarket(market) {\n  return rangerUnsubscribe(marketStreams(market));\n};\nexport var rangerSubscribeKlineMarket = function rangerSubscribeKlineMarket(marketId, periodString) {\n  return rangerSubscribe(marketKlineStreams(marketId, periodString));\n};\nexport var rangerUnsubscribeKlineMarket = function rangerUnsubscribeKlineMarket(marketId, periodString) {\n  return rangerUnsubscribe(marketKlineStreams(marketId, periodString));\n};\nexport var rangerDisconnectFetch = function rangerDisconnectFetch() {\n  return {\n    type: RANGER_DISCONNECT_FETCH\n  };\n};","map":{"version":3,"names":["incrementalOrderBook","store","depthIncrementSubscribe","RANGER_CONNECT_DATA","RANGER_CONNECT_ERROR","RANGER_CONNECT_FETCH","RANGER_DIRECT_WRITE","RANGER_DISCONNECT_DATA","RANGER_DISCONNECT_FETCH","RANGER_SUBSCRIPTIONS_DATA","RANGER_USER_ORDER_UPDATE","marketKlineStreams","rangerConnectFetch","payload","type","rangerConnectData","rangerConnectError","rangerDisconnectData","rangerDirectMessage","rangerSubscribe","event","streams","channels","rangerUnsubscribe","rangerUserOrderUpdate","marketStreams","market","id","dispatch","subscriptionsUpdate","rangerSubscribeMarket","rangerUnsubscribeMarket","rangerSubscribeKlineMarket","marketId","periodString","rangerUnsubscribeKlineMarket","rangerDisconnectFetch"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/modules/public/ranger/actions.ts"],"sourcesContent":["import { incrementalOrderBook } from '../../../api';\nimport { store } from '../../../store';\nimport { CommonError, OrderEvent } from '../../types';\nimport { Market } from '../markets';\nimport { depthIncrementSubscribe } from '../orderBook';\nimport {\n    RANGER_CONNECT_DATA,\n    RANGER_CONNECT_ERROR,\n    RANGER_CONNECT_FETCH,\n    RANGER_DIRECT_WRITE,\n    RANGER_DISCONNECT_DATA,\n    RANGER_DISCONNECT_FETCH,\n    RANGER_SUBSCRIPTIONS_DATA,\n    RANGER_USER_ORDER_UPDATE,\n} from './constants';\nimport { marketKlineStreams } from './helpers';\n\nexport interface RangerConnectFetch {\n    type: typeof RANGER_CONNECT_FETCH;\n    payload: {\n        withAuth: boolean;\n    };\n}\n\nexport interface RangerConnectData {\n    type: typeof RANGER_CONNECT_DATA;\n}\n\nexport interface RangerDisconnectFetch {\n    type: typeof RANGER_DISCONNECT_FETCH;\n}\n\nexport interface RangerDisconnectData {\n    type: typeof RANGER_DISCONNECT_DATA;\n}\n\nexport interface RangerSubscribe {\n    type: typeof RANGER_DIRECT_WRITE;\n    payload: {\n        channels: string[];\n    };\n}\n\nexport interface RangerDirectMessage {\n    type: typeof RANGER_DIRECT_WRITE;\n    payload: { [pair: string]: any };\n}\n\nexport interface RangerConnectError {\n    type: typeof RANGER_CONNECT_ERROR;\n    payload?: {\n        code: number;\n        message: string[];\n    };\n}\n\nexport interface SubscriptionsUpdate {\n    type: typeof RANGER_SUBSCRIPTIONS_DATA;\n    payload: {\n        subscriptions: string[];\n    };\n}\n\nexport interface UserOrderUpdate {\n    type: typeof RANGER_USER_ORDER_UPDATE;\n    payload: OrderEvent;\n}\n\nexport type RangerAction = RangerConnectFetch |\n    RangerConnectData |\n    RangerConnectError |\n    RangerDisconnectData |\n    SubscriptionsUpdate;\n\nexport type RangerErrorType = typeof RANGER_CONNECT_ERROR;\n\nexport const rangerConnectFetch = (payload: RangerConnectFetch['payload']): RangerConnectFetch => ({\n    type: RANGER_CONNECT_FETCH,\n    payload,\n});\n\nexport const rangerConnectData = (): RangerConnectData => ({\n    type: RANGER_CONNECT_DATA,\n});\n\nexport const rangerConnectError = (payload: CommonError): RangerConnectError => ({\n    type: RANGER_CONNECT_ERROR,\n    payload,\n});\n\nexport const rangerDisconnectData = (): RangerDisconnectData => ({\n    type: RANGER_DISCONNECT_DATA,\n});\n\nexport const rangerDirectMessage = (payload: RangerDirectMessage['payload']): RangerDirectMessage => ({\n    type: RANGER_DIRECT_WRITE,\n    payload,\n});\n\nexport const rangerSubscribe = (payload: RangerSubscribe['payload']): RangerDirectMessage => ({\n    type: RANGER_DIRECT_WRITE,\n    payload: { event: 'subscribe', streams: payload.channels },\n});\n\nexport const rangerUnsubscribe = (payload: RangerSubscribe['payload']): RangerDirectMessage => ({\n    type: RANGER_DIRECT_WRITE,\n    payload: { event: 'unsubscribe', streams: payload.channels },\n});\n\nexport const rangerUserOrderUpdate = (payload: UserOrderUpdate['payload']): UserOrderUpdate => ({\n    type: RANGER_USER_ORDER_UPDATE,\n    payload,\n});\n\nexport const marketStreams = (market: Market) => {\n    const channels = [\n        `${market.id}.trades`,\n    ];\n\n    if (incrementalOrderBook()) {\n        store.dispatch(depthIncrementSubscribe(market.id));\n\n        return {\n            channels: [\n                ...channels,\n                `${market.id}.ob-inc`,\n            ],\n        };\n    }\n\n    return {\n        channels: [\n            ...channels,\n            `${market.id}.update`,\n        ],\n    };\n};\n\nexport const subscriptionsUpdate = (payload: SubscriptionsUpdate['payload']): SubscriptionsUpdate => ({\n    type: RANGER_SUBSCRIPTIONS_DATA,\n    payload,\n});\n\nexport const rangerSubscribeMarket = (market: Market): RangerDirectMessage => rangerSubscribe(marketStreams(market));\nexport const rangerUnsubscribeMarket = (market: Market): RangerDirectMessage => rangerUnsubscribe(marketStreams(market));\nexport const rangerSubscribeKlineMarket = (marketId: string, periodString: string): RangerDirectMessage => rangerSubscribe(marketKlineStreams(marketId, periodString));\nexport const rangerUnsubscribeKlineMarket = (marketId: string, periodString: string): RangerDirectMessage => rangerUnsubscribe(marketKlineStreams(marketId, periodString));\n\nexport const rangerDisconnectFetch = (): RangerDisconnectFetch => ({\n    type: RANGER_DISCONNECT_FETCH,\n});\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,cAAc;AACnD,SAASC,KAAK,QAAQ,gBAAgB;AAGtC,SAASC,uBAAuB,QAAQ,cAAc;AACtD,SACIC,mBAAmB,EACnBC,oBAAoB,EACpBC,oBAAoB,EACpBC,mBAAmB,EACnBC,sBAAsB,EACtBC,uBAAuB,EACvBC,yBAAyB,EACzBC,wBAAwB,QACrB,aAAa;AACpB,SAASC,kBAAkB,QAAQ,WAAW;AA6D9C,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,OAAsC;EAAA,OAA0B;IAC/FC,IAAI,EAAET,oBAAoB;IAC1BQ,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAiB;EAAA,OAA6B;IACvDD,IAAI,EAAEX;EACV,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMa,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIH,OAAoB;EAAA,OAA0B;IAC7EC,IAAI,EAAEV,oBAAoB;IAC1BS,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAoB;EAAA,OAAgC;IAC7DH,IAAI,EAAEP;EACV,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIL,OAAuC;EAAA,OAA2B;IAClGC,IAAI,EAAER,mBAAmB;IACzBO,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMM,eAAe,GAAG,SAAlBA,eAAe,CAAIN,OAAmC;EAAA,OAA2B;IAC1FC,IAAI,EAAER,mBAAmB;IACzBO,OAAO,EAAE;MAAEO,KAAK,EAAE,WAAW;MAAEC,OAAO,EAAER,OAAO,CAACS;IAAS;EAC7D,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIV,OAAmC;EAAA,OAA2B;IAC5FC,IAAI,EAAER,mBAAmB;IACzBO,OAAO,EAAE;MAAEO,KAAK,EAAE,aAAa;MAAEC,OAAO,EAAER,OAAO,CAACS;IAAS;EAC/D,CAAC;AAAA,CAAC;AAEF,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIX,OAAmC;EAAA,OAAuB;IAC5FC,IAAI,EAAEJ,wBAAwB;IAC9BG,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMY,aAAa,GAAG,SAAhBA,aAAa,CAAIC,MAAc,EAAK;EAC7C,IAAMJ,QAAQ,GAAG,WACVI,MAAM,CAACC,EAAE,aACf;EAED,IAAI3B,oBAAoB,EAAE,EAAE;IACxBC,KAAK,CAAC2B,QAAQ,CAAC1B,uBAAuB,CAACwB,MAAM,CAACC,EAAE,CAAC,CAAC;IAElD,OAAO;MACHL,QAAQ,YACDA,QAAQ,aACRI,MAAM,CAACC,EAAE;IAEpB,CAAC;EACL;EAEA,OAAO;IACHL,QAAQ,YACDA,QAAQ,aACRI,MAAM,CAACC,EAAE;EAEpB,CAAC;AACL,CAAC;AAED,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIhB,OAAuC;EAAA,OAA2B;IAClGC,IAAI,EAAEL,yBAAyB;IAC/BI,OAAO,EAAPA;EACJ,CAAC;AAAA,CAAC;AAEF,OAAO,IAAMiB,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIJ,MAAc;EAAA,OAA0BP,eAAe,CAACM,aAAa,CAACC,MAAM,CAAC,CAAC;AAAA;AACpH,OAAO,IAAMK,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAIL,MAAc;EAAA,OAA0BH,iBAAiB,CAACE,aAAa,CAACC,MAAM,CAAC,CAAC;AAAA;AACxH,OAAO,IAAMM,0BAA0B,GAAG,SAA7BA,0BAA0B,CAAIC,QAAgB,EAAEC,YAAoB;EAAA,OAA0Bf,eAAe,CAACR,kBAAkB,CAACsB,QAAQ,EAAEC,YAAY,CAAC,CAAC;AAAA;AACtK,OAAO,IAAMC,4BAA4B,GAAG,SAA/BA,4BAA4B,CAAIF,QAAgB,EAAEC,YAAoB;EAAA,OAA0BX,iBAAiB,CAACZ,kBAAkB,CAACsB,QAAQ,EAAEC,YAAY,CAAC,CAAC;AAAA;AAE1K,OAAO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAqB;EAAA,OAAiC;IAC/DtB,IAAI,EAAEN;EACV,CAAC;AAAA,CAAC"},"metadata":{},"sourceType":"module"}