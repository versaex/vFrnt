{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(writter),\n  _marked2 = /*#__PURE__*/_regeneratorRuntime().mark(reader),\n  _marked3 = /*#__PURE__*/_regeneratorRuntime().mark(watchDisconnect),\n  _marked4 = /*#__PURE__*/_regeneratorRuntime().mark(bindSocket),\n  _marked5 = /*#__PURE__*/_regeneratorRuntime().mark(dispatchCurrentMarketOrderUpdates),\n  _marked6 = /*#__PURE__*/_regeneratorRuntime().mark(dispatchOrderHistoryUpdates),\n  _marked7 = /*#__PURE__*/_regeneratorRuntime().mark(getSubscriptions),\n  _marked8 = /*#__PURE__*/_regeneratorRuntime().mark(rangerSagas);\nimport { eventChannel } from 'redux-saga';\nimport { all, call, cancel, delay, fork, put, race, select, take, takeEvery } from 'redux-saga/effects';\nimport { isFinexEnabled, rangerUrl } from '../../../../api';\nimport { store } from '../../../../store';\nimport { pushHistoryEmit } from '../../../user/history';\nimport { selectOpenOrdersList, userOpenOrdersUpdate } from '../../../user/openOrders';\nimport { userOrdersHistoryRangerData } from '../../../user/ordersHistory';\nimport { updateWalletsDataByRanger, walletsAddressDataWS } from '../../../user/wallets';\nimport { alertPush } from '../../alert';\nimport { klinePush } from '../../kline';\nimport { marketsTickersData, selectCurrentMarket } from '../../markets';\nimport { MARKETS_SET_CURRENT_MARKET, MARKETS_SET_CURRENT_MARKET_IFUNSET } from '../../markets/constants';\nimport { depthData, depthDataIncrement, depthDataSnapshot, selectOrderBookSequence } from '../../orderBook';\nimport { recentTradesPush } from '../../recentTrades';\nimport { rangerDisconnectData, rangerDisconnectFetch, rangerSubscribeMarket, rangerUnsubscribeMarket, rangerUserOrderUpdate, subscriptionsUpdate } from '../actions';\nimport { RANGER_CONNECT_DATA, RANGER_CONNECT_FETCH, RANGER_DIRECT_WRITE, RANGER_DISCONNECT_DATA, RANGER_DISCONNECT_FETCH, RANGER_USER_ORDER_UPDATE } from '../constants';\nimport { formatTicker, generateSocketURI, streamsBuilder } from '../helpers';\nimport { selectSubscriptions } from '../selectors';\nvar initRanger = function initRanger(_ref, market, prevSubs, buffer) {\n  var withAuth = _ref.withAuth;\n  var baseUrl = \"\".concat(rangerUrl(), \"/\").concat(withAuth ? 'private' : 'public');\n  var streams = streamsBuilder(withAuth, prevSubs, market);\n  var ws = new WebSocket(generateSocketURI(baseUrl, streams));\n  var channel = eventChannel(function (emitter) {\n    ws.onopen = function () {\n      emitter({\n        type: RANGER_CONNECT_DATA\n      });\n      while (buffer.messages.length > 0) {\n        var message = buffer.messages.shift();\n        ws.send(JSON.stringify(message));\n      }\n    };\n    ws.onerror = function (error) {\n      window.console.log(\"WebSocket error \".concat(error));\n      window.console.dir(error);\n    };\n    ws.onclose = function (event) {\n      channel.close();\n    };\n    ws.onmessage = function (_ref2) {\n      var data = _ref2.data;\n      var payload = {};\n      try {\n        payload = JSON.parse(data);\n      } catch (e) {\n        window.console.error(\"Error parsing : \".concat(e.data));\n      }\n      for (var routingKey in payload) {\n        if (payload.hasOwnProperty(routingKey)) {\n          var _ret = function () {\n            var event = payload[routingKey];\n            var currentMarket = selectCurrentMarket(store.getState());\n            var orderBookMatch = routingKey.match(/([^.]*)\\.update/);\n            var orderBookMatchSnap = routingKey.match(/([^.]*)\\.ob-snap/);\n            var orderBookMatchInc = routingKey.match(/([^.]*)\\.ob-inc/);\n\n            // public\n            if (orderBookMatch) {\n              if (currentMarket && orderBookMatch[1] === currentMarket.id) {\n                emitter(depthData(event));\n              }\n              return {\n                v: void 0\n              };\n            }\n\n            // public\n            if (orderBookMatchSnap) {\n              if (currentMarket && orderBookMatchSnap[1] === currentMarket.id) {\n                emitter(depthDataSnapshot(event));\n              }\n              return {\n                v: void 0\n              };\n            }\n\n            // public\n            if (orderBookMatchInc) {\n              if (currentMarket && orderBookMatchInc[1] === currentMarket.id) {\n                var previousSequence = selectOrderBookSequence(store.getState());\n                if (previousSequence === null) {\n                  window.console.log('OrderBook increment received before snapshot');\n                  return {\n                    v: void 0\n                  };\n                }\n                if (previousSequence + 1 !== event.sequence) {\n                  window.console.log(\"Bad sequence detected in incremental orderbook previous: \".concat(previousSequence, \", event: \").concat(event.sequence));\n                  emitter(rangerDisconnectFetch());\n                  return {\n                    v: void 0\n                  };\n                }\n                emitter(depthDataIncrement(event));\n              }\n              return {\n                v: void 0\n              };\n            }\n\n            // public\n            var klineMatch = String(routingKey).match(/([^.]*)\\.kline-(.+)/);\n            if (klineMatch) {\n              emitter(klinePush({\n                marketId: klineMatch[1],\n                kline: event,\n                period: klineMatch[2]\n              }));\n              return {\n                v: void 0\n              };\n            }\n\n            // public\n            var tradesMatch = String(routingKey).match(/([^.]*)\\.trades/);\n            if (tradesMatch) {\n              emitter(recentTradesPush({\n                trades: event.trades,\n                market: tradesMatch[1]\n              }));\n              return {\n                v: void 0\n              };\n            }\n            switch (routingKey) {\n              // public\n              case 'global.tickers':\n                emitter(marketsTickersData(formatTicker(event)));\n                return {\n                  v: void 0\n                };\n\n              // public\n              case 'success':\n                switch (event.message) {\n                  case 'subscribed':\n                  case 'unsubscribed':\n                    emitter(subscriptionsUpdate({\n                      subscriptions: event.streams\n                    }));\n                    return {\n                      v: void 0\n                    };\n                  default:\n                }\n                return {\n                  v: void 0\n                };\n\n              // private\n              case 'order':\n                if (isFinexEnabled() && event) {\n                  switch (event.state) {\n                    case 'wait':\n                    case 'pending':\n                      var orders = selectOpenOrdersList(store.getState());\n                      var updatedOrder = orders.length && orders.find(function (order) {\n                        return event.uuid && order.uuid === event.uuid;\n                      });\n                      if (!updatedOrder) {\n                        emitter(alertPush({\n                          message: ['success.order.created'],\n                          type: 'success'\n                        }));\n                      }\n                      break;\n                    case 'done':\n                      emitter(alertPush({\n                        message: ['success.order.done'],\n                        type: 'success'\n                      }));\n                      break;\n                    case 'reject':\n                      emitter(alertPush({\n                        message: ['error.order.rejected'],\n                        type: 'error'\n                      }));\n                      break;\n                    default:\n                      break;\n                  }\n                }\n                emitter(rangerUserOrderUpdate(event));\n                return {\n                  v: void 0\n                };\n\n              // private\n              case 'trade':\n                emitter(pushHistoryEmit(event));\n                return {\n                  v: void 0\n                };\n\n              // private\n              case 'balances':\n                emitter(updateWalletsDataByRanger({\n                  ws: true,\n                  balances: event\n                }));\n                return {\n                  v: void 0\n                };\n\n              // private\n              case 'deposit_address':\n                emitter(walletsAddressDataWS(event));\n                return {\n                  v: void 0\n                };\n              default:\n            }\n            window.console.log(\"Unhandeled websocket channel: \".concat(routingKey));\n          }();\n          if (typeof _ret === \"object\") return _ret.v;\n        }\n      }\n    };\n\n    // unsubscribe function\n    return function () {\n      emitter(rangerDisconnectData());\n    };\n  });\n  return [channel, ws];\n};\nfunction writter(socket, buffer) {\n  var data;\n  return _regeneratorRuntime().wrap(function writter$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 7;\n            break;\n          }\n          _context.next = 3;\n          return take(RANGER_DIRECT_WRITE);\n        case 3:\n          data = _context.sent;\n          if (socket.readyState === socket.OPEN) {\n            socket.send(JSON.stringify(data.payload));\n          } else {\n            buffer.messages.push(data.payload);\n          }\n          _context.next = 0;\n          break;\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nfunction reader(channel) {\n  var action;\n  return _regeneratorRuntime().wrap(function reader$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!true) {\n            _context2.next = 8;\n            break;\n          }\n          _context2.next = 3;\n          return take(channel);\n        case 3:\n          action = _context2.sent;\n          _context2.next = 6;\n          return put(action);\n        case 6:\n          _context2.next = 0;\n          break;\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nvar previousMarket;\nvar switchMarket = function switchMarket(subscribeOnInitOnly) {\n  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee(action) {\n    return _regeneratorRuntime().wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(subscribeOnInitOnly && previousMarket !== undefined)) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 2:\n            if (!(previousMarket && previousMarket.id !== action.payload.id)) {\n              _context3.next = 5;\n              break;\n            }\n            _context3.next = 5;\n            return put(rangerUnsubscribeMarket(previousMarket));\n          case 5:\n            previousMarket = action.payload;\n            if (!action.payload) {\n              _context3.next = 9;\n              break;\n            }\n            _context3.next = 9;\n            return put(rangerSubscribeMarket(action.payload));\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  });\n};\nfunction watchDisconnect(socket, channel) {\n  return _regeneratorRuntime().wrap(function watchDisconnect$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take(RANGER_DISCONNECT_FETCH);\n        case 2:\n          socket.close();\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3);\n}\nfunction bindSocket(channel, socket, buffer) {\n  return _regeneratorRuntime().wrap(function bindSocket$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([call(reader, channel), call(writter, socket, buffer), call(watchDisconnect, socket, channel)]);\n        case 2:\n          return _context5.abrupt(\"return\", _context5.sent);\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}\nfunction dispatchCurrentMarketOrderUpdates(action) {\n  var market;\n  return _regeneratorRuntime().wrap(function dispatchCurrentMarketOrderUpdates$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return select(selectCurrentMarket);\n        case 3:\n          market = _context6.sent;\n          _context6.next = 9;\n          break;\n        case 6:\n          _context6.prev = 6;\n          _context6.t0 = _context6[\"catch\"](0);\n          market = undefined;\n        case 9:\n          if (!(market && action.payload.market === market.id)) {\n            _context6.next = 12;\n            break;\n          }\n          _context6.next = 12;\n          return put(userOpenOrdersUpdate(action.payload));\n        case 12:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5, null, [[0, 6]]);\n}\nfunction dispatchOrderHistoryUpdates(action) {\n  return _regeneratorRuntime().wrap(function dispatchOrderHistoryUpdates$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return put(userOrdersHistoryRangerData(action.payload));\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6);\n}\nfunction getSubscriptions() {\n  return _regeneratorRuntime().wrap(function getSubscriptions$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return select(selectSubscriptions);\n        case 3:\n          return _context8.abrupt(\"return\", _context8.sent);\n        case 6:\n          _context8.prev = 6;\n          _context8.t0 = _context8[\"catch\"](0);\n          return _context8.abrupt(\"return\", []);\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked7, null, [[0, 6]]);\n}\nexport function rangerSagas() {\n  var initialized, connectFetchPayload, buffer, pipes, _yield$race, connectFetch, disconnectData, market, prevSubs, _yield$call, _yield$call2, channel, socket;\n  return _regeneratorRuntime().wrap(function rangerSagas$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          initialized = false;\n          buffer = {\n            messages: []\n          };\n          _context9.next = 4;\n          return takeEvery(MARKETS_SET_CURRENT_MARKET, switchMarket(false));\n        case 4:\n          _context9.next = 6;\n          return takeEvery(MARKETS_SET_CURRENT_MARKET_IFUNSET, switchMarket(true));\n        case 6:\n          _context9.next = 8;\n          return takeEvery(RANGER_USER_ORDER_UPDATE, dispatchCurrentMarketOrderUpdates);\n        case 8:\n          _context9.next = 10;\n          return takeEvery(RANGER_USER_ORDER_UPDATE, dispatchOrderHistoryUpdates);\n        case 10:\n          if (!true) {\n            _context9.next = 55;\n            break;\n          }\n          _context9.next = 13;\n          return race({\n            connectFetch: take(RANGER_CONNECT_FETCH),\n            disconnectData: take(RANGER_DISCONNECT_DATA)\n          });\n        case 13:\n          _yield$race = _context9.sent;\n          connectFetch = _yield$race.connectFetch;\n          disconnectData = _yield$race.disconnectData;\n          market = void 0;\n          if (!connectFetch) {\n            _context9.next = 24;\n            break;\n          }\n          if (!initialized) {\n            _context9.next = 23;\n            break;\n          }\n          _context9.next = 21;\n          return put(rangerDisconnectFetch());\n        case 21:\n          _context9.next = 23;\n          return take(RANGER_DISCONNECT_DATA);\n        case 23:\n          connectFetchPayload = connectFetch.payload;\n        case 24:\n          if (!disconnectData) {\n            _context9.next = 27;\n            break;\n          }\n          _context9.next = 27;\n          return delay(1000);\n        case 27:\n          _context9.prev = 27;\n          _context9.next = 30;\n          return select(selectCurrentMarket);\n        case 30:\n          market = _context9.sent;\n          _context9.next = 36;\n          break;\n        case 33:\n          _context9.prev = 33;\n          _context9.t0 = _context9[\"catch\"](27);\n          market = undefined;\n        case 36:\n          if (!connectFetchPayload) {\n            _context9.next = 53;\n            break;\n          }\n          _context9.next = 39;\n          return getSubscriptions();\n        case 39:\n          prevSubs = _context9.sent;\n          _context9.next = 42;\n          return call(initRanger, connectFetchPayload, market, prevSubs, buffer);\n        case 42:\n          _yield$call = _context9.sent;\n          _yield$call2 = _slicedToArray(_yield$call, 2);\n          channel = _yield$call2[0];\n          socket = _yield$call2[1];\n          initialized = true;\n          if (!pipes) {\n            _context9.next = 50;\n            break;\n          }\n          _context9.next = 50;\n          return cancel(pipes);\n        case 50:\n          _context9.next = 52;\n          return fork(bindSocket, channel, socket, buffer);\n        case 52:\n          pipes = _context9.sent;\n        case 53:\n          _context9.next = 10;\n          break;\n        case 55:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked8, null, [[27, 33]]);\n}","map":{"version":3,"names":["writter","reader","watchDisconnect","bindSocket","dispatchCurrentMarketOrderUpdates","dispatchOrderHistoryUpdates","getSubscriptions","rangerSagas","eventChannel","all","call","cancel","delay","fork","put","race","select","take","takeEvery","isFinexEnabled","rangerUrl","store","pushHistoryEmit","selectOpenOrdersList","userOpenOrdersUpdate","userOrdersHistoryRangerData","updateWalletsDataByRanger","walletsAddressDataWS","alertPush","klinePush","marketsTickersData","selectCurrentMarket","MARKETS_SET_CURRENT_MARKET","MARKETS_SET_CURRENT_MARKET_IFUNSET","depthData","depthDataIncrement","depthDataSnapshot","selectOrderBookSequence","recentTradesPush","rangerDisconnectData","rangerDisconnectFetch","rangerSubscribeMarket","rangerUnsubscribeMarket","rangerUserOrderUpdate","subscriptionsUpdate","RANGER_CONNECT_DATA","RANGER_CONNECT_FETCH","RANGER_DIRECT_WRITE","RANGER_DISCONNECT_DATA","RANGER_DISCONNECT_FETCH","RANGER_USER_ORDER_UPDATE","formatTicker","generateSocketURI","streamsBuilder","selectSubscriptions","initRanger","market","prevSubs","buffer","withAuth","baseUrl","streams","ws","WebSocket","channel","emitter","onopen","type","messages","length","message","shift","send","JSON","stringify","onerror","error","window","console","log","dir","onclose","event","close","onmessage","data","payload","parse","e","routingKey","hasOwnProperty","currentMarket","getState","orderBookMatch","match","orderBookMatchSnap","orderBookMatchInc","id","previousSequence","sequence","klineMatch","String","marketId","kline","period","tradesMatch","trades","subscriptions","state","orders","updatedOrder","find","order","uuid","balances","socket","readyState","OPEN","push","action","previousMarket","switchMarket","subscribeOnInitOnly","undefined","initialized","connectFetch","disconnectData","connectFetchPayload","pipes"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/modules/public/ranger/sagas/rangerSaga.ts"],"sourcesContent":["import { Channel, eventChannel, EventChannel } from 'redux-saga';\nimport { all, call, cancel, delay, fork, put, race, select, take, takeEvery } from 'redux-saga/effects';\nimport { isFinexEnabled, rangerUrl } from '../../../../api';\nimport { store } from '../../../../store';\nimport { pushHistoryEmit } from '../../../user/history';\nimport { selectOpenOrdersList, userOpenOrdersUpdate } from '../../../user/openOrders';\nimport { userOrdersHistoryRangerData} from '../../../user/ordersHistory';\nimport { updateWalletsDataByRanger, walletsAddressDataWS } from '../../../user/wallets';\nimport { alertPush } from '../../alert';\nimport { klinePush } from '../../kline';\nimport { Market, marketsTickersData, selectCurrentMarket, SetCurrentMarket } from '../../markets';\nimport { MARKETS_SET_CURRENT_MARKET, MARKETS_SET_CURRENT_MARKET_IFUNSET } from '../../markets/constants';\nimport { depthData, depthDataIncrement, depthDataSnapshot, selectOrderBookSequence } from '../../orderBook';\nimport { recentTradesPush } from '../../recentTrades';\nimport {\n    RangerConnectFetch,\n    rangerDisconnectData,\n    rangerDisconnectFetch,\n    rangerSubscribeMarket,\n    rangerUnsubscribeMarket,\n    rangerUserOrderUpdate,\n    subscriptionsUpdate,\n    UserOrderUpdate,\n} from '../actions';\nimport {\n    RANGER_CONNECT_DATA,\n    RANGER_CONNECT_FETCH,\n    RANGER_DIRECT_WRITE,\n    RANGER_DISCONNECT_DATA,\n    RANGER_DISCONNECT_FETCH,\n    RANGER_USER_ORDER_UPDATE,\n} from '../constants';\nimport { formatTicker, generateSocketURI, streamsBuilder } from '../helpers';\nimport { selectSubscriptions } from '../selectors';\n\ninterface RangerBuffer {\n    messages: object[];\n}\n\nconst initRanger = (\n    { withAuth }: RangerConnectFetch['payload'],\n    market: Market | undefined,\n    prevSubs: string[],\n    buffer: RangerBuffer,\n): [EventChannel<any>, WebSocket] => {\n    const baseUrl = `${rangerUrl()}/${withAuth ? 'private' : 'public'}`;\n    const streams = streamsBuilder(withAuth, prevSubs, market);\n\n    const ws = new WebSocket(generateSocketURI(baseUrl, streams));\n    const channel = eventChannel(emitter => {\n        ws.onopen = () => {\n            emitter({ type: RANGER_CONNECT_DATA });\n            while (buffer.messages.length > 0) {\n                const message = buffer.messages.shift();\n                ws.send(JSON.stringify(message));\n            }\n        };\n        ws.onerror = error => {\n            window.console.log(`WebSocket error ${error}`);\n            window.console.dir(error);\n        };\n        ws.onclose = event => {\n            channel.close();\n        };\n        ws.onmessage = ({ data }) => {\n            let payload: { [pair: string]: any } = {};\n\n            try {\n                payload = JSON.parse(data as string);\n            } catch (e) {\n                window.console.error(`Error parsing : ${e.data}`);\n            }\n\n            for (const routingKey in payload) {\n                if (payload.hasOwnProperty(routingKey)) {\n                    const event = payload[routingKey];\n\n                    const currentMarket = selectCurrentMarket(store.getState());\n                    const orderBookMatch = routingKey.match(/([^.]*)\\.update/);\n                    const orderBookMatchSnap = routingKey.match(/([^.]*)\\.ob-snap/);\n                    const orderBookMatchInc = routingKey.match(/([^.]*)\\.ob-inc/);\n\n                    // public\n                    if (orderBookMatch) {\n                        if (currentMarket && orderBookMatch[1] === currentMarket.id) {\n                            emitter(depthData(event));\n                        }\n\n                        return;\n                    }\n\n                    // public\n                    if (orderBookMatchSnap) {\n                        if (currentMarket && orderBookMatchSnap[1] === currentMarket.id) {\n                            emitter(depthDataSnapshot(event));\n                        }\n\n                        return;\n                    }\n\n                    // public\n                    if (orderBookMatchInc) {\n                        if (currentMarket && orderBookMatchInc[1] === currentMarket.id) {\n                            const previousSequence = selectOrderBookSequence(store.getState());\n                            if (previousSequence === null) {\n                                window.console.log('OrderBook increment received before snapshot');\n\n                                return;\n                            }\n                            if (previousSequence + 1 !== event.sequence) {\n                                window.console.log(`Bad sequence detected in incremental orderbook previous: ${previousSequence}, event: ${event.sequence}`);\n                                emitter(rangerDisconnectFetch());\n\n                                return;\n                            }\n                            emitter(depthDataIncrement(event));\n                        }\n\n                        return;\n                    }\n\n                    // public\n                    const klineMatch = String(routingKey).match(/([^.]*)\\.kline-(.+)/);\n                    if (klineMatch) {\n                        emitter(\n                            klinePush({\n                                marketId: klineMatch[1],\n                                kline: event,\n                                period: klineMatch[2],\n                            }),\n                        );\n\n                        return;\n                    }\n\n                    // public\n                    const tradesMatch = String(routingKey).match(/([^.]*)\\.trades/);\n                    if (tradesMatch) {\n                        emitter(\n                            recentTradesPush({\n                                trades: event.trades,\n                                market: tradesMatch[1],\n                            }),\n                        );\n\n                        return;\n                    }\n\n                    switch (routingKey) {\n                        // public\n                        case 'global.tickers':\n                            emitter(marketsTickersData(formatTicker(event)));\n\n                            return;\n\n                        // public\n                        case 'success':\n                            switch (event.message) {\n                                case 'subscribed':\n                                case 'unsubscribed':\n                                    emitter(subscriptionsUpdate({ subscriptions: event.streams }));\n\n                                    return;\n                                default:\n                            }\n\n                            return;\n\n                        // private\n                        case 'order':\n                            if (isFinexEnabled() && event) {\n                                switch (event.state) {\n                                    case 'wait':\n                                    case 'pending':\n                                        const orders = selectOpenOrdersList(store.getState());\n                                        const updatedOrder = orders.length && orders.find(order => event.uuid && order.uuid === event.uuid);\n                                        if (!updatedOrder) {\n                                            emitter(alertPush({ message: ['success.order.created'], type: 'success'}));\n                                        }\n                                        break;\n                                    case 'done':\n                                        emitter(alertPush({ message: ['success.order.done'], type: 'success'}));\n                                        break;\n                                    case 'reject':\n                                        emitter(alertPush({ message: ['error.order.rejected'], type: 'error'}));\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }\n\n                            emitter(rangerUserOrderUpdate(event));\n\n                            return;\n\n                        // private\n                        case 'trade':\n                            emitter(pushHistoryEmit(event));\n\n                            return;\n\n                        // private\n                        case 'balances':\n                            emitter(updateWalletsDataByRanger({ ws: true, balances: event }));\n\n                            return;\n\n                        // private\n                        case 'deposit_address':\n                            emitter(walletsAddressDataWS(event));\n\n                            return;\n\n                        default:\n                    }\n                    window.console.log(`Unhandeled websocket channel: ${routingKey}`);\n                }\n            }\n        };\n\n        // unsubscribe function\n        return () => {\n            emitter(rangerDisconnectData());\n        };\n    });\n\n    return [channel, ws];\n};\n\nfunction* writter(socket: WebSocket, buffer: { messages: object[] }) {\n    while (true) {\n        const data = yield take(RANGER_DIRECT_WRITE);\n        if (socket.readyState === socket.OPEN) {\n            socket.send(JSON.stringify(data.payload));\n        } else {\n            buffer.messages.push(data.payload);\n        }\n    }\n}\n\nfunction* reader(channel) {\n    while (true) {\n        const action = yield take(channel);\n        yield put(action);\n    }\n}\n\nlet previousMarket: Market | undefined;\n\nconst switchMarket = (subscribeOnInitOnly: boolean) => {\n    return function*(action: SetCurrentMarket) {\n        if (subscribeOnInitOnly && previousMarket !== undefined) {\n            return;\n        }\n        if (previousMarket && previousMarket.id !== action.payload.id) {\n            yield put(rangerUnsubscribeMarket(previousMarket));\n        }\n        previousMarket = action.payload;\n        if (action.payload) {\n            yield put(rangerSubscribeMarket(action.payload));\n        }\n    };\n};\n\nfunction* watchDisconnect(socket: WebSocket, channel: Channel<{}>) {\n    yield take(RANGER_DISCONNECT_FETCH);\n    socket.close();\n}\n\nfunction* bindSocket(channel: Channel<{}>, socket: WebSocket, buffer: RangerBuffer) {\n    return yield all([call(reader, channel), call(writter, socket, buffer), call(watchDisconnect, socket, channel)]);\n}\n\nfunction* dispatchCurrentMarketOrderUpdates(action: UserOrderUpdate) {\n    let market;\n\n    try {\n        market = yield select(selectCurrentMarket);\n    } catch (error) {\n        market = undefined;\n    }\n\n    if (market && action.payload.market === market.id) {\n        yield put(userOpenOrdersUpdate(action.payload));\n    }\n}\n\nfunction* dispatchOrderHistoryUpdates(action: UserOrderUpdate) {\n    yield put(userOrdersHistoryRangerData(action.payload));\n}\n\nfunction* getSubscriptions() {\n    try {\n        return yield select(selectSubscriptions);\n    } catch (error) {\n        return [];\n    }\n}\n\nexport function* rangerSagas() {\n    let initialized = false;\n    let connectFetchPayload: RangerConnectFetch['payload'] | undefined;\n    const buffer: RangerBuffer = { messages: [] };\n    let pipes;\n    yield takeEvery(MARKETS_SET_CURRENT_MARKET, switchMarket(false));\n    yield takeEvery(MARKETS_SET_CURRENT_MARKET_IFUNSET, switchMarket(true));\n    yield takeEvery(RANGER_USER_ORDER_UPDATE, dispatchCurrentMarketOrderUpdates);\n    yield takeEvery(RANGER_USER_ORDER_UPDATE, dispatchOrderHistoryUpdates);\n\n    while (true) {\n        const { connectFetch, disconnectData } = yield race({\n            connectFetch: take(RANGER_CONNECT_FETCH),\n            disconnectData: take(RANGER_DISCONNECT_DATA),\n        });\n        let market: Market | undefined;\n\n        if (connectFetch) {\n            if (initialized) {\n                yield put(rangerDisconnectFetch());\n                yield take(RANGER_DISCONNECT_DATA);\n            }\n            connectFetchPayload = connectFetch.payload;\n        }\n\n        if (disconnectData) {\n            yield delay(1000);\n        }\n\n        try {\n            market = yield select(selectCurrentMarket);\n        } catch (error) {\n            market = undefined;\n        }\n\n        if (connectFetchPayload) {\n            const prevSubs = yield getSubscriptions();\n            const [channel, socket] = yield call(initRanger, connectFetchPayload, market, prevSubs, buffer);\n            initialized = true;\n            if (pipes) {\n                yield cancel(pipes);\n            }\n            pipes = yield fork(bindSocket, channel, socket, buffer);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}