{"ast":null,"code":"var bigInt = function (undefined) {\n  \"use strict\";\n\n  var BASE = 1e7,\n    LOG_BASE = 7,\n    MAX_INT = 9007199254740992,\n    MAX_INT_ARR = smallToArray(MAX_INT),\n    DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  var supportsNativeBigInt = typeof BigInt === \"function\";\n  function Integer(v, radix, alphabet, caseSensitive) {\n    if (typeof v === \"undefined\") return Integer[0];\n    if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\n    return parseValue(v);\n  }\n  function BigInteger(value, sign) {\n    this.value = value;\n    this.sign = sign;\n    this.isSmall = false;\n  }\n  BigInteger.prototype = Object.create(Integer.prototype);\n  function SmallInteger(value) {\n    this.value = value;\n    this.sign = value < 0;\n    this.isSmall = true;\n  }\n  SmallInteger.prototype = Object.create(Integer.prototype);\n  function NativeBigInt(value) {\n    this.value = value;\n  }\n  NativeBigInt.prototype = Object.create(Integer.prototype);\n  function isPrecise(n) {\n    return -MAX_INT < n && n < MAX_INT;\n  }\n  function smallToArray(n) {\n    // For performance reasons doesn't reference BASE, need to change this function if BASE changes\n    if (n < 1e7) return [n];\n    if (n < 1e14) return [n % 1e7, Math.floor(n / 1e7)];\n    return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\n  }\n  function arrayToSmall(arr) {\n    // If BASE changes this function may need to change\n    trim(arr);\n    var length = arr.length;\n    if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\n      switch (length) {\n        case 0:\n          return 0;\n        case 1:\n          return arr[0];\n        case 2:\n          return arr[0] + arr[1] * BASE;\n        default:\n          return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\n      }\n    }\n    return arr;\n  }\n  function trim(v) {\n    var i = v.length;\n    while (v[--i] === 0) {\n      ;\n    }\n    v.length = i + 1;\n  }\n  function createArray(length) {\n    // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\n    var x = new Array(length);\n    var i = -1;\n    while (++i < length) {\n      x[i] = 0;\n    }\n    return x;\n  }\n  function truncate(n) {\n    if (n > 0) return Math.floor(n);\n    return Math.ceil(n);\n  }\n  function add(a, b) {\n    // assumes a and b are arrays with a.length >= b.length\n    var l_a = a.length,\n      l_b = b.length,\n      r = new Array(l_a),\n      carry = 0,\n      base = BASE,\n      sum,\n      i;\n    for (i = 0; i < l_b; i++) {\n      sum = a[i] + b[i] + carry;\n      carry = sum >= base ? 1 : 0;\n      r[i] = sum - carry * base;\n    }\n    while (i < l_a) {\n      sum = a[i] + carry;\n      carry = sum === base ? 1 : 0;\n      r[i++] = sum - carry * base;\n    }\n    if (carry > 0) r.push(carry);\n    return r;\n  }\n  function addAny(a, b) {\n    if (a.length >= b.length) return add(a, b);\n    return add(b, a);\n  }\n  function addSmall(a, carry) {\n    // assumes a is array, carry is number with 0 <= carry < MAX_INT\n    var l = a.length,\n      r = new Array(l),\n      base = BASE,\n      sum,\n      i;\n    for (i = 0; i < l; i++) {\n      sum = a[i] - base + carry;\n      carry = Math.floor(sum / base);\n      r[i] = sum - carry * base;\n      carry += 1;\n    }\n    while (carry > 0) {\n      r[i++] = carry % base;\n      carry = Math.floor(carry / base);\n    }\n    return r;\n  }\n  BigInteger.prototype.add = function (v) {\n    var n = parseValue(v);\n    if (this.sign !== n.sign) {\n      return this.subtract(n.negate());\n    }\n    var a = this.value,\n      b = n.value;\n    if (n.isSmall) {\n      return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\n    }\n    return new BigInteger(addAny(a, b), this.sign);\n  };\n  BigInteger.prototype.plus = BigInteger.prototype.add;\n  SmallInteger.prototype.add = function (v) {\n    var n = parseValue(v);\n    var a = this.value;\n    if (a < 0 !== n.sign) {\n      return this.subtract(n.negate());\n    }\n    var b = n.value;\n    if (n.isSmall) {\n      if (isPrecise(a + b)) return new SmallInteger(a + b);\n      b = smallToArray(Math.abs(b));\n    }\n    return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\n  };\n  SmallInteger.prototype.plus = SmallInteger.prototype.add;\n  NativeBigInt.prototype.add = function (v) {\n    return new NativeBigInt(this.value + parseValue(v).value);\n  };\n  NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\n  function subtract(a, b) {\n    // assumes a and b are arrays with a >= b\n    var a_l = a.length,\n      b_l = b.length,\n      r = new Array(a_l),\n      borrow = 0,\n      base = BASE,\n      i,\n      difference;\n    for (i = 0; i < b_l; i++) {\n      difference = a[i] - borrow - b[i];\n      if (difference < 0) {\n        difference += base;\n        borrow = 1;\n      } else borrow = 0;\n      r[i] = difference;\n    }\n    for (i = b_l; i < a_l; i++) {\n      difference = a[i] - borrow;\n      if (difference < 0) difference += base;else {\n        r[i++] = difference;\n        break;\n      }\n      r[i] = difference;\n    }\n    for (; i < a_l; i++) {\n      r[i] = a[i];\n    }\n    trim(r);\n    return r;\n  }\n  function subtractAny(a, b, sign) {\n    var value;\n    if (compareAbs(a, b) >= 0) {\n      value = subtract(a, b);\n    } else {\n      value = subtract(b, a);\n      sign = !sign;\n    }\n    value = arrayToSmall(value);\n    if (typeof value === \"number\") {\n      if (sign) value = -value;\n      return new SmallInteger(value);\n    }\n    return new BigInteger(value, sign);\n  }\n  function subtractSmall(a, b, sign) {\n    // assumes a is array, b is number with 0 <= b < MAX_INT\n    var l = a.length,\n      r = new Array(l),\n      carry = -b,\n      base = BASE,\n      i,\n      difference;\n    for (i = 0; i < l; i++) {\n      difference = a[i] + carry;\n      carry = Math.floor(difference / base);\n      difference %= base;\n      r[i] = difference < 0 ? difference + base : difference;\n    }\n    r = arrayToSmall(r);\n    if (typeof r === \"number\") {\n      if (sign) r = -r;\n      return new SmallInteger(r);\n    }\n    return new BigInteger(r, sign);\n  }\n  BigInteger.prototype.subtract = function (v) {\n    var n = parseValue(v);\n    if (this.sign !== n.sign) {\n      return this.add(n.negate());\n    }\n    var a = this.value,\n      b = n.value;\n    if (n.isSmall) return subtractSmall(a, Math.abs(b), this.sign);\n    return subtractAny(a, b, this.sign);\n  };\n  BigInteger.prototype.minus = BigInteger.prototype.subtract;\n  SmallInteger.prototype.subtract = function (v) {\n    var n = parseValue(v);\n    var a = this.value;\n    if (a < 0 !== n.sign) {\n      return this.add(n.negate());\n    }\n    var b = n.value;\n    if (n.isSmall) {\n      return new SmallInteger(a - b);\n    }\n    return subtractSmall(b, Math.abs(a), a >= 0);\n  };\n  SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\n  NativeBigInt.prototype.subtract = function (v) {\n    return new NativeBigInt(this.value - parseValue(v).value);\n  };\n  NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\n  BigInteger.prototype.negate = function () {\n    return new BigInteger(this.value, !this.sign);\n  };\n  SmallInteger.prototype.negate = function () {\n    var sign = this.sign;\n    var small = new SmallInteger(-this.value);\n    small.sign = !sign;\n    return small;\n  };\n  NativeBigInt.prototype.negate = function () {\n    return new NativeBigInt(-this.value);\n  };\n  BigInteger.prototype.abs = function () {\n    return new BigInteger(this.value, false);\n  };\n  SmallInteger.prototype.abs = function () {\n    return new SmallInteger(Math.abs(this.value));\n  };\n  NativeBigInt.prototype.abs = function () {\n    return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\n  };\n  function multiplyLong(a, b) {\n    var a_l = a.length,\n      b_l = b.length,\n      l = a_l + b_l,\n      r = createArray(l),\n      base = BASE,\n      product,\n      carry,\n      i,\n      a_i,\n      b_j;\n    for (i = 0; i < a_l; ++i) {\n      a_i = a[i];\n      for (var j = 0; j < b_l; ++j) {\n        b_j = b[j];\n        product = a_i * b_j + r[i + j];\n        carry = Math.floor(product / base);\n        r[i + j] = product - carry * base;\n        r[i + j + 1] += carry;\n      }\n    }\n    trim(r);\n    return r;\n  }\n  function multiplySmall(a, b) {\n    // assumes a is array, b is number with |b| < BASE\n    var l = a.length,\n      r = new Array(l),\n      base = BASE,\n      carry = 0,\n      product,\n      i;\n    for (i = 0; i < l; i++) {\n      product = a[i] * b + carry;\n      carry = Math.floor(product / base);\n      r[i] = product - carry * base;\n    }\n    while (carry > 0) {\n      r[i++] = carry % base;\n      carry = Math.floor(carry / base);\n    }\n    return r;\n  }\n  function shiftLeft(x, n) {\n    var r = [];\n    while (n-- > 0) {\n      r.push(0);\n    }\n    return r.concat(x);\n  }\n  function multiplyKaratsuba(x, y) {\n    var n = Math.max(x.length, y.length);\n    if (n <= 30) return multiplyLong(x, y);\n    n = Math.ceil(n / 2);\n    var b = x.slice(n),\n      a = x.slice(0, n),\n      d = y.slice(n),\n      c = y.slice(0, n);\n    var ac = multiplyKaratsuba(a, c),\n      bd = multiplyKaratsuba(b, d),\n      abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\n    var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\n    trim(product);\n    return product;\n  }\n\n  // The following function is derived from a surface fit of a graph plotting the performance difference\n  // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\n  function useKaratsuba(l1, l2) {\n    return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\n  }\n  BigInteger.prototype.multiply = function (v) {\n    var n = parseValue(v),\n      a = this.value,\n      b = n.value,\n      sign = this.sign !== n.sign,\n      abs;\n    if (n.isSmall) {\n      if (b === 0) return Integer[0];\n      if (b === 1) return this;\n      if (b === -1) return this.negate();\n      abs = Math.abs(b);\n      if (abs < BASE) {\n        return new BigInteger(multiplySmall(a, abs), sign);\n      }\n      b = smallToArray(abs);\n    }\n    if (useKaratsuba(a.length, b.length))\n      // Karatsuba is only faster for certain array sizes\n      return new BigInteger(multiplyKaratsuba(a, b), sign);\n    return new BigInteger(multiplyLong(a, b), sign);\n  };\n  BigInteger.prototype.times = BigInteger.prototype.multiply;\n  function multiplySmallAndArray(a, b, sign) {\n    // a >= 0\n    if (a < BASE) {\n      return new BigInteger(multiplySmall(b, a), sign);\n    }\n    return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\n  }\n  SmallInteger.prototype._multiplyBySmall = function (a) {\n    if (isPrecise(a.value * this.value)) {\n      return new SmallInteger(a.value * this.value);\n    }\n    return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\n  };\n  BigInteger.prototype._multiplyBySmall = function (a) {\n    if (a.value === 0) return Integer[0];\n    if (a.value === 1) return this;\n    if (a.value === -1) return this.negate();\n    return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\n  };\n  SmallInteger.prototype.multiply = function (v) {\n    return parseValue(v)._multiplyBySmall(this);\n  };\n  SmallInteger.prototype.times = SmallInteger.prototype.multiply;\n  NativeBigInt.prototype.multiply = function (v) {\n    return new NativeBigInt(this.value * parseValue(v).value);\n  };\n  NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\n  function square(a) {\n    //console.assert(2 * BASE * BASE < MAX_INT);\n    var l = a.length,\n      r = createArray(l + l),\n      base = BASE,\n      product,\n      carry,\n      i,\n      a_i,\n      a_j;\n    for (i = 0; i < l; i++) {\n      a_i = a[i];\n      carry = 0 - a_i * a_i;\n      for (var j = i; j < l; j++) {\n        a_j = a[j];\n        product = 2 * (a_i * a_j) + r[i + j] + carry;\n        carry = Math.floor(product / base);\n        r[i + j] = product - carry * base;\n      }\n      r[i + l] = carry;\n    }\n    trim(r);\n    return r;\n  }\n  BigInteger.prototype.square = function () {\n    return new BigInteger(square(this.value), false);\n  };\n  SmallInteger.prototype.square = function () {\n    var value = this.value * this.value;\n    if (isPrecise(value)) return new SmallInteger(value);\n    return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\n  };\n  NativeBigInt.prototype.square = function (v) {\n    return new NativeBigInt(this.value * this.value);\n  };\n  function divMod1(a, b) {\n    // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\n    var a_l = a.length,\n      b_l = b.length,\n      base = BASE,\n      result = createArray(b.length),\n      divisorMostSignificantDigit = b[b_l - 1],\n      // normalization\n      lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\n      remainder = multiplySmall(a, lambda),\n      divisor = multiplySmall(b, lambda),\n      quotientDigit,\n      shift,\n      carry,\n      borrow,\n      i,\n      l,\n      q;\n    if (remainder.length <= a_l) remainder.push(0);\n    divisor.push(0);\n    divisorMostSignificantDigit = divisor[b_l - 1];\n    for (shift = a_l - b_l; shift >= 0; shift--) {\n      quotientDigit = base - 1;\n      if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\n        quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\n      }\n      // quotientDigit <= base - 1\n      carry = 0;\n      borrow = 0;\n      l = divisor.length;\n      for (i = 0; i < l; i++) {\n        carry += quotientDigit * divisor[i];\n        q = Math.floor(carry / base);\n        borrow += remainder[shift + i] - (carry - q * base);\n        carry = q;\n        if (borrow < 0) {\n          remainder[shift + i] = borrow + base;\n          borrow = -1;\n        } else {\n          remainder[shift + i] = borrow;\n          borrow = 0;\n        }\n      }\n      while (borrow !== 0) {\n        quotientDigit -= 1;\n        carry = 0;\n        for (i = 0; i < l; i++) {\n          carry += remainder[shift + i] - base + divisor[i];\n          if (carry < 0) {\n            remainder[shift + i] = carry + base;\n            carry = 0;\n          } else {\n            remainder[shift + i] = carry;\n            carry = 1;\n          }\n        }\n        borrow += carry;\n      }\n      result[shift] = quotientDigit;\n    }\n    // denormalization\n    remainder = divModSmall(remainder, lambda)[0];\n    return [arrayToSmall(result), arrayToSmall(remainder)];\n  }\n  function divMod2(a, b) {\n    // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\n    // Performs faster than divMod1 on larger input sizes.\n    var a_l = a.length,\n      b_l = b.length,\n      result = [],\n      part = [],\n      base = BASE,\n      guess,\n      xlen,\n      highx,\n      highy,\n      check;\n    while (a_l) {\n      part.unshift(a[--a_l]);\n      trim(part);\n      if (compareAbs(part, b) < 0) {\n        result.push(0);\n        continue;\n      }\n      xlen = part.length;\n      highx = part[xlen - 1] * base + part[xlen - 2];\n      highy = b[b_l - 1] * base + b[b_l - 2];\n      if (xlen > b_l) {\n        highx = (highx + 1) * base;\n      }\n      guess = Math.ceil(highx / highy);\n      do {\n        check = multiplySmall(b, guess);\n        if (compareAbs(check, part) <= 0) break;\n        guess--;\n      } while (guess);\n      result.push(guess);\n      part = subtract(part, check);\n    }\n    result.reverse();\n    return [arrayToSmall(result), arrayToSmall(part)];\n  }\n  function divModSmall(value, lambda) {\n    var length = value.length,\n      quotient = createArray(length),\n      base = BASE,\n      i,\n      q,\n      remainder,\n      divisor;\n    remainder = 0;\n    for (i = length - 1; i >= 0; --i) {\n      divisor = remainder * base + value[i];\n      q = truncate(divisor / lambda);\n      remainder = divisor - q * lambda;\n      quotient[i] = q | 0;\n    }\n    return [quotient, remainder | 0];\n  }\n  function divModAny(self, v) {\n    var value,\n      n = parseValue(v);\n    if (supportsNativeBigInt) {\n      return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\n    }\n    var a = self.value,\n      b = n.value;\n    var quotient;\n    if (b === 0) throw new Error(\"Cannot divide by zero\");\n    if (self.isSmall) {\n      if (n.isSmall) {\n        return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\n      }\n      return [Integer[0], self];\n    }\n    if (n.isSmall) {\n      if (b === 1) return [self, Integer[0]];\n      if (b == -1) return [self.negate(), Integer[0]];\n      var abs = Math.abs(b);\n      if (abs < BASE) {\n        value = divModSmall(a, abs);\n        quotient = arrayToSmall(value[0]);\n        var remainder = value[1];\n        if (self.sign) remainder = -remainder;\n        if (typeof quotient === \"number\") {\n          if (self.sign !== n.sign) quotient = -quotient;\n          return [new SmallInteger(quotient), new SmallInteger(remainder)];\n        }\n        return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\n      }\n      b = smallToArray(abs);\n    }\n    var comparison = compareAbs(a, b);\n    if (comparison === -1) return [Integer[0], self];\n    if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\n\n    // divMod1 is faster on smaller input sizes\n    if (a.length + b.length <= 200) value = divMod1(a, b);else value = divMod2(a, b);\n    quotient = value[0];\n    var qSign = self.sign !== n.sign,\n      mod = value[1],\n      mSign = self.sign;\n    if (typeof quotient === \"number\") {\n      if (qSign) quotient = -quotient;\n      quotient = new SmallInteger(quotient);\n    } else quotient = new BigInteger(quotient, qSign);\n    if (typeof mod === \"number\") {\n      if (mSign) mod = -mod;\n      mod = new SmallInteger(mod);\n    } else mod = new BigInteger(mod, mSign);\n    return [quotient, mod];\n  }\n  BigInteger.prototype.divmod = function (v) {\n    var result = divModAny(this, v);\n    return {\n      quotient: result[0],\n      remainder: result[1]\n    };\n  };\n  NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\n  BigInteger.prototype.divide = function (v) {\n    return divModAny(this, v)[0];\n  };\n  NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\n    return new NativeBigInt(this.value / parseValue(v).value);\n  };\n  SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\n  BigInteger.prototype.mod = function (v) {\n    return divModAny(this, v)[1];\n  };\n  NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\n    return new NativeBigInt(this.value % parseValue(v).value);\n  };\n  SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\n  BigInteger.prototype.pow = function (v) {\n    var n = parseValue(v),\n      a = this.value,\n      b = n.value,\n      value,\n      x,\n      y;\n    if (b === 0) return Integer[1];\n    if (a === 0) return Integer[0];\n    if (a === 1) return Integer[1];\n    if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\n    if (n.sign) {\n      return Integer[0];\n    }\n    if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\n    if (this.isSmall) {\n      if (isPrecise(value = Math.pow(a, b))) return new SmallInteger(truncate(value));\n    }\n    x = this;\n    y = Integer[1];\n    while (true) {\n      if (b & 1 === 1) {\n        y = y.times(x);\n        --b;\n      }\n      if (b === 0) break;\n      b /= 2;\n      x = x.square();\n    }\n    return y;\n  };\n  SmallInteger.prototype.pow = BigInteger.prototype.pow;\n  NativeBigInt.prototype.pow = function (v) {\n    var n = parseValue(v);\n    var a = this.value,\n      b = n.value;\n    var _0 = BigInt(0),\n      _1 = BigInt(1),\n      _2 = BigInt(2);\n    if (b === _0) return Integer[1];\n    if (a === _0) return Integer[0];\n    if (a === _1) return Integer[1];\n    if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\n    if (n.isNegative()) return new NativeBigInt(_0);\n    var x = this;\n    var y = Integer[1];\n    while (true) {\n      if ((b & _1) === _1) {\n        y = y.times(x);\n        --b;\n      }\n      if (b === _0) break;\n      b /= _2;\n      x = x.square();\n    }\n    return y;\n  };\n  BigInteger.prototype.modPow = function (exp, mod) {\n    exp = parseValue(exp);\n    mod = parseValue(mod);\n    if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\n    var r = Integer[1],\n      base = this.mod(mod);\n    if (exp.isNegative()) {\n      exp = exp.multiply(Integer[-1]);\n      base = base.modInv(mod);\n    }\n    while (exp.isPositive()) {\n      if (base.isZero()) return Integer[0];\n      if (exp.isOdd()) r = r.multiply(base).mod(mod);\n      exp = exp.divide(2);\n      base = base.square().mod(mod);\n    }\n    return r;\n  };\n  NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\n  function compareAbs(a, b) {\n    if (a.length !== b.length) {\n      return a.length > b.length ? 1 : -1;\n    }\n    for (var i = a.length - 1; i >= 0; i--) {\n      if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\n    }\n    return 0;\n  }\n  BigInteger.prototype.compareAbs = function (v) {\n    var n = parseValue(v),\n      a = this.value,\n      b = n.value;\n    if (n.isSmall) return 1;\n    return compareAbs(a, b);\n  };\n  SmallInteger.prototype.compareAbs = function (v) {\n    var n = parseValue(v),\n      a = Math.abs(this.value),\n      b = n.value;\n    if (n.isSmall) {\n      b = Math.abs(b);\n      return a === b ? 0 : a > b ? 1 : -1;\n    }\n    return -1;\n  };\n  NativeBigInt.prototype.compareAbs = function (v) {\n    var a = this.value;\n    var b = parseValue(v).value;\n    a = a >= 0 ? a : -a;\n    b = b >= 0 ? b : -b;\n    return a === b ? 0 : a > b ? 1 : -1;\n  };\n  BigInteger.prototype.compare = function (v) {\n    // See discussion about comparison with Infinity:\n    // https://github.com/peterolson/BigInteger.js/issues/61\n    if (v === Infinity) {\n      return -1;\n    }\n    if (v === -Infinity) {\n      return 1;\n    }\n    var n = parseValue(v),\n      a = this.value,\n      b = n.value;\n    if (this.sign !== n.sign) {\n      return n.sign ? 1 : -1;\n    }\n    if (n.isSmall) {\n      return this.sign ? -1 : 1;\n    }\n    return compareAbs(a, b) * (this.sign ? -1 : 1);\n  };\n  BigInteger.prototype.compareTo = BigInteger.prototype.compare;\n  SmallInteger.prototype.compare = function (v) {\n    if (v === Infinity) {\n      return -1;\n    }\n    if (v === -Infinity) {\n      return 1;\n    }\n    var n = parseValue(v),\n      a = this.value,\n      b = n.value;\n    if (n.isSmall) {\n      return a == b ? 0 : a > b ? 1 : -1;\n    }\n    if (a < 0 !== n.sign) {\n      return a < 0 ? -1 : 1;\n    }\n    return a < 0 ? 1 : -1;\n  };\n  SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\n  NativeBigInt.prototype.compare = function (v) {\n    if (v === Infinity) {\n      return -1;\n    }\n    if (v === -Infinity) {\n      return 1;\n    }\n    var a = this.value;\n    var b = parseValue(v).value;\n    return a === b ? 0 : a > b ? 1 : -1;\n  };\n  NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\n  BigInteger.prototype.equals = function (v) {\n    return this.compare(v) === 0;\n  };\n  NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\n  BigInteger.prototype.notEquals = function (v) {\n    return this.compare(v) !== 0;\n  };\n  NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\n  BigInteger.prototype.greater = function (v) {\n    return this.compare(v) > 0;\n  };\n  NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\n  BigInteger.prototype.lesser = function (v) {\n    return this.compare(v) < 0;\n  };\n  NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\n  BigInteger.prototype.greaterOrEquals = function (v) {\n    return this.compare(v) >= 0;\n  };\n  NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\n  BigInteger.prototype.lesserOrEquals = function (v) {\n    return this.compare(v) <= 0;\n  };\n  NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\n  BigInteger.prototype.isEven = function () {\n    return (this.value[0] & 1) === 0;\n  };\n  SmallInteger.prototype.isEven = function () {\n    return (this.value & 1) === 0;\n  };\n  NativeBigInt.prototype.isEven = function () {\n    return (this.value & BigInt(1)) === BigInt(0);\n  };\n  BigInteger.prototype.isOdd = function () {\n    return (this.value[0] & 1) === 1;\n  };\n  SmallInteger.prototype.isOdd = function () {\n    return (this.value & 1) === 1;\n  };\n  NativeBigInt.prototype.isOdd = function () {\n    return (this.value & BigInt(1)) === BigInt(1);\n  };\n  BigInteger.prototype.isPositive = function () {\n    return !this.sign;\n  };\n  SmallInteger.prototype.isPositive = function () {\n    return this.value > 0;\n  };\n  NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\n  BigInteger.prototype.isNegative = function () {\n    return this.sign;\n  };\n  SmallInteger.prototype.isNegative = function () {\n    return this.value < 0;\n  };\n  NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\n  BigInteger.prototype.isUnit = function () {\n    return false;\n  };\n  SmallInteger.prototype.isUnit = function () {\n    return Math.abs(this.value) === 1;\n  };\n  NativeBigInt.prototype.isUnit = function () {\n    return this.abs().value === BigInt(1);\n  };\n  BigInteger.prototype.isZero = function () {\n    return false;\n  };\n  SmallInteger.prototype.isZero = function () {\n    return this.value === 0;\n  };\n  NativeBigInt.prototype.isZero = function () {\n    return this.value === BigInt(0);\n  };\n  BigInteger.prototype.isDivisibleBy = function (v) {\n    var n = parseValue(v);\n    if (n.isZero()) return false;\n    if (n.isUnit()) return true;\n    if (n.compareAbs(2) === 0) return this.isEven();\n    return this.mod(n).isZero();\n  };\n  NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\n  function isBasicPrime(v) {\n    var n = v.abs();\n    if (n.isUnit()) return false;\n    if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\n    if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\n    if (n.lesser(49)) return true;\n    // we don't know if it's prime: let the other functions figure it out\n  }\n\n  function millerRabinTest(n, a) {\n    var nPrev = n.prev(),\n      b = nPrev,\n      r = 0,\n      d,\n      t,\n      i,\n      x;\n    while (b.isEven()) {\n      b = b.divide(2), r++;\n    }\n    next: for (i = 0; i < a.length; i++) {\n      if (n.lesser(a[i])) continue;\n      x = bigInt(a[i]).modPow(b, n);\n      if (x.isUnit() || x.equals(nPrev)) continue;\n      for (d = r - 1; d != 0; d--) {\n        x = x.square().mod(n);\n        if (x.isUnit()) return false;\n        if (x.equals(nPrev)) continue next;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\n  BigInteger.prototype.isPrime = function (strict) {\n    var isPrime = isBasicPrime(this);\n    if (isPrime !== undefined) return isPrime;\n    var n = this.abs();\n    var bits = n.bitLength();\n    if (bits <= 64) return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\n    var logN = Math.log(2) * bits.toJSNumber();\n    var t = Math.ceil(strict === true ? 2 * Math.pow(logN, 2) : logN);\n    for (var a = [], i = 0; i < t; i++) {\n      a.push(bigInt(i + 2));\n    }\n    return millerRabinTest(n, a);\n  };\n  NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\n  BigInteger.prototype.isProbablePrime = function (iterations, rng) {\n    var isPrime = isBasicPrime(this);\n    if (isPrime !== undefined) return isPrime;\n    var n = this.abs();\n    var t = iterations === undefined ? 5 : iterations;\n    for (var a = [], i = 0; i < t; i++) {\n      a.push(bigInt.randBetween(2, n.minus(2), rng));\n    }\n    return millerRabinTest(n, a);\n  };\n  NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\n  BigInteger.prototype.modInv = function (n) {\n    var t = bigInt.zero,\n      newT = bigInt.one,\n      r = parseValue(n),\n      newR = this.abs(),\n      q,\n      lastT,\n      lastR;\n    while (!newR.isZero()) {\n      q = r.divide(newR);\n      lastT = t;\n      lastR = r;\n      t = newT;\n      r = newR;\n      newT = lastT.subtract(q.multiply(newT));\n      newR = lastR.subtract(q.multiply(newR));\n    }\n    if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\n    if (t.compare(0) === -1) {\n      t = t.add(n);\n    }\n    if (this.isNegative()) {\n      return t.negate();\n    }\n    return t;\n  };\n  NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\n  BigInteger.prototype.next = function () {\n    var value = this.value;\n    if (this.sign) {\n      return subtractSmall(value, 1, this.sign);\n    }\n    return new BigInteger(addSmall(value, 1), this.sign);\n  };\n  SmallInteger.prototype.next = function () {\n    var value = this.value;\n    if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\n    return new BigInteger(MAX_INT_ARR, false);\n  };\n  NativeBigInt.prototype.next = function () {\n    return new NativeBigInt(this.value + BigInt(1));\n  };\n  BigInteger.prototype.prev = function () {\n    var value = this.value;\n    if (this.sign) {\n      return new BigInteger(addSmall(value, 1), true);\n    }\n    return subtractSmall(value, 1, this.sign);\n  };\n  SmallInteger.prototype.prev = function () {\n    var value = this.value;\n    if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\n    return new BigInteger(MAX_INT_ARR, true);\n  };\n  NativeBigInt.prototype.prev = function () {\n    return new NativeBigInt(this.value - BigInt(1));\n  };\n  var powersOfTwo = [1];\n  while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) {\n    powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\n  }\n  var powers2Length = powersOfTwo.length,\n    highestPower2 = powersOfTwo[powers2Length - 1];\n  function shift_isSmall(n) {\n    return Math.abs(n) <= BASE;\n  }\n  BigInteger.prototype.shiftLeft = function (v) {\n    var n = parseValue(v).toJSNumber();\n    if (!shift_isSmall(n)) {\n      throw new Error(String(n) + \" is too large for shifting.\");\n    }\n    if (n < 0) return this.shiftRight(-n);\n    var result = this;\n    if (result.isZero()) return result;\n    while (n >= powers2Length) {\n      result = result.multiply(highestPower2);\n      n -= powers2Length - 1;\n    }\n    return result.multiply(powersOfTwo[n]);\n  };\n  NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\n  BigInteger.prototype.shiftRight = function (v) {\n    var remQuo;\n    var n = parseValue(v).toJSNumber();\n    if (!shift_isSmall(n)) {\n      throw new Error(String(n) + \" is too large for shifting.\");\n    }\n    if (n < 0) return this.shiftLeft(-n);\n    var result = this;\n    while (n >= powers2Length) {\n      if (result.isZero() || result.isNegative() && result.isUnit()) return result;\n      remQuo = divModAny(result, highestPower2);\n      result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n      n -= powers2Length - 1;\n    }\n    remQuo = divModAny(result, powersOfTwo[n]);\n    return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\n  };\n  NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\n  function bitwise(x, y, fn) {\n    y = parseValue(y);\n    var xSign = x.isNegative(),\n      ySign = y.isNegative();\n    var xRem = xSign ? x.not() : x,\n      yRem = ySign ? y.not() : y;\n    var xDigit = 0,\n      yDigit = 0;\n    var xDivMod = null,\n      yDivMod = null;\n    var result = [];\n    while (!xRem.isZero() || !yRem.isZero()) {\n      xDivMod = divModAny(xRem, highestPower2);\n      xDigit = xDivMod[1].toJSNumber();\n      if (xSign) {\n        xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\n      }\n\n      yDivMod = divModAny(yRem, highestPower2);\n      yDigit = yDivMod[1].toJSNumber();\n      if (ySign) {\n        yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\n      }\n\n      xRem = xDivMod[0];\n      yRem = yDivMod[0];\n      result.push(fn(xDigit, yDigit));\n    }\n    var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\n    for (var i = result.length - 1; i >= 0; i -= 1) {\n      sum = sum.multiply(highestPower2).add(bigInt(result[i]));\n    }\n    return sum;\n  }\n  BigInteger.prototype.not = function () {\n    return this.negate().prev();\n  };\n  NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\n  BigInteger.prototype.and = function (n) {\n    return bitwise(this, n, function (a, b) {\n      return a & b;\n    });\n  };\n  NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\n  BigInteger.prototype.or = function (n) {\n    return bitwise(this, n, function (a, b) {\n      return a | b;\n    });\n  };\n  NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\n  BigInteger.prototype.xor = function (n) {\n    return bitwise(this, n, function (a, b) {\n      return a ^ b;\n    });\n  };\n  NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\n  var LOBMASK_I = 1 << 30,\n    LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\n  function roughLOB(n) {\n    // get lowestOneBit (rough)\n    // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\n    // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\n    var v = n.value,\n      x = typeof v === \"number\" ? v | LOBMASK_I : typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) : v[0] + v[1] * BASE | LOBMASK_BI;\n    return x & -x;\n  }\n  function integerLogarithm(value, base) {\n    if (base.compareTo(value) <= 0) {\n      var tmp = integerLogarithm(value, base.square(base));\n      var p = tmp.p;\n      var e = tmp.e;\n      var t = p.multiply(base);\n      return t.compareTo(value) <= 0 ? {\n        p: t,\n        e: e * 2 + 1\n      } : {\n        p: p,\n        e: e * 2\n      };\n    }\n    return {\n      p: bigInt(1),\n      e: 0\n    };\n  }\n  BigInteger.prototype.bitLength = function () {\n    var n = this;\n    if (n.compareTo(bigInt(0)) < 0) {\n      n = n.negate().subtract(bigInt(1));\n    }\n    if (n.compareTo(bigInt(0)) === 0) {\n      return bigInt(0);\n    }\n    return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\n  };\n  NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\n  function max(a, b) {\n    a = parseValue(a);\n    b = parseValue(b);\n    return a.greater(b) ? a : b;\n  }\n  function min(a, b) {\n    a = parseValue(a);\n    b = parseValue(b);\n    return a.lesser(b) ? a : b;\n  }\n  function gcd(a, b) {\n    a = parseValue(a).abs();\n    b = parseValue(b).abs();\n    if (a.equals(b)) return a;\n    if (a.isZero()) return b;\n    if (b.isZero()) return a;\n    var c = Integer[1],\n      d,\n      t;\n    while (a.isEven() && b.isEven()) {\n      d = min(roughLOB(a), roughLOB(b));\n      a = a.divide(d);\n      b = b.divide(d);\n      c = c.multiply(d);\n    }\n    while (a.isEven()) {\n      a = a.divide(roughLOB(a));\n    }\n    do {\n      while (b.isEven()) {\n        b = b.divide(roughLOB(b));\n      }\n      if (a.greater(b)) {\n        t = b;\n        b = a;\n        a = t;\n      }\n      b = b.subtract(a);\n    } while (!b.isZero());\n    return c.isUnit() ? a : a.multiply(c);\n  }\n  function lcm(a, b) {\n    a = parseValue(a).abs();\n    b = parseValue(b).abs();\n    return a.divide(gcd(a, b)).multiply(b);\n  }\n  function randBetween(a, b, rng) {\n    a = parseValue(a);\n    b = parseValue(b);\n    var usedRNG = rng || Math.random;\n    var low = min(a, b),\n      high = max(a, b);\n    var range = high.subtract(low).add(1);\n    if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\n    var digits = toBase(range, BASE).value;\n    var result = [],\n      restricted = true;\n    for (var i = 0; i < digits.length; i++) {\n      var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\n      var digit = truncate(usedRNG() * top);\n      result.push(digit);\n      if (digit < digits[i]) restricted = false;\n    }\n    return low.add(Integer.fromArray(result, BASE, false));\n  }\n  var parseBase = function parseBase(text, base, alphabet, caseSensitive) {\n    alphabet = alphabet || DEFAULT_ALPHABET;\n    text = String(text);\n    if (!caseSensitive) {\n      text = text.toLowerCase();\n      alphabet = alphabet.toLowerCase();\n    }\n    var length = text.length;\n    var i;\n    var absBase = Math.abs(base);\n    var alphabetValues = {};\n    for (i = 0; i < alphabet.length; i++) {\n      alphabetValues[alphabet[i]] = i;\n    }\n    for (i = 0; i < length; i++) {\n      var c = text[i];\n      if (c === \"-\") continue;\n      if (c in alphabetValues) {\n        if (alphabetValues[c] >= absBase) {\n          if (c === \"1\" && absBase === 1) continue;\n          throw new Error(c + \" is not a valid digit in base \" + base + \".\");\n        }\n      }\n    }\n    base = parseValue(base);\n    var digits = [];\n    var isNegative = text[0] === \"-\";\n    for (i = isNegative ? 1 : 0; i < text.length; i++) {\n      var c = text[i];\n      if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));else if (c === \"<\") {\n        var start = i;\n        do {\n          i++;\n        } while (text[i] !== \">\" && i < text.length);\n        digits.push(parseValue(text.slice(start + 1, i)));\n      } else throw new Error(c + \" is not a valid character\");\n    }\n    return parseBaseFromArray(digits, base, isNegative);\n  };\n  function parseBaseFromArray(digits, base, isNegative) {\n    var val = Integer[0],\n      pow = Integer[1],\n      i;\n    for (i = digits.length - 1; i >= 0; i--) {\n      val = val.add(digits[i].times(pow));\n      pow = pow.times(base);\n    }\n    return isNegative ? val.negate() : val;\n  }\n  function stringify(digit, alphabet) {\n    alphabet = alphabet || DEFAULT_ALPHABET;\n    if (digit < alphabet.length) {\n      return alphabet[digit];\n    }\n    return \"<\" + digit + \">\";\n  }\n  function toBase(n, base) {\n    base = bigInt(base);\n    if (base.isZero()) {\n      if (n.isZero()) return {\n        value: [0],\n        isNegative: false\n      };\n      throw new Error(\"Cannot convert nonzero numbers to base 0.\");\n    }\n    if (base.equals(-1)) {\n      if (n.isZero()) return {\n        value: [0],\n        isNegative: false\n      };\n      if (n.isNegative()) return {\n        value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber())).map(Array.prototype.valueOf, [1, 0])),\n        isNegative: false\n      };\n      var arr = Array.apply(null, Array(n.toJSNumber() - 1)).map(Array.prototype.valueOf, [0, 1]);\n      arr.unshift([1]);\n      return {\n        value: [].concat.apply([], arr),\n        isNegative: false\n      };\n    }\n    var neg = false;\n    if (n.isNegative() && base.isPositive()) {\n      neg = true;\n      n = n.abs();\n    }\n    if (base.isUnit()) {\n      if (n.isZero()) return {\n        value: [0],\n        isNegative: false\n      };\n      return {\n        value: Array.apply(null, Array(n.toJSNumber())).map(Number.prototype.valueOf, 1),\n        isNegative: neg\n      };\n    }\n    var out = [];\n    var left = n,\n      divmod;\n    while (left.isNegative() || left.compareAbs(base) >= 0) {\n      divmod = left.divmod(base);\n      left = divmod.quotient;\n      var digit = divmod.remainder;\n      if (digit.isNegative()) {\n        digit = base.minus(digit).abs();\n        left = left.next();\n      }\n      out.push(digit.toJSNumber());\n    }\n    out.push(left.toJSNumber());\n    return {\n      value: out.reverse(),\n      isNegative: neg\n    };\n  }\n  function toBaseString(n, base, alphabet) {\n    var arr = toBase(n, base);\n    return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\n      return stringify(x, alphabet);\n    }).join('');\n  }\n  BigInteger.prototype.toArray = function (radix) {\n    return toBase(this, radix);\n  };\n  SmallInteger.prototype.toArray = function (radix) {\n    return toBase(this, radix);\n  };\n  NativeBigInt.prototype.toArray = function (radix) {\n    return toBase(this, radix);\n  };\n  BigInteger.prototype.toString = function (radix, alphabet) {\n    if (radix === undefined) radix = 10;\n    if (radix !== 10) return toBaseString(this, radix, alphabet);\n    var v = this.value,\n      l = v.length,\n      str = String(v[--l]),\n      zeros = \"0000000\",\n      digit;\n    while (--l >= 0) {\n      digit = String(v[l]);\n      str += zeros.slice(digit.length) + digit;\n    }\n    var sign = this.sign ? \"-\" : \"\";\n    return sign + str;\n  };\n  SmallInteger.prototype.toString = function (radix, alphabet) {\n    if (radix === undefined) radix = 10;\n    if (radix != 10) return toBaseString(this, radix, alphabet);\n    return String(this.value);\n  };\n  NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\n  NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () {\n    return this.toString();\n  };\n  BigInteger.prototype.valueOf = function () {\n    return parseInt(this.toString(), 10);\n  };\n  BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\n  SmallInteger.prototype.valueOf = function () {\n    return this.value;\n  };\n  SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\n  NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\n    return parseInt(this.toString(), 10);\n  };\n  function parseStringValue(v) {\n    if (isPrecise(+v)) {\n      var x = +v;\n      if (x === truncate(x)) return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\n      throw new Error(\"Invalid integer: \" + v);\n    }\n    var sign = v[0] === \"-\";\n    if (sign) v = v.slice(1);\n    var split = v.split(/e/i);\n    if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\n    if (split.length === 2) {\n      var exp = split[1];\n      if (exp[0] === \"+\") exp = exp.slice(1);\n      exp = +exp;\n      if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\n      var text = split[0];\n      var decimalPlace = text.indexOf(\".\");\n      if (decimalPlace >= 0) {\n        exp -= text.length - decimalPlace - 1;\n        text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\n      }\n      if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\n      text += new Array(exp + 1).join(\"0\");\n      v = text;\n    }\n    var isValid = /^([0-9][0-9]*)$/.test(v);\n    if (!isValid) throw new Error(\"Invalid integer: \" + v);\n    if (supportsNativeBigInt) {\n      return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\n    }\n    var r = [],\n      max = v.length,\n      l = LOG_BASE,\n      min = max - l;\n    while (max > 0) {\n      r.push(+v.slice(min, max));\n      min -= l;\n      if (min < 0) min = 0;\n      max -= l;\n    }\n    trim(r);\n    return new BigInteger(r, sign);\n  }\n  function parseNumberValue(v) {\n    if (supportsNativeBigInt) {\n      return new NativeBigInt(BigInt(v));\n    }\n    if (isPrecise(v)) {\n      if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\n      return new SmallInteger(v);\n    }\n    return parseStringValue(v.toString());\n  }\n  function parseValue(v) {\n    if (typeof v === \"number\") {\n      return parseNumberValue(v);\n    }\n    if (typeof v === \"string\") {\n      return parseStringValue(v);\n    }\n    if (typeof v === \"bigint\") {\n      return new NativeBigInt(v);\n    }\n    return v;\n  }\n  // Pre-define numbers in range [-999,999]\n  for (var i = 0; i < 1000; i++) {\n    Integer[i] = parseValue(i);\n    if (i > 0) Integer[-i] = parseValue(-i);\n  }\n  // Backwards compatibility\n  Integer.one = Integer[1];\n  Integer.zero = Integer[0];\n  Integer.minusOne = Integer[-1];\n  Integer.max = max;\n  Integer.min = min;\n  Integer.gcd = gcd;\n  Integer.lcm = lcm;\n  Integer.isInstance = function (x) {\n    return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt;\n  };\n  Integer.randBetween = randBetween;\n  Integer.fromArray = function (digits, base, isNegative) {\n    return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\n  };\n  return Integer;\n}();\n\n// Node.js check\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\n  module.exports = bigInt;\n}\n\n//amd check\nif (typeof define === \"function\" && define.amd) {\n  define(function () {\n    return bigInt;\n  });\n}","map":{"version":3,"names":["bigInt","undefined","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseValue","parseBase","BigInteger","value","sign","isSmall","prototype","Object","create","SmallInteger","NativeBigInt","isPrecise","n","Math","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","l_a","l_b","r","carry","base","sum","push","addAny","addSmall","l","subtract","negate","abs","plus","a_l","b_l","borrow","difference","subtractAny","subtractSmall","minus","small","multiplyLong","product","a_i","b_j","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","d","c","ac","bd","abcd","useKaratsuba","l1","l2","multiply","times","multiplySmallAndArray","_multiplyBySmall","square","a_j","divMod1","result","divisorMostSignificantDigit","lambda","remainder","divisor","quotientDigit","shift","q","divModSmall","divMod2","part","guess","xlen","highx","highy","check","unshift","reverse","quotient","divModAny","self","Error","comparison","qSign","mod","mSign","divmod","divide","over","pow","isEven","toString","_0","_1","_2","isNegative","modPow","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","equals","eq","notEquals","neq","greater","gt","lesser","lt","greaterOrEquals","geq","lesserOrEquals","leq","isUnit","isDivisibleBy","isBasicPrime","millerRabinTest","nPrev","prev","t","next","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","zero","newT","one","newR","lastT","lastR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","String","shiftRight","remQuo","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","p","e","min","gcd","lcm","usedRNG","random","low","high","range","digits","toBase","restricted","top","digit","fromArray","text","toLowerCase","absBase","alphabetValues","start","parseBaseFromArray","val","stringify","apply","map","valueOf","neg","Number","out","left","toBaseString","join","toArray","str","zeros","toJSON","parseInt","parseStringValue","split","decimalPlace","indexOf","isValid","test","parseNumberValue","minusOne","isInstance","module","hasOwnProperty","exports","define","amd"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/big-integer/BigInteger.js"],"sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] + (i + 1 < digits.length ? digits[i + 1] / BASE : 0) : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < digits[i]) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}