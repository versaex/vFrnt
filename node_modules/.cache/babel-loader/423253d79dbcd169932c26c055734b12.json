{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\components\\\\TabPanel\\\\index.tsx\";\nimport classnames from 'classnames';\nimport * as React from 'react';\nimport { DropdownComponent } from '../Dropdown';\nexport var HideMode;\n(function (HideMode) {\n  HideMode[\"hide\"] = \"hide\";\n  HideMode[\"unmount\"] = \"unmount\";\n})(HideMode || (HideMode = {}));\n/**\n * Component for switching between different tabs on one page.\n */\nexport var TabPanel = function TabPanel(_ref) {\n  var fixed = _ref.fixed,\n    _ref$hideMode = _ref.hideMode,\n    hideMode = _ref$hideMode === void 0 ? HideMode.hide : _ref$hideMode,\n    panels = _ref.panels,\n    optionalHead = _ref.optionalHead,\n    currentTabIndex = _ref.currentTabIndex,\n    isMobileDevice = _ref.isMobileDevice,\n    onCurrentTabChange = _ref.onCurrentTabChange,\n    onTabChange = _ref.onTabChange;\n  var dropdownLabels = React.useCallback(function () {\n    if (!panels.length) {\n      return [];\n    }\n    var tabNames = panels.map(function (panel) {\n      return panel.label;\n    }).filter(function (label) {\n      return label !== panels[currentTabIndex].label;\n    });\n    tabNames.unshift(panels[currentTabIndex].label);\n    return tabNames;\n  }, [currentTabIndex, panels]);\n  var createOnTabChangeHandler = React.useCallback(function (index, tab) {\n    return function () {\n      if (!tab.disabled) {\n        if (onCurrentTabChange) {\n          onCurrentTabChange(index);\n        }\n        if (onTabChange) {\n          onTabChange(index, tab.label);\n        }\n      }\n    };\n  }, [onCurrentTabChange, onTabChange]);\n  var handleOrderTypeChange = React.useCallback(function (index) {\n    var currentLabels = dropdownLabels();\n    var activeIndex = panels.findIndex(function (tab) {\n      return tab.label === currentLabels[index];\n    });\n    createOnTabChangeHandler(activeIndex, panels[activeIndex])();\n  }, [createOnTabChangeHandler, dropdownLabels, panels]);\n  var renderTabPanel = React.useCallback(function (tab, index) {\n    var disabled = tab.disabled,\n      hidden = tab.hidden,\n      label = tab.label;\n    var active = currentTabIndex === index;\n    var cn = classnames('cr-tab', {\n      'cr-tab__active': active,\n      'cr-tab__disabled': disabled,\n      'cr-tab__hidden': hidden\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cn,\n      key: index,\n      onClick: createOnTabChangeHandler(index, tab),\n      role: \"tab\",\n      tabIndex: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, label, active && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"cr-tab__pointer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 32\n      }\n    }));\n  }, [createOnTabChangeHandler, currentTabIndex]);\n  var tabPanelRender = React.useCallback(function () {\n    if (isMobileDevice) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cr-tab-panel__dropdown\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(DropdownComponent, {\n        list: dropdownLabels(),\n        className: \"cr-dropdown--mobile\",\n        onSelect: handleOrderTypeChange,\n        placeholder: \"\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: 'cr-tab-panel__navigation-container-navigation',\n        role: \"tablist\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, panels.map(renderTabPanel));\n    }\n  }, [dropdownLabels, handleOrderTypeChange, isMobileDevice, panels, renderTabPanel]);\n  var renderTabContent = React.useCallback(function (tab, index) {\n    var cn = classnames('cr-tab-content', {\n      'cr-tab-content__active': hideMode === HideMode.hide ? currentTabIndex === index : false\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cn,\n      key: \"\".concat(tab.label, \"-\").concat(index),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }\n    }, tab.content);\n  }, [currentTabIndex, hideMode]);\n  var contents = React.useMemo(function () {\n    return hideMode === HideMode.hide ? panels.map(renderTabContent) : panels.filter(function (panel, index) {\n      return index === currentTabIndex;\n    }).map(renderTabContent);\n  }, [currentTabIndex, hideMode, panels, renderTabContent]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classnames('cr-tab-panel', {\n      'cr-tab-panel__fixed': fixed\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-tab-panel__navigation-container draggable-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, tabPanelRender(), optionalHead && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cr-tab-panel__optinal-head\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 34\n    }\n  }, optionalHead)), contents);\n};","map":{"version":3,"names":["classnames","React","DropdownComponent","HideMode","TabPanel","fixed","hideMode","hide","panels","optionalHead","currentTabIndex","isMobileDevice","onCurrentTabChange","onTabChange","dropdownLabels","useCallback","length","tabNames","map","panel","label","filter","unshift","createOnTabChangeHandler","index","tab","disabled","handleOrderTypeChange","currentLabels","activeIndex","findIndex","renderTabPanel","hidden","active","cn","tabPanelRender","renderTabContent","content","contents","useMemo"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/components/TabPanel/index.tsx"],"sourcesContent":["import classnames from 'classnames';\nimport * as React from 'react';\nimport { DropdownComponent } from '../Dropdown';\n\nexport enum HideMode {\n    hide = 'hide',\n    unmount = 'unmount',\n}\n\nexport type OnTabChangeCallback = (index: number, label?: string) => void;\n\ntype OnCurrentTabChange = (index: number) => void;\n\nexport interface Tab {\n    content: React.ReactNode;\n    disabled?: boolean;\n    hidden?: boolean;\n    label: string;\n}\n\nexport interface TabPanelProps {\n    /**\n     * List of tabs to be rendered\n     */\n    panels: Tab[];\n    /**\n     * Determines whether tabs should be full container width\n     * @default false\n     */\n    fixed?: boolean;\n    /**\n     * Tab change mode:\n     * `hide` mode will mount but hide inactive tabs changing `display` css\n     * property of tab content to `none`.\n     * `unmount` mode will not mount the tab content of inactive tabs.\n     * @default hide\n     */\n    hideMode?: HideMode;\n    /**\n     * Callback which is called when currently active tab is changed\n     */\n    onTabChange?: OnTabChangeCallback;\n    /**\n     * Function which is called for changing currently active tab is changed\n     */\n    onCurrentTabChange?: OnCurrentTabChange;\n    /**\n     * Index of tab to switch on\n     */\n    /**\n     * Current index of tab\n     */\n    currentTabIndex: number;\n    /**\n     * Optinal JSX element to head\n     */\n    optionalHead?: React.ReactNode;\n    /**\n     * Determines whether tab header should looks like dropdown or tab switcher\n     */\n    isMobileDevice?: boolean;\n}\n\n/**\n * Component for switching between different tabs on one page.\n */\nexport const TabPanel: React.FC<TabPanelProps> = ({\n    fixed,\n    hideMode = HideMode.hide,\n    panels,\n    optionalHead,\n    currentTabIndex,\n    isMobileDevice,\n    onCurrentTabChange,\n    onTabChange,\n}) => {\n    const dropdownLabels = React.useCallback(() => {\n        if (!panels.length) {\n            return [];\n        }\n\n        const tabNames = panels.map((panel) => panel.label).filter((label) => label !== panels[currentTabIndex].label);\n        tabNames.unshift(panels[currentTabIndex].label);\n\n        return tabNames;\n    }, [currentTabIndex, panels]);\n\n    const createOnTabChangeHandler = React.useCallback(\n        (index: number, tab: Tab) => () => {\n            if (!tab.disabled) {\n                if (onCurrentTabChange) {\n                    onCurrentTabChange(index);\n                }\n                if (onTabChange) {\n                    onTabChange(index, tab.label);\n                }\n            }\n        },\n        [onCurrentTabChange, onTabChange]\n    );\n\n    const handleOrderTypeChange = React.useCallback(\n        (index: number) => {\n            const currentLabels = dropdownLabels();\n\n            const activeIndex = panels.findIndex((tab) => tab.label === currentLabels[index]);\n\n            createOnTabChangeHandler(activeIndex, panels[activeIndex])();\n        },\n        [createOnTabChangeHandler, dropdownLabels, panels]\n    );\n\n    const renderTabPanel = React.useCallback(\n        (tab: Tab, index: number) => {\n            const { disabled, hidden, label } = tab;\n\n            const active = currentTabIndex === index;\n            const cn = classnames('cr-tab', {\n                'cr-tab__active': active,\n                'cr-tab__disabled': disabled,\n                'cr-tab__hidden': hidden,\n            });\n\n            return (\n                <div\n                    className={cn}\n                    key={index}\n                    onClick={createOnTabChangeHandler(index, tab)}\n                    role=\"tab\"\n                    tabIndex={index}>\n                    {label}\n                    {active && <span className=\"cr-tab__pointer\" />}\n                </div>\n            );\n        },\n        [createOnTabChangeHandler, currentTabIndex]\n    );\n\n    const tabPanelRender = React.useCallback(() => {\n        if (isMobileDevice) {\n            return (\n                <div className=\"cr-tab-panel__dropdown\">\n                    <DropdownComponent\n                        list={dropdownLabels()}\n                        className=\"cr-dropdown--mobile\"\n                        onSelect={handleOrderTypeChange}\n                        placeholder=\"\"\n                    />\n                </div>\n            );\n        } else {\n            return (\n                <div className={'cr-tab-panel__navigation-container-navigation'} role=\"tablist\">\n                    {panels.map(renderTabPanel)}\n                </div>\n            );\n        }\n    }, [dropdownLabels, handleOrderTypeChange, isMobileDevice, panels, renderTabPanel]);\n\n    const renderTabContent = React.useCallback(\n        (tab: Tab, index: number) => {\n            const cn: string = classnames('cr-tab-content', {\n                'cr-tab-content__active': hideMode === HideMode.hide ? currentTabIndex === index : false,\n            });\n\n            return (\n                <div className={cn} key={`${tab.label}-${index}`}>\n                    {tab.content}\n                </div>\n            );\n        },\n        [currentTabIndex, hideMode]\n    );\n\n    const contents = React.useMemo(\n        () =>\n            hideMode === HideMode.hide\n                ? panels.map(renderTabContent)\n                : panels.filter((panel, index) => index === currentTabIndex).map(renderTabContent),\n        [currentTabIndex, hideMode, panels, renderTabContent]\n    );\n\n    return (\n        <div\n            className={classnames('cr-tab-panel', {\n                'cr-tab-panel__fixed': fixed,\n            })}>\n            <div className=\"cr-tab-panel__navigation-container draggable-container\">\n                {tabPanelRender()}\n                {optionalHead && <div className=\"cr-tab-panel__optinal-head\">{optionalHead}</div>}\n            </div>\n            {contents}\n        </div>\n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}