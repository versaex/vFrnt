{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar BlockHeader = require('./blockheader');\nvar BN = require('../crypto/bn');\nvar BufferUtil = require('../util/buffer');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Transaction = require('../transaction');\nvar $ = require('../util/preconditions');\n\n/**\n * Instantiate a Block from a Buffer, JSON object, or Object with\n * the properties of the Block\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {Block}\n * @constructor\n */\nfunction Block(arg) {\n  if (!(this instanceof Block)) {\n    return new Block(arg);\n  }\n  _.extend(this, Block._from(arg));\n  return this;\n}\n\n// https://github.com/bitcoin/bitcoin/blob/b5fa132329f0377d787a4a21c1686609c2bfaece/src/primitives/block.h#L14\nBlock.MAX_BLOCK_SIZE = 1000000;\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlock._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = Block._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = Block._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for Block');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Object} - An object representing block data\n * @private\n */\nBlock._fromObject = function _fromObject(data) {\n  var transactions = [];\n  data.transactions.forEach(function (tx) {\n    if (tx instanceof Transaction) {\n      transactions.push(tx);\n    } else {\n      transactions.push(Transaction().fromObject(tx));\n    }\n  });\n  var info = {\n    header: BlockHeader.fromObject(data.header),\n    transactions: transactions\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Block} - An instance of block\n */\nBlock.fromObject = function fromObject(obj) {\n  var info = Block._fromObject(obj);\n  return new Block(info);\n};\n\n/**\n * @param {BufferReader} - Block data\n * @returns {Object} - An object representing the block data\n * @private\n */\nBlock._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  $.checkState(!br.finished(), 'No block data received');\n  info.header = BlockHeader.fromBufferReader(br);\n  var transactions = br.readVarintNum();\n  info.transactions = [];\n  for (var i = 0; i < transactions; i++) {\n    info.transactions.push(Transaction().fromBufferReader(br));\n  }\n  return info;\n};\n\n/**\n * @param {BufferReader} - A buffer reader of the block\n * @returns {Block} - An instance of block\n */\nBlock.fromBufferReader = function fromBufferReader(br) {\n  $.checkArgument(br, 'br is required');\n  var info = Block._fromBufferReader(br);\n  return new Block(info);\n};\n\n/**\n * @param {Buffer} - A buffer of the block\n * @returns {Block} - An instance of block\n */\nBlock.fromBuffer = function fromBuffer(buf) {\n  return Block.fromBufferReader(new BufferReader(buf));\n};\n\n/**\n * @param {string} - str - A hex encoded string of the block\n * @returns {Block} - A hex encoded string of the block\n */\nBlock.fromString = function fromString(str) {\n  var buf = new Buffer(str, 'hex');\n  return Block.fromBuffer(buf);\n};\n\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {Block} - An instance of block\n */\nBlock.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = new Buffer(data, 'binary');\n  }\n  var br = BufferReader(data);\n  br.pos = Block.Values.START_OF_BLOCK;\n  var info = Block._fromBufferReader(br);\n  return new Block(info);\n};\n\n/**\n * @returns {Object} - A plain object with the block properties\n */\nBlock.prototype.toObject = Block.prototype.toJSON = function toObject() {\n  var transactions = [];\n  this.transactions.forEach(function (tx) {\n    transactions.push(tx.toObject());\n  });\n  return {\n    header: this.header.toObject(),\n    transactions: transactions\n  };\n};\n\n/**\n * @returns {Buffer} - A buffer of the block\n */\nBlock.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the block\n */\nBlock.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance of BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the Block\n */\nBlock.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.write(this.header.toBuffer());\n  bw.writeVarintNum(this.transactions.length);\n  for (var i = 0; i < this.transactions.length; i++) {\n    this.transactions[i].toBufferWriter(bw);\n  }\n  return bw;\n};\n\n/**\n * Will iterate through each transaction and return an array of hashes\n * @returns {Array} - An array with transaction hashes\n */\nBlock.prototype.getTransactionHashes = function getTransactionHashes() {\n  var hashes = [];\n  if (this.transactions.length === 0) {\n    return [Block.Values.NULL_HASH];\n  }\n  for (var t = 0; t < this.transactions.length; t++) {\n    hashes.push(this.transactions[t]._getHash());\n  }\n  return hashes;\n};\n\n/**\n * Will build a merkle tree of all the transactions, ultimately arriving at\n * a single point, the merkle root.\n * @link https://en.bitcoin.it/wiki/Protocol_specification#Merkle_Trees\n * @returns {Array} - An array with each level of the tree after the other.\n */\nBlock.prototype.getMerkleTree = function getMerkleTree() {\n  var tree = this.getTransactionHashes();\n  var j = 0;\n  for (var size = this.transactions.length; size > 1; size = Math.floor((size + 1) / 2)) {\n    for (var i = 0; i < size; i += 2) {\n      var i2 = Math.min(i + 1, size - 1);\n      var buf = Buffer.concat([tree[j + i], tree[j + i2]]);\n      tree.push(Hash.sha256sha256(buf));\n    }\n    j += size;\n  }\n  return tree;\n};\n\n/**\n * Calculates the merkleRoot from the transactions.\n * @returns {Buffer} - A buffer of the merkle root hash\n */\nBlock.prototype.getMerkleRoot = function getMerkleRoot() {\n  var tree = this.getMerkleTree();\n  return tree[tree.length - 1];\n};\n\n/**\n * Verifies that the transactions in the block match the header merkle root\n * @returns {Boolean} - If the merkle roots match\n */\nBlock.prototype.validMerkleRoot = function validMerkleRoot() {\n  var h = new BN(this.header.merkleRoot.toString('hex'), 'hex');\n  var c = new BN(this.getMerkleRoot().toString('hex'), 'hex');\n  if (h.cmp(c) !== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlock.prototype._getHash = function () {\n  return this.header._getHash();\n};\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function get() {\n    if (!this._id) {\n      this._id = this.header.id;\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(Block.prototype, 'id', idProperty);\nObject.defineProperty(Block.prototype, 'hash', idProperty);\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlock.prototype.inspect = function inspect() {\n  return '<Block ' + this.id + '>';\n};\nBlock.Values = {\n  START_OF_BLOCK: 8,\n  // Start of block in raw block data\n  NULL_HASH: new Buffer('0000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\nmodule.exports = Block;","map":{"version":3,"names":["_","require","BlockHeader","BN","BufferUtil","BufferReader","BufferWriter","Hash","Transaction","$","Block","arg","extend","_from","MAX_BLOCK_SIZE","info","isBuffer","_fromBufferReader","isObject","_fromObject","TypeError","data","transactions","forEach","tx","push","fromObject","header","obj","br","checkState","finished","fromBufferReader","readVarintNum","i","checkArgument","fromBuffer","buf","fromString","str","Buffer","fromRawBlock","pos","Values","START_OF_BLOCK","prototype","toObject","toJSON","toBuffer","toBufferWriter","concat","toString","bw","write","writeVarintNum","length","getTransactionHashes","hashes","NULL_HASH","t","_getHash","getMerkleTree","tree","j","size","Math","floor","i2","min","sha256sha256","getMerkleRoot","validMerkleRoot","h","merkleRoot","c","cmp","idProperty","configurable","enumerable","get","_id","id","set","noop","Object","defineProperty","inspect","module","exports"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/block/block.js"],"sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar BlockHeader = require('./blockheader');\nvar BN = require('../crypto/bn');\nvar BufferUtil = require('../util/buffer');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Transaction = require('../transaction');\nvar $ = require('../util/preconditions');\n\n/**\n * Instantiate a Block from a Buffer, JSON object, or Object with\n * the properties of the Block\n *\n * @param {*} - A Buffer, JSON string, or Object\n * @returns {Block}\n * @constructor\n */\nfunction Block(arg) {\n  if (!(this instanceof Block)) {\n    return new Block(arg);\n  }\n  _.extend(this, Block._from(arg));\n  return this;\n}\n\n// https://github.com/bitcoin/bitcoin/blob/b5fa132329f0377d787a4a21c1686609c2bfaece/src/primitives/block.h#L14\nBlock.MAX_BLOCK_SIZE = 1000000;\n\n/**\n * @param {*} - A Buffer, JSON string or Object\n * @returns {Object} - An object representing block data\n * @throws {TypeError} - If the argument was not recognized\n * @private\n */\nBlock._from = function _from(arg) {\n  var info = {};\n  if (BufferUtil.isBuffer(arg)) {\n    info = Block._fromBufferReader(BufferReader(arg));\n  } else if (_.isObject(arg)) {\n    info = Block._fromObject(arg);\n  } else {\n    throw new TypeError('Unrecognized argument for Block');\n  }\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Object} - An object representing block data\n * @private\n */\nBlock._fromObject = function _fromObject(data) {\n  var transactions = [];\n  data.transactions.forEach(function(tx) {\n    if (tx instanceof Transaction) {\n      transactions.push(tx);\n    } else {\n      transactions.push(Transaction().fromObject(tx));\n    }\n  });\n  var info = {\n    header: BlockHeader.fromObject(data.header),\n    transactions: transactions\n  };\n  return info;\n};\n\n/**\n * @param {Object} - A plain JavaScript object\n * @returns {Block} - An instance of block\n */\nBlock.fromObject = function fromObject(obj) {\n  var info = Block._fromObject(obj);\n  return new Block(info);\n};\n\n/**\n * @param {BufferReader} - Block data\n * @returns {Object} - An object representing the block data\n * @private\n */\nBlock._fromBufferReader = function _fromBufferReader(br) {\n  var info = {};\n  $.checkState(!br.finished(), 'No block data received');\n  info.header = BlockHeader.fromBufferReader(br);\n  var transactions = br.readVarintNum();\n  info.transactions = [];\n  for (var i = 0; i < transactions; i++) {\n    info.transactions.push(Transaction().fromBufferReader(br));\n  }\n  return info;\n};\n\n/**\n * @param {BufferReader} - A buffer reader of the block\n * @returns {Block} - An instance of block\n */\nBlock.fromBufferReader = function fromBufferReader(br) {\n  $.checkArgument(br, 'br is required');\n  var info = Block._fromBufferReader(br);\n  return new Block(info);\n};\n\n/**\n * @param {Buffer} - A buffer of the block\n * @returns {Block} - An instance of block\n */\nBlock.fromBuffer = function fromBuffer(buf) {\n  return Block.fromBufferReader(new BufferReader(buf));\n};\n\n/**\n * @param {string} - str - A hex encoded string of the block\n * @returns {Block} - A hex encoded string of the block\n */\nBlock.fromString = function fromString(str) {\n  var buf = new Buffer(str, 'hex');\n  return Block.fromBuffer(buf);\n};\n\n/**\n * @param {Binary} - Raw block binary data or buffer\n * @returns {Block} - An instance of block\n */\nBlock.fromRawBlock = function fromRawBlock(data) {\n  if (!BufferUtil.isBuffer(data)) {\n    data = new Buffer(data, 'binary');\n  }\n  var br = BufferReader(data);\n  br.pos = Block.Values.START_OF_BLOCK;\n  var info = Block._fromBufferReader(br);\n  return new Block(info);\n};\n\n/**\n * @returns {Object} - A plain object with the block properties\n */\nBlock.prototype.toObject = Block.prototype.toJSON = function toObject() {\n  var transactions = [];\n  this.transactions.forEach(function(tx) {\n    transactions.push(tx.toObject());\n  });\n  return {\n    header: this.header.toObject(),\n    transactions: transactions\n  };\n};\n\n/**\n * @returns {Buffer} - A buffer of the block\n */\nBlock.prototype.toBuffer = function toBuffer() {\n  return this.toBufferWriter().concat();\n};\n\n/**\n * @returns {string} - A hex encoded string of the block\n */\nBlock.prototype.toString = function toString() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * @param {BufferWriter} - An existing instance of BufferWriter\n * @returns {BufferWriter} - An instance of BufferWriter representation of the Block\n */\nBlock.prototype.toBufferWriter = function toBufferWriter(bw) {\n  if (!bw) {\n    bw = new BufferWriter();\n  }\n  bw.write(this.header.toBuffer());\n  bw.writeVarintNum(this.transactions.length);\n  for (var i = 0; i < this.transactions.length; i++) {\n    this.transactions[i].toBufferWriter(bw);\n  }\n  return bw;\n};\n\n/**\n * Will iterate through each transaction and return an array of hashes\n * @returns {Array} - An array with transaction hashes\n */\nBlock.prototype.getTransactionHashes = function getTransactionHashes() {\n  var hashes = [];\n  if (this.transactions.length === 0) {\n    return [Block.Values.NULL_HASH];\n  }\n  for (var t = 0; t < this.transactions.length; t++) {\n    hashes.push(this.transactions[t]._getHash());\n  }\n  return hashes;\n};\n\n/**\n * Will build a merkle tree of all the transactions, ultimately arriving at\n * a single point, the merkle root.\n * @link https://en.bitcoin.it/wiki/Protocol_specification#Merkle_Trees\n * @returns {Array} - An array with each level of the tree after the other.\n */\nBlock.prototype.getMerkleTree = function getMerkleTree() {\n\n  var tree = this.getTransactionHashes();\n\n  var j = 0;\n  for (var size = this.transactions.length; size > 1; size = Math.floor((size + 1) / 2)) {\n    for (var i = 0; i < size; i += 2) {\n      var i2 = Math.min(i + 1, size - 1);\n      var buf = Buffer.concat([tree[j + i], tree[j + i2]]);\n      tree.push(Hash.sha256sha256(buf));\n    }\n    j += size;\n  }\n\n  return tree;\n};\n\n/**\n * Calculates the merkleRoot from the transactions.\n * @returns {Buffer} - A buffer of the merkle root hash\n */\nBlock.prototype.getMerkleRoot = function getMerkleRoot() {\n  var tree = this.getMerkleTree();\n  return tree[tree.length - 1];\n};\n\n/**\n * Verifies that the transactions in the block match the header merkle root\n * @returns {Boolean} - If the merkle roots match\n */\nBlock.prototype.validMerkleRoot = function validMerkleRoot() {\n\n  var h = new BN(this.header.merkleRoot.toString('hex'), 'hex');\n  var c = new BN(this.getMerkleRoot().toString('hex'), 'hex');\n\n  if (h.cmp(c) !== 0) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * @returns {Buffer} - The little endian hash buffer of the header\n */\nBlock.prototype._getHash = function() {\n  return this.header._getHash();\n};\n\nvar idProperty = {\n  configurable: false,\n  enumerable: true,\n  /**\n   * @returns {string} - The big endian hash buffer of the header\n   */\n  get: function() {\n    if (!this._id) {\n      this._id = this.header.id;\n    }\n    return this._id;\n  },\n  set: _.noop\n};\nObject.defineProperty(Block.prototype, 'id', idProperty);\nObject.defineProperty(Block.prototype, 'hash', idProperty);\n\n/**\n * @returns {string} - A string formatted for the console\n */\nBlock.prototype.inspect = function inspect() {\n  return '<Block ' + this.id + '>';\n};\n\nBlock.Values = {\n  START_OF_BLOCK: 8, // Start of block in raw block data\n  NULL_HASH: new Buffer('0000000000000000000000000000000000000000000000000000000000000000', 'hex')\n};\n\nmodule.exports = Block;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}