{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function containsArg(key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  return networkMaps[arg];\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  _.each(network, function (value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      networkMaps[value] = network;\n    }\n  });\n  networks.push(network);\n  return network;\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x00,\n  privatekey: 0x80,\n  scripthash: 0x05,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xf9beb4d9,\n  port: 8333,\n  dnsSeeds: ['seed.bitcoin.sipa.be', 'dnsseed.bluematt.me', 'dnsseed.bitcoin.dashjr.org', 'seed.bitcoinstats.com', 'seed.bitnodes.io', 'bitseed.xf2.org']\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet');\naddNetwork({\n  name: 'testnet',\n  alias: 'regtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet');\n\n// Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 18333,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0x0b110907),\n  DNS_SEEDS: ['testnet-seed.bitcoin.petertodd.org', 'testnet-seed.bluematt.me', 'testnet-seed.alexykot.me', 'testnet-seed.bitcoin.schildbach.de']\n};\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\nvar REGTEST = {\n  PORT: 18444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: []\n};\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function get() {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function get() {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function get() {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\n\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","get","arg","keys","indexOf","isArray","containsArg","key","index","some","undefined","addNetwork","data","network","defineImmutable","alias","pubkeyhash","privatekey","scripthash","xpubkey","xprivkey","networkMagic","integerAsBuffer","port","dnsSeeds","each","value","isUndefined","isObject","push","removeNetwork","i","length","splice","livenet","testnet","TESTNET","PORT","NETWORK_MAGIC","DNS_SEEDS","REGTEST","Object","defineProperty","enumerable","configurable","regtestEnabled","enableRegtest","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/bitcoincashjs/src/networks.js"],"sourcesContent":["'use strict';\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function(key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.some(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  return networkMaps[arg];\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n\n  var network = new Network();\n\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  _.each(network, function(value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      networkMaps[value] = network;\n    }\n  });\n\n  networks.push(network);\n\n  return network;\n\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x00,\n  privatekey: 0x80,\n  scripthash: 0x05,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xf9beb4d9,\n  port: 8333,\n  dnsSeeds: [\n    'seed.bitcoin.sipa.be',\n    'dnsseed.bluematt.me',\n    'dnsseed.bitcoin.dashjr.org',\n    'seed.bitcoinstats.com',\n    'seed.bitnodes.io',\n    'bitseed.xf2.org'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet');\n\naddNetwork({\n  name: 'testnet',\n  alias: 'regtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet');\n\n// Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 18333,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0x0b110907),\n  DNS_SEEDS: [\n    'testnet-seed.bitcoin.petertodd.org',\n    'testnet-seed.bluematt.me',\n    'testnet-seed.alexykot.me',\n    'testnet-seed.bitcoin.schildbach.de'\n  ]\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\n\nvar REGTEST = {\n  PORT: 18444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: []\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\n\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\n\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}