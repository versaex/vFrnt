{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\screens\\\\SignUpScreen\\\\index.tsx\";\nimport cx from 'classnames';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { isUsernameEnabled } from '../../api';\nimport { Captcha, Modal, SignUpForm } from '../../components';\nimport { EMAIL_REGEX, ERROR_INVALID_EMAIL, ERROR_INVALID_PASSWORD, ERROR_PASSWORD_CONFIRMATION, PASSWORD_REGEX, passwordErrorFirstSolution, passwordErrorSecondSolution, passwordErrorThirdSolution, setDocumentTitle } from '../../helpers';\nimport { entropyPasswordFetch, resetCaptchaState as _resetCaptchaState, selectCaptchaResponse, selectConfigs, selectCurrentLanguage, selectCurrentPasswordEntropy, selectGeetestCaptchaSuccess, selectRecaptchaSuccess, selectSignUpError, selectSignUpRequireVerification, signUp as _signUp } from '../../modules';\nexport var extractRefID = function extractRefID(props) {\n  return new URLSearchParams(props.location.search).get('refid');\n};\nvar SignUp = /*#__PURE__*/function (_React$Component) {\n  _inherits(SignUp, _React$Component);\n  var _super = _createSuper(SignUp);\n  function SignUp() {\n    var _this;\n    _classCallCheck(this, SignUp);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      showModal: false,\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      refId: '',\n      hasConfirmed: false,\n      emailError: '',\n      passwordError: '',\n      confirmationError: '',\n      usernameFocused: false,\n      emailFocused: false,\n      passwordFocused: false,\n      confirmPasswordFocused: false,\n      refIdFocused: false,\n      typingTimeout: 0,\n      passwordErrorFirstSolved: false,\n      passwordErrorSecondSolved: false,\n      passwordErrorThirdSolved: false,\n      passwordPopUp: false\n    };\n    _this.myRef = React.createRef();\n    _this.passwordWrapper = React.createRef();\n    _this.renderCaptcha = function () {\n      var signUpError = _this.props.signUpError;\n      var _this$state = _this.state,\n        confirmationError = _this$state.confirmationError,\n        emailError = _this$state.emailError;\n      var error = signUpError || confirmationError || emailError;\n      return /*#__PURE__*/React.createElement(Captcha, {\n        error: error,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 16\n        }\n      });\n    };\n    _this.translate = function (key) {\n      return _this.props.intl.formatMessage({\n        id: key\n      });\n    };\n    _this.handleOutsideClick = function (event) {\n      var wrapperElement = _this.passwordWrapper.current;\n      if (wrapperElement && !wrapperElement.contains(event.target)) {\n        _this.setState({\n          passwordPopUp: false\n        });\n      }\n    };\n    _this.handleCheckboxClick = function (event) {\n      if (event) {\n        event.preventDefault();\n        _this.setState({\n          hasConfirmed: !_this.state.hasConfirmed\n        });\n      }\n    };\n    _this.handleChangeUsername = function (value) {\n      _this.setState({\n        username: value.replace(/[^A-Za-z0-9]+/g, '').toLowerCase()\n      });\n    };\n    _this.handleChangeEmail = function (value) {\n      _this.setState({\n        email: value\n      });\n    };\n    _this.handleChangePassword = function (value) {\n      var _this$state2 = _this.state,\n        passwordErrorFirstSolved = _this$state2.passwordErrorFirstSolved,\n        passwordErrorSecondSolved = _this$state2.passwordErrorSecondSolved,\n        passwordErrorThirdSolved = _this$state2.passwordErrorThirdSolved;\n      if (passwordErrorFirstSolution(value) && !passwordErrorFirstSolved) {\n        _this.setState({\n          passwordErrorFirstSolved: true\n        });\n      } else if (!passwordErrorFirstSolution(value) && passwordErrorFirstSolved) {\n        _this.setState({\n          passwordErrorFirstSolved: false\n        });\n      }\n      if (passwordErrorSecondSolution(value) && !passwordErrorSecondSolved) {\n        _this.setState({\n          passwordErrorSecondSolved: true\n        });\n      } else if (!passwordErrorSecondSolution(value) && passwordErrorSecondSolved) {\n        _this.setState({\n          passwordErrorSecondSolved: false\n        });\n      }\n      if (passwordErrorThirdSolution(value) && !passwordErrorThirdSolved) {\n        _this.setState({\n          passwordErrorThirdSolved: true\n        });\n      } else if (!passwordErrorThirdSolution(value) && passwordErrorThirdSolved) {\n        _this.setState({\n          passwordErrorThirdSolved: false\n        });\n      }\n      if (_this.state.typingTimeout) {\n        clearTimeout(_this.state.typingTimeout);\n      }\n      _this.setState({\n        password: value,\n        typingTimeout: setTimeout(function () {\n          _this.props.fetchCurrentPasswordEntropy({\n            password: value\n          });\n        }, 500)\n      });\n    };\n    _this.handleChangeConfirmPassword = function (value) {\n      _this.setState({\n        confirmPassword: value\n      });\n    };\n    _this.handleChangeRefId = function (value) {\n      _this.setState({\n        refId: value\n      });\n    };\n    _this.handleFocusUsername = function () {\n      _this.setState({\n        usernameFocused: !_this.state.usernameFocused\n      });\n    };\n    _this.handleFocusEmail = function () {\n      _this.setState({\n        emailFocused: !_this.state.emailFocused\n      });\n    };\n    _this.handleFocusPassword = function () {\n      _this.setState({\n        passwordFocused: !_this.state.passwordFocused,\n        passwordPopUp: !_this.state.passwordPopUp\n      });\n    };\n    _this.handleFocusConfirmPassword = function () {\n      _this.setState({\n        confirmPasswordFocused: !_this.state.confirmPasswordFocused\n      });\n    };\n    _this.handleFocusRefId = function () {\n      _this.setState({\n        refIdFocused: !_this.state.refIdFocused\n      });\n    };\n    _this.handleSignIn = function () {\n      _this.props.history.push('/signin');\n    };\n    _this.handleSignUp = function () {\n      var _this$props = _this.props,\n        configs = _this$props.configs,\n        i18n = _this$props.i18n,\n        captcha_response = _this$props.captcha_response;\n      var _this$state3 = _this.state,\n        username = _this$state3.username,\n        email = _this$state3.email,\n        password = _this$state3.password,\n        refId = _this$state3.refId;\n      var payload = {\n        email: email,\n        password: password,\n        data: JSON.stringify({\n          language: i18n\n        })\n      };\n      if (isUsernameEnabled()) {\n        payload = _objectSpread(_objectSpread({}, payload), {}, {\n          username: username\n        });\n      }\n      if (refId) {\n        payload = _objectSpread(_objectSpread({}, payload), {}, {\n          refid: refId\n        });\n      }\n      switch (configs.captcha_type) {\n        case 'recaptcha':\n        case 'geetest':\n          payload = _objectSpread(_objectSpread({}, payload), {}, {\n            captcha_response: captcha_response\n          });\n          _this.props.signUp(payload);\n          break;\n        default:\n          _this.props.signUp(payload);\n          break;\n      }\n      _this.props.resetCaptchaState();\n    };\n    _this.renderModalHeader = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-header\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.header'\n      }));\n    };\n    _this.renderModalBody = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-body\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 17\n        }\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.body'\n      })));\n    };\n    _this.renderModalFooter = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-exchange-modal-submit-footer\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        onClick: _this.closeModal,\n        size: \"lg\",\n        variant: \"primary\",\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }\n      }, _this.props.intl.formatMessage({\n        id: 'page.header.signUp.modal.footer'\n      })));\n    };\n    _this.closeModal = function () {\n      _this.setState({\n        showModal: false\n      });\n      _this.props.history.push('/signin');\n    };\n    _this.extractRefID = function (url) {\n      return new URLSearchParams(url).get('refid');\n    };\n    _this.handleValidateForm = function () {\n      var _this$state4 = _this.state,\n        email = _this$state4.email,\n        password = _this$state4.password,\n        confirmPassword = _this$state4.confirmPassword;\n      var isEmailValid = email.match(EMAIL_REGEX);\n      var isPasswordValid = password.match(PASSWORD_REGEX);\n      var isConfirmPasswordValid = password === confirmPassword;\n      if (!isEmailValid && !isPasswordValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_PASSWORD\n          }),\n          hasConfirmed: false\n        });\n        return;\n      }\n      if (!isEmailValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_EMAIL\n          }),\n          passwordError: '',\n          hasConfirmed: false\n        });\n        return;\n      }\n      if (!isPasswordValid) {\n        _this.setState({\n          confirmationError: '',\n          emailError: '',\n          passwordError: _this.props.intl.formatMessage({\n            id: ERROR_INVALID_PASSWORD\n          }),\n          hasConfirmed: false\n        });\n        return;\n      }\n      if (!isConfirmPasswordValid) {\n        _this.setState({\n          confirmationError: _this.props.intl.formatMessage({\n            id: ERROR_PASSWORD_CONFIRMATION\n          }),\n          emailError: '',\n          passwordError: '',\n          hasConfirmed: false\n        });\n        return;\n      }\n    };\n    return _this;\n  }\n  _createClass(SignUp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Sign Up');\n      var localReferralCode = localStorage.getItem('referralCode');\n      var refId = this.extractRefID(this.props.location.search);\n      var referralCode = refId || localReferralCode || '';\n      this.setState({\n        refId: referralCode\n      });\n      if (refId && refId !== localReferralCode) {\n        localStorage.setItem('referralCode', referralCode);\n      }\n      document.addEventListener('click', this.handleOutsideClick, false);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prev) {\n      var email = this.state.email;\n      if (!prev.requireVerification && this.props.requireVerification) {\n        this.props.history.push('/email-verification', {\n          email: email\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        configs = _this$props2.configs,\n        loading = _this$props2.loading,\n        currentPasswordEntropy = _this$props2.currentPasswordEntropy,\n        captcha_response = _this$props2.captcha_response,\n        reCaptchaSuccess = _this$props2.reCaptchaSuccess,\n        geetestCaptchaSuccess = _this$props2.geetestCaptchaSuccess;\n      var _this$state5 = this.state,\n        username = _this$state5.username,\n        email = _this$state5.email,\n        password = _this$state5.password,\n        confirmPassword = _this$state5.confirmPassword,\n        refId = _this$state5.refId,\n        hasConfirmed = _this$state5.hasConfirmed,\n        emailError = _this$state5.emailError,\n        passwordError = _this$state5.passwordError,\n        confirmationError = _this$state5.confirmationError,\n        usernameFocused = _this$state5.usernameFocused,\n        emailFocused = _this$state5.emailFocused,\n        passwordFocused = _this$state5.passwordFocused,\n        confirmPasswordFocused = _this$state5.confirmPasswordFocused,\n        refIdFocused = _this$state5.refIdFocused,\n        passwordErrorFirstSolved = _this$state5.passwordErrorFirstSolved,\n        passwordErrorSecondSolved = _this$state5.passwordErrorSecondSolved,\n        passwordErrorThirdSolved = _this$state5.passwordErrorThirdSolved,\n        passwordPopUp = _this$state5.passwordPopUp;\n      var className = cx('pg-sign-up-screen__container', {\n        loading: loading\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-sign-up-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(SignUpForm, {\n        labelSignIn: this.props.intl.formatMessage({\n          id: 'page.header.signIn'\n        }),\n        labelSignUp: this.props.intl.formatMessage({\n          id: 'page.header.signUp'\n        }),\n        emailLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.email'\n        }),\n        passwordLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.password'\n        }),\n        confirmPasswordLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.confirmPassword'\n        }),\n        referalCodeLabel: this.props.intl.formatMessage({\n          id: 'page.header.signUp.referalCode'\n        }),\n        termsMessage: this.props.intl.formatMessage({\n          id: 'page.header.signUp.terms'\n        }),\n        refId: refId,\n        handleChangeRefId: this.handleChangeRefId,\n        isLoading: loading,\n        onSignIn: this.handleSignIn,\n        onSignUp: this.handleSignUp,\n        username: username,\n        handleChangeUsername: this.handleChangeUsername,\n        email: email,\n        handleChangeEmail: this.handleChangeEmail,\n        password: password,\n        handleChangePassword: this.handleChangePassword,\n        confirmPassword: confirmPassword,\n        handleChangeConfirmPassword: this.handleChangeConfirmPassword,\n        hasConfirmed: hasConfirmed,\n        clickCheckBox: this.handleCheckboxClick,\n        validateForm: this.handleValidateForm,\n        emailError: emailError,\n        passwordError: passwordError,\n        confirmationError: confirmationError,\n        confirmPasswordFocused: confirmPasswordFocused,\n        refIdFocused: refIdFocused,\n        usernameFocused: usernameFocused,\n        emailFocused: emailFocused,\n        passwordFocused: passwordFocused,\n        handleFocusUsername: this.handleFocusUsername,\n        handleFocusEmail: this.handleFocusEmail,\n        handleFocusPassword: this.handleFocusPassword,\n        handleFocusConfirmPassword: this.handleFocusConfirmPassword,\n        handleFocusRefId: this.handleFocusRefId,\n        captchaType: configs.captcha_type,\n        renderCaptcha: this.renderCaptcha(),\n        reCaptchaSuccess: reCaptchaSuccess,\n        geetestCaptchaSuccess: geetestCaptchaSuccess,\n        captcha_response: captcha_response,\n        currentPasswordEntropy: currentPasswordEntropy,\n        minPasswordEntropy: configs.password_min_entropy,\n        passwordErrorFirstSolved: passwordErrorFirstSolved,\n        passwordErrorSecondSolved: passwordErrorSecondSolved,\n        passwordErrorThirdSolved: passwordErrorThirdSolved,\n        passwordPopUp: passwordPopUp,\n        myRef: this.myRef,\n        passwordWrapper: this.passwordWrapper,\n        translate: this.translate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.showModal,\n        header: this.renderModalHeader(),\n        content: this.renderModalBody(),\n        footer: this.renderModalFooter(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n  return SignUp;\n}(React.Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    configs: selectConfigs(state),\n    i18n: selectCurrentLanguage(state),\n    requireVerification: selectSignUpRequireVerification(state),\n    signUpError: selectSignUpError(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state)\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    signUp: function signUp(credentials) {\n      return dispatch(_signUp(credentials));\n    },\n    fetchCurrentPasswordEntropy: function fetchCurrentPasswordEntropy(payload) {\n      return dispatch(entropyPasswordFetch(payload));\n    },\n    resetCaptchaState: function resetCaptchaState() {\n      return dispatch(_resetCaptchaState());\n    }\n  };\n};\nexport var SignUpScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(SignUp);","map":{"version":3,"names":["cx","React","Button","injectIntl","connect","withRouter","compose","isUsernameEnabled","Captcha","Modal","SignUpForm","EMAIL_REGEX","ERROR_INVALID_EMAIL","ERROR_INVALID_PASSWORD","ERROR_PASSWORD_CONFIRMATION","PASSWORD_REGEX","passwordErrorFirstSolution","passwordErrorSecondSolution","passwordErrorThirdSolution","setDocumentTitle","entropyPasswordFetch","resetCaptchaState","selectCaptchaResponse","selectConfigs","selectCurrentLanguage","selectCurrentPasswordEntropy","selectGeetestCaptchaSuccess","selectRecaptchaSuccess","selectSignUpError","selectSignUpRequireVerification","signUp","extractRefID","props","URLSearchParams","location","search","get","SignUp","state","showModal","username","email","password","confirmPassword","refId","hasConfirmed","emailError","passwordError","confirmationError","usernameFocused","emailFocused","passwordFocused","confirmPasswordFocused","refIdFocused","typingTimeout","passwordErrorFirstSolved","passwordErrorSecondSolved","passwordErrorThirdSolved","passwordPopUp","myRef","createRef","passwordWrapper","renderCaptcha","signUpError","error","translate","key","intl","formatMessage","id","handleOutsideClick","event","wrapperElement","current","contains","target","setState","handleCheckboxClick","preventDefault","handleChangeUsername","value","replace","toLowerCase","handleChangeEmail","handleChangePassword","clearTimeout","setTimeout","fetchCurrentPasswordEntropy","handleChangeConfirmPassword","handleChangeRefId","handleFocusUsername","handleFocusEmail","handleFocusPassword","handleFocusConfirmPassword","handleFocusRefId","handleSignIn","history","push","handleSignUp","configs","i18n","captcha_response","payload","data","JSON","stringify","language","refid","captcha_type","renderModalHeader","renderModalBody","renderModalFooter","closeModal","url","handleValidateForm","isEmailValid","match","isPasswordValid","isConfirmPasswordValid","localReferralCode","localStorage","getItem","referralCode","setItem","document","addEventListener","prev","requireVerification","removeEventListener","loading","currentPasswordEntropy","reCaptchaSuccess","geetestCaptchaSuccess","className","password_min_entropy","Component","mapStateToProps","mapDispatchToProps","dispatch","credentials","SignUpScreen"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/screens/SignUpScreen/index.tsx"],"sourcesContent":["import cx from 'classnames';\nimport { History } from 'history';\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n    injectIntl,\n} from 'react-intl';\nimport {\n    connect,\n    MapDispatchToPropsFunction,\n    MapStateToProps,\n} from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { isUsernameEnabled } from '../../api';\nimport { Captcha, Modal, SignUpForm } from '../../components';\nimport {\n    EMAIL_REGEX,\n    ERROR_INVALID_EMAIL,\n    ERROR_INVALID_PASSWORD,\n    ERROR_PASSWORD_CONFIRMATION,\n    PASSWORD_REGEX,\n    passwordErrorFirstSolution,\n    passwordErrorSecondSolution,\n    passwordErrorThirdSolution,\n    setDocumentTitle,\n} from '../../helpers';\nimport {\n    Configs,\n    entropyPasswordFetch, GeetestCaptchaResponse,\n    LanguageState,\n    resetCaptchaState,\n    RootState,\n    selectCaptchaResponse,\n    selectConfigs,\n    selectCurrentLanguage,\n    selectCurrentPasswordEntropy,\n    selectGeetestCaptchaSuccess,\n    selectRecaptchaSuccess,\n    selectSignUpError,\n    selectSignUpRequireVerification,\n    signUp,\n} from '../../modules';\n\ninterface ReduxProps {\n    configs: Configs;\n    requireVerification?: boolean;\n    loading?: boolean;\n    currentPasswordEntropy: number;\n    captcha_response?: string | GeetestCaptchaResponse;\n    reCaptchaSuccess: boolean;\n    geetestCaptchaSuccess: boolean;\n}\n\ninterface DispatchProps {\n    signUp: typeof signUp;\n    fetchCurrentPasswordEntropy: typeof entropyPasswordFetch;\n    resetCaptchaState: typeof resetCaptchaState;\n}\n\ninterface RouterProps {\n    location: {\n        search: string;\n    };\n    history: History;\n}\n\ninterface OwnProps {\n    signUpError: boolean;\n    i18n: LanguageState['lang'];\n}\n\ntype Props = ReduxProps & DispatchProps & RouterProps & IntlProps & OwnProps;\n\nexport const extractRefID = (props: RouterProps) => new URLSearchParams(props.location.search).get('refid');\n\nclass SignUp extends React.Component<Props> {\n    public readonly state = {\n        showModal: false,\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        refId: '',\n        hasConfirmed: false,\n        emailError: '',\n        passwordError: '',\n        confirmationError: '',\n        usernameFocused: false,\n        emailFocused: false,\n        passwordFocused: false,\n        confirmPasswordFocused: false,\n        refIdFocused: false,\n        typingTimeout: 0,\n        passwordErrorFirstSolved: false,\n        passwordErrorSecondSolved: false,\n        passwordErrorThirdSolved: false,\n        passwordPopUp: false,\n    };\n\n    private myRef = React.createRef<HTMLInputElement>();\n    private passwordWrapper = React.createRef<HTMLDivElement>();\n\n    public componentDidMount() {\n        setDocumentTitle('Sign Up');\n        const localReferralCode = localStorage.getItem('referralCode');\n        const refId = this.extractRefID(this.props.location.search);\n        const referralCode = refId || localReferralCode || '';\n        this.setState({\n            refId: referralCode,\n        });\n        if (refId && refId !== localReferralCode) {\n            localStorage.setItem('referralCode', referralCode);\n        }\n\n        document.addEventListener('click', this.handleOutsideClick, false);\n    }\n\n    public componentDidUpdate(prev: Props) {\n        const { email } = this.state;\n\n        if (!prev.requireVerification && this.props.requireVerification) {\n            this.props.history.push('/email-verification', {email: email});\n        }\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    public renderCaptcha = () => {\n        const { signUpError } = this.props;\n        const { confirmationError, emailError } = this.state;\n\n        const error = signUpError || confirmationError || emailError;\n\n        return <Captcha error={error} />;\n    };\n\n    public render() {\n        const {\n            configs,\n            loading,\n            currentPasswordEntropy,\n            captcha_response,\n            reCaptchaSuccess,\n            geetestCaptchaSuccess,\n        } = this.props;\n        const {\n            username,\n            email,\n            password,\n            confirmPassword,\n            refId,\n            hasConfirmed,\n            emailError,\n            passwordError,\n            confirmationError,\n            usernameFocused,\n            emailFocused,\n            passwordFocused,\n            confirmPasswordFocused,\n            refIdFocused,\n            passwordErrorFirstSolved,\n            passwordErrorSecondSolved,\n            passwordErrorThirdSolved,\n            passwordPopUp,\n        } = this.state;\n\n        const className = cx('pg-sign-up-screen__container', { loading });\n\n        return (\n            <div className=\"pg-sign-up-screen\">\n                <div className={className}>\n                    <SignUpForm\n                        labelSignIn={this.props.intl.formatMessage({ id: 'page.header.signIn'})}\n                        labelSignUp={this.props.intl.formatMessage({ id: 'page.header.signUp'})}\n                        emailLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.email'})}\n                        passwordLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.password'})}\n                        confirmPasswordLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.confirmPassword'})}\n                        referalCodeLabel={this.props.intl.formatMessage({ id: 'page.header.signUp.referalCode'})}\n                        termsMessage={this.props.intl.formatMessage({ id: 'page.header.signUp.terms'})}\n                        refId={refId}\n                        handleChangeRefId={this.handleChangeRefId}\n                        isLoading={loading}\n                        onSignIn={this.handleSignIn}\n                        onSignUp={this.handleSignUp}\n                        username={username}\n                        handleChangeUsername={this.handleChangeUsername}\n                        email={email}\n                        handleChangeEmail={this.handleChangeEmail}\n                        password={password}\n                        handleChangePassword={this.handleChangePassword}\n                        confirmPassword={confirmPassword}\n                        handleChangeConfirmPassword={this.handleChangeConfirmPassword}\n                        hasConfirmed={hasConfirmed}\n                        clickCheckBox={this.handleCheckboxClick}\n                        validateForm={this.handleValidateForm}\n                        emailError={emailError}\n                        passwordError={passwordError}\n                        confirmationError={confirmationError}\n                        confirmPasswordFocused={confirmPasswordFocused}\n                        refIdFocused={refIdFocused}\n                        usernameFocused={usernameFocused}\n                        emailFocused={emailFocused}\n                        passwordFocused={passwordFocused}\n                        handleFocusUsername={this.handleFocusUsername}\n                        handleFocusEmail={this.handleFocusEmail}\n                        handleFocusPassword={this.handleFocusPassword}\n                        handleFocusConfirmPassword={this.handleFocusConfirmPassword}\n                        handleFocusRefId={this.handleFocusRefId}\n                        captchaType={configs.captcha_type}\n                        renderCaptcha={this.renderCaptcha()}\n                        reCaptchaSuccess={reCaptchaSuccess}\n                        geetestCaptchaSuccess={geetestCaptchaSuccess}\n                        captcha_response={captcha_response}\n                        currentPasswordEntropy={currentPasswordEntropy}\n                        minPasswordEntropy={configs.password_min_entropy}\n                        passwordErrorFirstSolved={passwordErrorFirstSolved}\n                        passwordErrorSecondSolved={passwordErrorSecondSolved}\n                        passwordErrorThirdSolved={passwordErrorThirdSolved}\n                        passwordPopUp={passwordPopUp}\n                        myRef={this.myRef}\n                        passwordWrapper={this.passwordWrapper}\n                        translate={this.translate}\n                    />\n                    <Modal\n                        show={this.state.showModal}\n                        header={this.renderModalHeader()}\n                        content={this.renderModalBody()}\n                        footer={this.renderModalFooter()}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private translate = (key: string) => this.props.intl.formatMessage({id: key});\n\n    private handleOutsideClick = event => {\n        const wrapperElement = this.passwordWrapper.current;\n\n        if (wrapperElement && !wrapperElement.contains(event.target)) {\n            this.setState({\n                passwordPopUp: false,\n            });\n        }\n    };\n\n    private handleCheckboxClick = event => {\n        if (event) {\n            event.preventDefault();\n\n            this.setState({\n                hasConfirmed: !this.state.hasConfirmed,\n            });\n        }\n    };\n\n    private handleChangeUsername = (value: string) => {\n        this.setState({\n            username: value.replace(/[^A-Za-z0-9]+/g, '').toLowerCase(),\n        });\n    };\n\n    private handleChangeEmail = (value: string) => {\n        this.setState({\n            email: value,\n        });\n    };\n\n    private handleChangePassword = (value: string) => {\n        const { passwordErrorFirstSolved, passwordErrorSecondSolved, passwordErrorThirdSolved } = this.state;\n\n        if (passwordErrorFirstSolution(value) && !passwordErrorFirstSolved) {\n            this.setState({\n                passwordErrorFirstSolved: true,\n            });\n        } else if (!passwordErrorFirstSolution(value) && passwordErrorFirstSolved) {\n            this.setState({\n                passwordErrorFirstSolved: false,\n            });\n        }\n\n        if (passwordErrorSecondSolution(value) && !passwordErrorSecondSolved) {\n            this.setState({\n                passwordErrorSecondSolved: true,\n            });\n        } else if (!passwordErrorSecondSolution(value) && passwordErrorSecondSolved) {\n            this.setState({\n                passwordErrorSecondSolved: false,\n            });\n        }\n\n        if (passwordErrorThirdSolution(value) && !passwordErrorThirdSolved) {\n            this.setState({\n                passwordErrorThirdSolved: true,\n            });\n        } else if (!passwordErrorThirdSolution(value) && passwordErrorThirdSolved) {\n            this.setState({\n                passwordErrorThirdSolved: false,\n            });\n        }\n\n        if (this.state.typingTimeout) {\n            clearTimeout(this.state.typingTimeout);\n         }\n\n        this.setState({\n            password: value,\n            typingTimeout: setTimeout(() => {\n                this.props.fetchCurrentPasswordEntropy({ password: value });\n            }, 500),\n        });\n    };\n\n    private handleChangeConfirmPassword = (value: string) => {\n        this.setState({\n            confirmPassword: value,\n        });\n    };\n\n    private handleChangeRefId = (value: string) => {\n        this.setState({\n            refId: value,\n        });\n    };\n\n    private handleFocusUsername = () => {\n        this.setState({\n            usernameFocused: !this.state.usernameFocused,\n        });\n    };\n\n    private handleFocusEmail = () => {\n        this.setState({\n            emailFocused: !this.state.emailFocused,\n        });\n    };\n\n    private handleFocusPassword = () => {\n        this.setState({\n            passwordFocused: !this.state.passwordFocused,\n            passwordPopUp: !this.state.passwordPopUp,\n        });\n    };\n\n    private handleFocusConfirmPassword = () => {\n        this.setState({\n            confirmPasswordFocused: !this.state.confirmPasswordFocused,\n        });\n    };\n\n    private handleFocusRefId = () => {\n        this.setState({\n            refIdFocused: !this.state.refIdFocused,\n        });\n    };\n\n    private handleSignIn = () => {\n        this.props.history.push('/signin');\n    };\n\n    private handleSignUp = () => {\n        const { configs, i18n, captcha_response } = this.props;\n        const {\n            username,\n            email,\n            password,\n            refId,\n        } = this.state;\n        let payload: any = {\n            email,\n            password,\n            data: JSON.stringify({\n                language: i18n,\n            }),\n        };\n\n        if (isUsernameEnabled()) {\n            payload = { ...payload, username };\n        }\n\n        if (refId) {\n            payload = { ...payload, refid: refId };\n        }\n\n        switch (configs.captcha_type) {\n            case 'recaptcha':\n            case 'geetest':\n                payload = { ...payload, captcha_response };\n\n                this.props.signUp(payload);\n                break;\n            default:\n                this.props.signUp(payload);\n                break;\n        }\n\n        this.props.resetCaptchaState();\n    };\n\n    private renderModalHeader = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-header\">\n                {this.props.intl.formatMessage({id: 'page.header.signUp.modal.header'})}\n            </div>\n        );\n    };\n\n    private renderModalBody = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-body\">\n                <h2>\n                    {this.props.intl.formatMessage({id: 'page.header.signUp.modal.body'})}\n                </h2>\n            </div>\n        );\n    };\n\n    private renderModalFooter = () => {\n        return (\n            <div className=\"pg-exchange-modal-submit-footer\">\n                <Button\n                    block={true}\n                    onClick={this.closeModal}\n                    size=\"lg\"\n                    variant=\"primary\"\n                >\n                    {this.props.intl.formatMessage({id: 'page.header.signUp.modal.footer'})}\n                </Button>\n            </div>\n        );\n    };\n\n    private closeModal = () => {\n        this.setState({showModal: false});\n        this.props.history.push('/signin');\n    };\n\n    private extractRefID = (url: string) => new URLSearchParams(url).get('refid');\n\n    private handleValidateForm = () => {\n        const {email, password, confirmPassword} = this.state;\n        const isEmailValid = email.match(EMAIL_REGEX);\n        const isPasswordValid = password.match(PASSWORD_REGEX);\n        const isConfirmPasswordValid = password === confirmPassword;\n\n        if (!isEmailValid && !isPasswordValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: this.props.intl.formatMessage({ id: ERROR_INVALID_PASSWORD }),\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n\n        if (!isEmailValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: this.props.intl.formatMessage({ id: ERROR_INVALID_EMAIL }),\n                passwordError: '',\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n\n        if (!isPasswordValid) {\n            this.setState({\n                confirmationError: '',\n                emailError: '',\n                passwordError: this.props.intl.formatMessage({ id: ERROR_INVALID_PASSWORD }),\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n\n        if (!isConfirmPasswordValid) {\n            this.setState({\n                confirmationError: this.props.intl.formatMessage({ id: ERROR_PASSWORD_CONFIRMATION }),\n                emailError: '',\n                passwordError: '',\n                hasConfirmed: false,\n            });\n\n            return;\n        }\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    configs: selectConfigs(state),\n    i18n: selectCurrentLanguage(state),\n    requireVerification: selectSignUpRequireVerification(state),\n    signUpError: selectSignUpError(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    captcha_response: selectCaptchaResponse(state),\n    reCaptchaSuccess: selectRecaptchaSuccess(state),\n    geetestCaptchaSuccess: selectGeetestCaptchaSuccess(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        signUp: credentials => dispatch(signUp(credentials)),\n        fetchCurrentPasswordEntropy: payload => dispatch(entropyPasswordFetch(payload)),\n        resetCaptchaState: () => dispatch(resetCaptchaState()),\n    });\n\nexport const SignUpScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(SignUp) as React.ComponentClass;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}