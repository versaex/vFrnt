{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nvar Scope = /** @class */function () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n    this._breadcrumbs = [];\n    /** User */\n    this._user = {};\n    /** Tags */\n    this._tags = {};\n    /** Extra */\n    this._extra = {};\n    /** Contexts */\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = __spread(scope._breadcrumbs);\n      newScope._tags = __assign({}, scope._tags);\n      newScope._extra = __assign({}, scope._extra);\n      newScope._contexts = __assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = __spread(scope._eventProcessors);\n    }\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTags = function (tags) {\n    this._tags = __assign(__assign({}, this._tags), tags);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n    this._tags = __assign(__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = __assign(__assign({}, this._extra), extras);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n    this._extra = __assign(__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = __assign(__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d;\n    // often, this span will be a transaction, but it's not guaranteed to be\n    var span = this.getSpan();\n    // try it the new way first\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    }\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    }\n    // neither way found a transaction\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n    if (captureContext instanceof Scope) {\n      this._tags = __assign(__assign({}, this._tags), captureContext._tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext._extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts);\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = __assign(__assign({}, this._tags), captureContext.tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext.extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts);\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = __assign({\n      timestamp: dateTimestampInSeconds()\n    }, breadcrumb);\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : __spread(this._breadcrumbs, [mergedBreadcrumb]);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = __assign(__assign({}, this._extra), event.extra);\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = __assign(__assign({}, this._tags), event.tags);\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = __assign(__assign({}, this._user), event.user);\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = __assign(__assign({}, this._contexts), event.contexts);\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = __assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n      if (transactionName) {\n        event.tags = __assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n    this._applyFingerprint(event);\n    event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n    if (index === void 0) {\n      index = 0;\n    }\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(__assign({}, event), hint);\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this;\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(function (callback) {\n        callback(_this);\n      });\n      this._notifyingListeners = false;\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n  return Scope;\n}();\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":{"version":3,"sources":["../src/scope.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}