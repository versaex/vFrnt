{"ast":null,"code":"import { SameValue, TimeClip } from '../262';\nimport { ToLocalTime } from './ToLocalTime';\nimport { FormatDateTimePattern } from './FormatDateTimePattern';\nimport { PartitionPattern } from '../PartitionPattern';\nvar TABLE_2_FIELDS = ['era', 'year', 'month', 'day', 'ampm', 'hour', 'minute', 'second'];\nexport function PartitionDateTimeRangePattern(dtf, x, y, implDetails) {\n  x = TimeClip(x);\n  if (isNaN(x)) {\n    throw new RangeError('Invalid start time');\n  }\n  y = TimeClip(y);\n  if (isNaN(y)) {\n    throw new RangeError('Invalid end time');\n  }\n  /** IMPL START */\n  var getInternalSlots = implDetails.getInternalSlots,\n    tzData = implDetails.tzData;\n  var internalSlots = getInternalSlots(dtf);\n  /** IMPL END */\n  var tm1 = ToLocalTime(x,\n  // @ts-ignore\n  internalSlots.calendar, internalSlots.timeZone, {\n    tzData: tzData\n  });\n  var tm2 = ToLocalTime(y,\n  // @ts-ignore\n  internalSlots.calendar, internalSlots.timeZone, {\n    tzData: tzData\n  });\n  var pattern = internalSlots.pattern,\n    rangePatterns = internalSlots.rangePatterns;\n  var rangePattern;\n  var dateFieldsPracticallyEqual = true;\n  var patternContainsLargerDateField = false;\n  for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {\n    var fieldName = TABLE_2_FIELDS_1[_i];\n    if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {\n      if (fieldName === 'ampm') {\n        var v1 = tm1.hour;\n        var v2 = tm2.hour;\n        var rp = rangePatterns.ampm;\n        if (v1 > 11 && v2 < 11 || v1 < 11 && v2 > 11) {\n          dateFieldsPracticallyEqual = false;\n        }\n        if (rangePattern !== undefined && rp === undefined) {\n          patternContainsLargerDateField = true;\n        }\n        rangePattern = rp;\n      } else {\n        var v1 = tm1[fieldName];\n        var v2 = tm2[fieldName];\n        var rp = rangePatterns[fieldName];\n        if (!SameValue(v1, v2)) {\n          dateFieldsPracticallyEqual = false;\n        }\n        if (rangePattern !== undefined && rp === undefined) {\n          patternContainsLargerDateField = true;\n        }\n        rangePattern = rp;\n      }\n    }\n  }\n  if (dateFieldsPracticallyEqual) {\n    var result_2 = FormatDateTimePattern(dtf, PartitionPattern(pattern), x, implDetails);\n    for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {\n      var r = result_1[_a];\n      r.source = \"shared\" /* shared */;\n    }\n\n    return result_2;\n  }\n  var result = [];\n  if (rangePattern === undefined) {\n    rangePattern = rangePatterns.default;\n  }\n  for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {\n    var rangePatternPart = _c[_b];\n    var source = rangePatternPart.source,\n      pattern_1 = rangePatternPart.pattern;\n    var z = void 0;\n    if (source === \"startRange\" /* startRange */ || source === \"shared\" /* shared */) {\n      z = x;\n    } else {\n      z = y;\n    }\n    var patternParts = PartitionPattern(pattern_1);\n    var partResult = FormatDateTimePattern(dtf, patternParts, z, implDetails);\n    for (var _d = 0, partResult_1 = partResult; _d < partResult_1.length; _d++) {\n      var r = partResult_1[_d];\n      r.source = source;\n    }\n    result = result.concat(partResult);\n  }\n  return result;\n}","map":{"version":3,"names":["SameValue","TimeClip","ToLocalTime","FormatDateTimePattern","PartitionPattern","TABLE_2_FIELDS","PartitionDateTimeRangePattern","dtf","x","y","implDetails","isNaN","RangeError","getInternalSlots","tzData","internalSlots","tm1","calendar","timeZone","tm2","pattern","rangePatterns","rangePattern","dateFieldsPracticallyEqual","patternContainsLargerDateField","_i","TABLE_2_FIELDS_1","length","fieldName","v1","hour","v2","rp","ampm","undefined","result_2","_a","result_1","r","source","result","default","_b","_c","patternParts","rangePatternPart","pattern_1","z","partResult","_d","partResult_1","concat"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/@formatjs/ecma402-abstract/lib/DateTimeFormat/PartitionDateTimeRangePattern.js"],"sourcesContent":["import { SameValue, TimeClip } from '../262';\nimport { ToLocalTime } from './ToLocalTime';\nimport { FormatDateTimePattern, } from './FormatDateTimePattern';\nimport { PartitionPattern } from '../PartitionPattern';\nvar TABLE_2_FIELDS = [\n    'era',\n    'year',\n    'month',\n    'day',\n    'ampm',\n    'hour',\n    'minute',\n    'second',\n];\nexport function PartitionDateTimeRangePattern(dtf, x, y, implDetails) {\n    x = TimeClip(x);\n    if (isNaN(x)) {\n        throw new RangeError('Invalid start time');\n    }\n    y = TimeClip(y);\n    if (isNaN(y)) {\n        throw new RangeError('Invalid end time');\n    }\n    /** IMPL START */\n    var getInternalSlots = implDetails.getInternalSlots, tzData = implDetails.tzData;\n    var internalSlots = getInternalSlots(dtf);\n    /** IMPL END */\n    var tm1 = ToLocalTime(x, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var tm2 = ToLocalTime(y, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var pattern = internalSlots.pattern, rangePatterns = internalSlots.rangePatterns;\n    var rangePattern;\n    var dateFieldsPracticallyEqual = true;\n    var patternContainsLargerDateField = false;\n    for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {\n        var fieldName = TABLE_2_FIELDS_1[_i];\n        if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {\n            if (fieldName === 'ampm') {\n                var v1 = tm1.hour;\n                var v2 = tm2.hour;\n                var rp = rangePatterns.ampm;\n                if ((v1 > 11 && v2 < 11) || (v1 < 11 && v2 > 11)) {\n                    dateFieldsPracticallyEqual = false;\n                }\n                if (rangePattern !== undefined && rp === undefined) {\n                    patternContainsLargerDateField = true;\n                }\n                rangePattern = rp;\n            }\n            else {\n                var v1 = tm1[fieldName];\n                var v2 = tm2[fieldName];\n                var rp = rangePatterns[fieldName];\n                if (!SameValue(v1, v2)) {\n                    dateFieldsPracticallyEqual = false;\n                }\n                if (rangePattern !== undefined && rp === undefined) {\n                    patternContainsLargerDateField = true;\n                }\n                rangePattern = rp;\n            }\n        }\n    }\n    if (dateFieldsPracticallyEqual) {\n        var result_2 = FormatDateTimePattern(dtf, PartitionPattern(pattern), x, implDetails);\n        for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {\n            var r = result_1[_a];\n            r.source = \"shared\" /* shared */;\n        }\n        return result_2;\n    }\n    var result = [];\n    if (rangePattern === undefined) {\n        rangePattern = rangePatterns.default;\n    }\n    for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {\n        var rangePatternPart = _c[_b];\n        var source = rangePatternPart.source, pattern_1 = rangePatternPart.pattern;\n        var z = void 0;\n        if (source === \"startRange\" /* startRange */ ||\n            source === \"shared\" /* shared */) {\n            z = x;\n        }\n        else {\n            z = y;\n        }\n        var patternParts = PartitionPattern(pattern_1);\n        var partResult = FormatDateTimePattern(dtf, patternParts, z, implDetails);\n        for (var _d = 0, partResult_1 = partResult; _d < partResult_1.length; _d++) {\n            var r = partResult_1[_d];\n            r.source = source;\n        }\n        result = result.concat(partResult);\n    }\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}