{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Elton\\\\OneDrive\\\\Desktop\\\\baseapp-2024\\\\src\\\\screens\\\\ChangeForgottenPasswordScreen\\\\index.tsx\";\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { ChangePassword } from '../../components';\nimport { setDocumentTitle } from '../../helpers';\nimport { changeForgotPasswordFetch as _changeForgotPasswordFetch, changeLanguage as _changeLanguage, entropyPasswordFetch, selectChangeForgotPasswordSuccess, selectConfigs, selectCurrentPasswordEntropy, selectMobileDeviceState } from '../../modules';\nvar ChangeForgottenPasswordComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(ChangeForgottenPasswordComponent, _React$Component);\n  var _super = _createSuper(ChangeForgottenPasswordComponent);\n  function ChangeForgottenPasswordComponent(props) {\n    var _this;\n    _classCallCheck(this, ChangeForgottenPasswordComponent);\n    _this = _super.call(this, props);\n    _this.handleSendNewPassword = function (payload) {\n      var confirmToken = _this.state.confirmToken;\n      _this.props.changeForgotPasswordFetch(_objectSpread(_objectSpread({}, payload), {}, {\n        reset_password_token: confirmToken\n      }));\n    };\n    _this.state = {\n      confirmToken: ''\n    };\n    return _this;\n  }\n  _createClass(ChangeForgottenPasswordComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      setDocumentTitle('Change forgotten password');\n      var history = this.props.history;\n      var token = new URLSearchParams(history.location.search).get('reset_token');\n      var lang = new URLSearchParams(history.location.search).get('lang');\n      if (token) {\n        this.setState({\n          confirmToken: token\n        });\n      }\n      if (lang) {\n        this.props.changeLanguage(lang.toLowerCase());\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(next) {\n      if (next.changeForgotPassword && !this.props.changeForgotPassword) {\n        this.props.history.push('/signin');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        isMobileDevice = _this$props.isMobileDevice,\n        configs = _this$props.configs,\n        currentPasswordEntropy = _this$props.currentPasswordEntropy;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-change-forgotten-password-screen\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"pg-change-forgotten-password-screen__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ChangePassword, {\n        handleChangePassword: this.handleSendNewPassword,\n        title: !isMobileDevice && this.props.intl.formatMessage({\n          id: 'page.header.signIn.resetPassword.title'\n        }),\n        configs: configs,\n        currentPasswordEntropy: currentPasswordEntropy,\n        fetchCurrentPasswordEntropy: this.props.fetchCurrentPasswordEntropy,\n        hideOldPassword: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n  return ChangeForgottenPasswordComponent;\n}(React.Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    changeForgotPassword: selectChangeForgotPasswordSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    configs: selectConfigs(state)\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    changeForgotPasswordFetch: function changeForgotPasswordFetch(credentials) {\n      return dispatch(_changeForgotPasswordFetch(credentials));\n    },\n    changeLanguage: function changeLanguage(lang) {\n      return dispatch(_changeLanguage(lang));\n    },\n    fetchCurrentPasswordEntropy: function fetchCurrentPasswordEntropy(payload) {\n      return dispatch(entropyPasswordFetch(payload));\n    }\n  };\n};\nexport var ChangeForgottenPasswordScreen = compose(injectIntl, withRouter, connect(mapStateToProps, mapDispatchToProps))(ChangeForgottenPasswordComponent);","map":{"version":3,"names":["React","injectIntl","connect","withRouter","compose","ChangePassword","setDocumentTitle","changeForgotPasswordFetch","changeLanguage","entropyPasswordFetch","selectChangeForgotPasswordSuccess","selectConfigs","selectCurrentPasswordEntropy","selectMobileDeviceState","ChangeForgottenPasswordComponent","props","handleSendNewPassword","payload","confirmToken","state","reset_password_token","history","token","URLSearchParams","location","search","get","lang","setState","toLowerCase","next","changeForgotPassword","push","isMobileDevice","configs","currentPasswordEntropy","intl","formatMessage","id","fetchCurrentPasswordEntropy","Component","mapStateToProps","mapDispatchToProps","dispatch","credentials","ChangeForgottenPasswordScreen"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/src/screens/ChangeForgottenPasswordScreen/index.tsx"],"sourcesContent":["import * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport {\n  connect,\n  MapDispatchToPropsFunction,\n  MapStateToProps,\n} from 'react-redux';\nimport { RouterProps } from 'react-router';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { IntlProps } from '../../';\nimport { ChangePassword } from '../../components';\nimport { setDocumentTitle } from '../../helpers';\nimport {\n    changeForgotPasswordFetch,\n    changeLanguage,\n    Configs,\n    entropyPasswordFetch,\n    RootState, selectChangeForgotPasswordSuccess,\n    selectConfigs,\n    selectCurrentPasswordEntropy,\n    selectMobileDeviceState,\n} from '../../modules';\n\ninterface ChangeForgottenPasswordState {\n    confirmToken: string;\n}\n\ninterface ReduxProps {\n    changeForgotPassword?: boolean;\n    isMobileDevice: boolean;\n    configs: Configs;\n    currentPasswordEntropy: number;\n}\n\ninterface DispatchProps {\n    changeForgotPasswordFetch: typeof changeForgotPasswordFetch;\n    changeLanguage: typeof changeLanguage;\n    fetchCurrentPasswordEntropy: typeof entropyPasswordFetch;\n}\n\ninterface HistoryProps {\n    history: {\n        location: {\n            search: string;\n        };\n    };\n}\n\ntype Props = RouterProps & DispatchProps & HistoryProps & ReduxProps & IntlProps;\n\nclass ChangeForgottenPasswordComponent extends React.Component<Props, ChangeForgottenPasswordState> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            confirmToken: '',\n        };\n    }\n\n    public componentDidMount() {\n        setDocumentTitle('Change forgotten password');\n        const { history } = this.props;\n        const token = new URLSearchParams(history.location.search).get('reset_token');\n        const lang = new URLSearchParams(history.location.search).get('lang');\n        if (token) {\n            this.setState({\n                confirmToken: token,\n            });\n        }\n        if (lang) {\n            this.props.changeLanguage(lang.toLowerCase());\n        }\n    }\n\n    public componentWillReceiveProps(next: Props) {\n        if (next.changeForgotPassword && (!this.props.changeForgotPassword)) {\n            this.props.history.push('/signin');\n        }\n    }\n\n    public render() {\n        const { isMobileDevice, configs, currentPasswordEntropy } = this.props;\n\n        return (\n            <div className=\"pg-change-forgotten-password-screen\">\n                <div className=\"pg-change-forgotten-password-screen__container\">\n                    <ChangePassword\n                        handleChangePassword={this.handleSendNewPassword}\n                        title={!isMobileDevice && this.props.intl.formatMessage({id: 'page.header.signIn.resetPassword.title'})}\n                        configs={configs}\n                        currentPasswordEntropy={currentPasswordEntropy}\n                        fetchCurrentPasswordEntropy={this.props.fetchCurrentPasswordEntropy}\n                        hideOldPassword={true}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private handleSendNewPassword = payload => {\n        const { confirmToken } = this.state;\n        this.props.changeForgotPasswordFetch({\n            ...payload,\n            reset_password_token: confirmToken,\n        });\n    };\n}\n\nconst mapStateToProps: MapStateToProps<ReduxProps, {}, RootState> = state => ({\n    changeForgotPassword: selectChangeForgotPasswordSuccess(state),\n    isMobileDevice: selectMobileDeviceState(state),\n    currentPasswordEntropy: selectCurrentPasswordEntropy(state),\n    configs: selectConfigs(state),\n});\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<DispatchProps, {}> =\n    dispatch => ({\n        changeForgotPasswordFetch: credentials => dispatch(changeForgotPasswordFetch(credentials)),\n        changeLanguage: lang => dispatch(changeLanguage(lang)),\n        fetchCurrentPasswordEntropy: payload => dispatch(entropyPasswordFetch(payload)),\n    });\n\nexport const ChangeForgottenPasswordScreen = compose(\n    injectIntl,\n    withRouter,\n    connect(mapStateToProps, mapDispatchToProps),\n)(ChangeForgottenPasswordComponent) as React.ComponentClass;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}