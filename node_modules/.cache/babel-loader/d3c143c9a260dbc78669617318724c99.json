{"ast":null,"code":"import { isString } from './is';\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr = void 0;\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(\"#\" + elem.id);\n  }\n  // eslint-disable-next-line prefer-const\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(\".\" + classes[i]);\n    }\n  }\n  var allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(\"[\" + key + \"=\\\"\" + attr + \"\\\"]\");\n    }\n  }\n  return out.join('');\n}","map":{"version":3,"sources":["../src/browser.ts"],"names":[],"mappings":"AAAA,SAAS,QAAQ,QAAQ,MAAM;AAE/B;;;;;AAKG;AACH,OAAM,SAAU,gBAAgB,CAAC,IAAa,EAAA;EAK5C;EACA;EACA;EACA;EACA,IAAI;IACF,IAAI,WAAW,GAAG,IAAkB;IACpC,IAAM,mBAAmB,GAAG,CAAC;IAC7B,IAAM,cAAc,GAAG,EAAE;IACzB,IAAM,GAAG,GAAG,EAAE;IACd,IAAI,MAAM,GAAG,CAAC;IACd,IAAI,GAAG,GAAG,CAAC;IACX,IAAM,SAAS,GAAG,KAAK;IACvB,IAAM,SAAS,GAAG,SAAS,CAAC,MAAM;IAClC,IAAI,OAAO,GAAA,KAAA,CAAA;IAEX;IACA,OAAO,WAAW,IAAI,MAAM,EAAE,GAAG,mBAAmB,EAAE;MACpD,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC;MAC3C;MACA;MACA;MACA;MACA,IAAI,OAAO,KAAK,MAAM,IAAK,MAAM,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,SAAS,GAAG,OAAO,CAAC,MAAM,IAAI,cAAe,EAAE;QACzG;MACD;MAED,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;MAEjB,GAAG,IAAI,OAAO,CAAC,MAAM;MACrB,WAAW,GAAG,WAAW,CAAC,UAAU;IACrC;IAED,OAAO,GAAG,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;GACrC,CAAC,OAAO,GAAG,EAAE;IACZ,OAAO,WAAW;EACnB;AACH;AAEA;;;;AAIG;AACH,SAAS,oBAAoB,CAAC,EAAW,EAAA;EACvC,IAAM,IAAI,GAAG,EAKZ;EAED,IAAM,GAAG,GAAG,EAAE;EACd,IAAI,SAAS;EACb,IAAI,OAAO;EACX,IAAI,GAAG;EACP,IAAI,IAAI;EACR,IAAI,CAAC;EAEL,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;IAC1B,OAAO,EAAE;EACV;EAED,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;EACpC,IAAI,IAAI,CAAC,EAAE,EAAE;IACX,GAAG,CAAC,IAAI,CAAC,GAAA,GAAI,IAAI,CAAC,EAAI,CAAC;EACxB;EAED;EACA,SAAS,GAAG,IAAI,CAAC,SAAS;EAC1B,IAAI,SAAS,IAAI,QAAQ,CAAC,SAAS,CAAC,EAAE;IACpC,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;IAChC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACnC,GAAG,CAAC,IAAI,CAAC,GAAA,GAAI,OAAO,CAAC,CAAC,CAAG,CAAC;IAC3B;EACF;EACD,IAAM,YAAY,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC;EACrD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC;IACrB,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC;IAC7B,IAAI,IAAI,EAAE;MACR,GAAG,CAAC,IAAI,CAAC,GAAA,GAAI,GAAG,GAAA,KAAA,GAAK,IAAI,GAAA,KAAI,CAAC;IAC/B;EACF;EACD,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;AACrB","sourcesContent":["import { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  // eslint-disable-next-line prefer-const\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}