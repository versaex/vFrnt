{"ast":null,"code":"import { invariant } from '../utils';\nimport { Type } from '../262';\nimport { FormatNumericToString } from '../NumberFormat/FormatNumericToString';\nimport { GetOperands } from './GetOperands';\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\nexport function ResolvePlural(pl, n, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n    PluralRuleSelect = _a.PluralRuleSelect;\n  var internalSlots = getInternalSlots(pl);\n  invariant(Type(internalSlots) === 'Object', 'pl has to be an object');\n  invariant('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n  invariant(Type(n) === 'Number', 'n must be a number');\n  if (!isFinite(n)) {\n    return 'other';\n  }\n  var locale = internalSlots.locale,\n    type = internalSlots.type;\n  var res = FormatNumericToString(internalSlots, n);\n  var s = res.formattedString;\n  var operands = GetOperands(s);\n  return PluralRuleSelect(locale, type, n, operands);\n}","map":{"version":3,"names":["invariant","Type","FormatNumericToString","GetOperands","ResolvePlural","pl","n","_a","getInternalSlots","PluralRuleSelect","internalSlots","isFinite","locale","type","res","s","formattedString","operands"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/@formatjs/ecma402-abstract/lib/PluralRules/ResolvePlural.js"],"sourcesContent":["import { invariant } from '../utils';\nimport { Type } from '../262';\nimport { FormatNumericToString } from '../NumberFormat/FormatNumericToString';\nimport { GetOperands } from './GetOperands';\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\nexport function ResolvePlural(pl, n, _a) {\n    var getInternalSlots = _a.getInternalSlots, PluralRuleSelect = _a.PluralRuleSelect;\n    var internalSlots = getInternalSlots(pl);\n    invariant(Type(internalSlots) === 'Object', 'pl has to be an object');\n    invariant('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n    invariant(Type(n) === 'Number', 'n must be a number');\n    if (!isFinite(n)) {\n        return 'other';\n    }\n    var locale = internalSlots.locale, type = internalSlots.type;\n    var res = FormatNumericToString(internalSlots, n);\n    var s = res.formattedString;\n    var operands = GetOperands(s);\n    return PluralRuleSelect(locale, type, n, operands);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,IAAI,QAAQ,QAAQ;AAC7B,SAASC,qBAAqB,QAAQ,uCAAuC;AAC7E,SAASC,WAAW,QAAQ,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAa,CAACC,EAAE,EAAEC,CAAC,EAAEC,EAAE,EAAE;EACrC,IAAIC,gBAAgB,GAAGD,EAAE,CAACC,gBAAgB;IAAEC,gBAAgB,GAAGF,EAAE,CAACE,gBAAgB;EAClF,IAAIC,aAAa,GAAGF,gBAAgB,CAACH,EAAE,CAAC;EACxCL,SAAS,CAACC,IAAI,CAACS,aAAa,CAAC,KAAK,QAAQ,EAAE,wBAAwB,CAAC;EACrEV,SAAS,CAAC,wBAAwB,IAAIU,aAAa,EAAE,iCAAiC,CAAC;EACvFV,SAAS,CAACC,IAAI,CAACK,CAAC,CAAC,KAAK,QAAQ,EAAE,oBAAoB,CAAC;EACrD,IAAI,CAACK,QAAQ,CAACL,CAAC,CAAC,EAAE;IACd,OAAO,OAAO;EAClB;EACA,IAAIM,MAAM,GAAGF,aAAa,CAACE,MAAM;IAAEC,IAAI,GAAGH,aAAa,CAACG,IAAI;EAC5D,IAAIC,GAAG,GAAGZ,qBAAqB,CAACQ,aAAa,EAAEJ,CAAC,CAAC;EACjD,IAAIS,CAAC,GAAGD,GAAG,CAACE,eAAe;EAC3B,IAAIC,QAAQ,GAAGd,WAAW,CAACY,CAAC,CAAC;EAC7B,OAAON,gBAAgB,CAACG,MAAM,EAAEC,IAAI,EAAEP,CAAC,EAAEW,QAAQ,CAAC;AACtD"},"metadata":{},"sourceType":"module"}