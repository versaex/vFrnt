{"ast":null,"code":"import { useReducer, useRef, useEffect, useMemo, useLayoutEffect } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\nexport function useSelector(selector, equalityFn) {\n  if (equalityFn === void 0) {\n    equalityFn = refEquality;\n  }\n  invariant(selector, \"You must pass a selector to useSelectors\");\n  var _useReduxContext = useReduxContext(),\n    store = _useReduxContext.store,\n    contextSub = _useReduxContext.subscription;\n  var _useReducer = useReducer(function (s) {\n      return s + 1;\n    }, 0),\n    forceRender = _useReducer[1];\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n    throw new Error(errorMessage);\n  }\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n      forceRender({});\n    }\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}","map":{"version":3,"names":["useReducer","useRef","useEffect","useMemo","useLayoutEffect","invariant","useReduxContext","Subscription","useIsomorphicLayoutEffect","window","refEquality","a","b","useSelector","selector","equalityFn","_useReduxContext","store","contextSub","subscription","_useReducer","s","forceRender","latestSubscriptionCallbackError","latestSelector","latestSelectedState","selectedState","current","getState","err","errorMessage","message","stack","Error","undefined","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe"],"sources":["C:/Users/Elton/OneDrive/Desktop/baseapp-2024/node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["import { useReducer, useRef, useEffect, useMemo, useLayoutEffect } from 'react';\nimport invariant from 'invariant';\nimport { useReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription'; // React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\n\n\nexport function useSelector(selector, equalityFn) {\n  if (equalityFn === void 0) {\n    equalityFn = refEquality;\n  }\n\n  invariant(selector, \"You must pass a selector to useSelectors\");\n\n  var _useReduxContext = useReduxContext(),\n      store = _useReduxContext.store,\n      contextSub = _useReduxContext.subscription;\n\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    var errorMessage = \"An error occured while selecting the store state: \" + err.message + \".\";\n\n    if (latestSubscriptionCallbackError.current) {\n      errorMessage += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\nOriginal stack trace:\";\n    }\n\n    throw new Error(errorMessage);\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}