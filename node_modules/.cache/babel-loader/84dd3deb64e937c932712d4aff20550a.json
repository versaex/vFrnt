{"ast":null,"code":"import { __read } from \"tslib\";\nimport { SentryError } from './error';\n/** Regular expression used to parse a Dsn. */\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n/** Error message */\nvar ERROR_MESSAGE = 'Invalid Dsn';\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nvar Dsn = /** @class */function () {\n  /** Creates a new Dsn component */\n  function Dsn(from) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n    this._validate();\n  }\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  Dsn.prototype.toString = function (withPassword) {\n    if (withPassword === void 0) {\n      withPassword = false;\n    }\n    var _a = this,\n      host = _a.host,\n      path = _a.path,\n      pass = _a.pass,\n      port = _a.port,\n      projectId = _a.projectId,\n      protocol = _a.protocol,\n      user = _a.user;\n    return protocol + \"://\" + user + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n  };\n  /** Parses a string into this Dsn. */\n  Dsn.prototype._fromString = function (str) {\n    var match = DSN_REGEX.exec(str);\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n    var _a = __read(match.slice(1), 6),\n      protocol = _a[0],\n      user = _a[1],\n      _b = _a[2],\n      pass = _b === void 0 ? '' : _b,\n      host = _a[3],\n      _c = _a[4],\n      port = _c === void 0 ? '' : _c,\n      lastPath = _a[5];\n    var path = '';\n    var projectId = lastPath;\n    var split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop();\n    }\n    if (projectId) {\n      var projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n    this._fromComponents({\n      host: host,\n      pass: pass,\n      path: path,\n      projectId: projectId,\n      port: port,\n      protocol: protocol,\n      user: user\n    });\n  };\n  /** Maps Dsn components into this instance. */\n  Dsn.prototype._fromComponents = function (components) {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  };\n  /** Validates this Dsn and throws on error. */\n  Dsn.prototype._validate = function () {\n    var _this = this;\n    ['protocol', 'user', 'host', 'projectId'].forEach(function (component) {\n      if (!_this[component]) {\n        throw new SentryError(ERROR_MESSAGE + \": \" + component + \" missing\");\n      }\n    });\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid projectId \" + this.projectId);\n    }\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid protocol \" + this.protocol);\n    }\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid port \" + this.port);\n    }\n  };\n  return Dsn;\n}();\nexport { Dsn };","map":{"version":3,"sources":["../src/dsn.ts"],"names":[],"mappings":"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","sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}